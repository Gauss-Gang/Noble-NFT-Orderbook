{"version":3,"file":"nft-swap-sdk.cjs.development.js","sources":["../node_modules/regenerator-runtime/runtime.js","../src/utils/eth.ts","../src/sdk/v3/types.ts","../src/utils/v3/order.ts","../src/sdk/error.ts","../src/utils/bn/convert.ts","../src/utils/v3/asset-data.ts","../src/contracts/factories/ZeroEx/v3/ExchangeContract__factory.ts","../src/contracts/factories/ZeroEx/v3/Forwarder__factory.ts","../src/contracts/factories/ZeroEx/v4/IZeroEx__factory.ts","../src/contracts/factories/ERC1155__factory.ts","../src/contracts/factories/ERC20__factory.ts","../src/contracts/factories/ERC721__factory.ts","../src/utils/typed-data.ts","../src/utils/v3/eip1271.ts","../src/sdk/v3/pure.ts","../src/utils/v3/default-addresses.ts","../src/utils/v3/gas-buffer.ts","../src/utils/sleep.ts","../src/sdk/v3/NftSwapV3.ts","../src/sdk/v4/constants.ts","../src/sdk/v4/pure.ts","../src/sdk/v4/nft-safe-transfer-from-data.ts","../src/sdk/v4/orderbook.ts","../src/utils/addresses.ts","../src/sdk/v4/enums.ts","../src/sdk/v4/properties.ts","../src/sdk/v4/NftSwapV4.ts"],"sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// import startsWith from 'lodash/startsWith';\r\nimport { isHexString } from '@ethersproject/bytes';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\n\r\nexport const CRYPTO_KITTIES_CONTRACT_ADDRESS =\r\n  '0x06012c8cf97bead5deae237070f9587f8e7a266d';\r\n\r\nexport const ETH_GAS_STATION_API_BASE_URL = 'https://ethgasstation.info';\r\nexport const ETH_GAS_STATION_GAS_ENDPOINT = `${ETH_GAS_STATION_API_BASE_URL}/json/ethgasAPI.json`;\r\n\r\nexport const MAX_UINT256 = BigNumber.from(2).pow(128).sub(1);\r\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = MAX_UINT256;\r\nexport const GWEI_IN_WEI = BigNumber.from(1000000000);\r\nexport const GWEI_IN_ETH = BigNumber.from(1000000000);\r\n\r\nexport const ZERO_AMOUNT = BigNumber.from(0);\r\nexport const ONE_AMOUNT = BigNumber.from(1);\r\n\r\nexport const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\r\nexport const NULL_BYTES = '0x';\r\nexport const BASE_TEN = 10;\r\n\r\nexport const ONE_NFT_UNIT = ONE_AMOUNT;\r\nexport const ZERO_NFT_UNIT = ZERO_AMOUNT;\r\nexport const DEFAULT_ERC20_TOKEN_DECIMALS = BigNumber.from(18);\r\n\r\nexport type Numberish = BigNumber | number | string;\r\n\r\nconst isENSAddressFormat = (address: string) => !!address.match(/.+\\..+/g);\r\n\r\n// const isHexStringIgnorePrefix = (value: string) => {\r\n//   const trimmedValue = value.trim();\r\n//   const updatedValue = addHexPrefix(trimmedValue);\r\n//   return isHexString(updatedValue);\r\n// };\r\n\r\n// const addHexPrefix = (value: string) =>\r\n//   startsWith(value, '0x') ? value : `0x${value}`;\r\n\r\n// const convertRawAmountToDecimalFormat = (\r\n//   value: BigNumber,\r\n//   decimals: Numberish = new BigNumber(18),\r\n//   maxFormattedDecimals = 4\r\n// ): string =>\r\n//    BigNumber.from(value)\r\n//     .dividedBy(new BigNumber(10).pow(decimals))\r\n//     .decimalPlaces(maxFormattedDecimals)\r\n//     .toFormat(maxFormattedDecimals)\r\n//     .toString();\r\n\r\nconst getEthPriceInUsd = async (): Promise<number | undefined> => {\r\n  const res = await fetch(\r\n    'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd'\r\n  );\r\n  const json = await res.json();\r\n  return json?.ethereum?.usd;\r\n};\r\n\r\n// const convertGweiToEth = (gweiAmount: BigNumber) => {\r\n//   const BASE_TEN = 10;\r\n//   const unit = new BigNumber(BASE_TEN).pow(-9);\r\n//   const gweiInEth = unit.times(gweiAmount);\r\n//   return gweiInEth;\r\n// };\r\n\r\n/**\r\n *\r\n * @returns gas price in wei (base unit), need to convert to eth\r\n */\r\n// const getGasPrice = async (): Promise<BigNumber> => {\r\n//   try {\r\n//     const res = await fetch(ETH_GAS_STATION_GAS_ENDPOINT);\r\n//     const gasInfo = await res.json();\r\n//     // Eth Gas Station result is gwei * 10\r\n//     const BASE_TEN = 10;\r\n//     const gasPriceGwei = new BigNumber(gasInfo.fast / BASE_TEN);\r\n//     const unit = new BigNumber(BASE_TEN).pow(9);\r\n//     const gasPriceWei = unit.times(gasPriceGwei);\r\n//     return gasPriceWei;\r\n//   } catch (e) {\r\n//     throw new Error(e as any);\r\n//   }\r\n// };\r\n\r\n// const toBaseUnitAmount = (amount: Numberish, decimals: number): BigNumber => {\r\n//   const unit = new BigNumber(BASE_TEN).pow(decimals)\r\n//   const baseUnitAmount = unit.times(amount)\r\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0\r\n//   if (hasDecimals) {\r\n//     throw new Error(`Invalid unit amount: ${amount.toString(BASE_TEN)} - Too many decimal places`)\r\n//   }\r\n//   return baseUnitAmount\r\n// }\r\n\r\nexport interface ObjectMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\nconst arrayToMapWithId = <T extends object>(\r\n  array: T[],\r\n  idKey: keyof T\r\n): ObjectMap<T> => {\r\n  const initialMap: ObjectMap<T> = {};\r\n  return array.reduce((acc, val) => {\r\n    const id = val[idKey] as any;\r\n    acc[id] = val;\r\n    return acc;\r\n  }, initialMap);\r\n};\r\n\r\n// const convertAmountToBigNumber = (value: BigNumberIsh): BigNumber => {\r\n//   const num = value || 0;\r\n//   const isBigNumber = BigNumber.isBigNumber(num);\r\n//   if (isBigNumber) {\r\n//     return num as BigNumber;\r\n//   }\r\n\r\n//   if (isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\r\n//     return new BigNumber(num.replace('0x', ''), 16);\r\n//   }\r\n\r\n//   const baseTen = 10;\r\n//   return BigNumber.from((num as number).toString(baseTen));\r\n// };\r\n\r\n// const encodeAmountAsHexString = (value: BigNumberIsh): string => {\r\n//   const valueBigNumber = convertAmountToBigNumber(value);\r\n//   const hexBase = 16;\r\n//   const valueHex = valueBigNumber.toString(hexBase);\r\n\r\n//   return valueBigNumber.isLessThan(0)\r\n//     ? `-0x${valueHex.substr(1)}`\r\n//     : `0x${valueHex}`;\r\n// };\r\n\r\nconst isHexAddressFormat = (address: string): boolean => {\r\n  if (!isHexString(address)) return false;\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    return false;\r\n  }\r\n  if (\r\n    /^(0x)?[0-9a-f]{40}$/.test(address) ||\r\n    /^(0x)?[0-9A-F]{40}$/.test(address)\r\n  ) {\r\n    return true;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport function getUrlForFallbackTokenIcon(address: string) {\r\n  let checksummedAddress: string;\r\n  try {\r\n    checksummedAddress = getAddress(address);\r\n  } catch {\r\n    return null;\r\n  }\r\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${checksummedAddress}/logo.png`;\r\n}\r\n\r\n// const getErrorMessageFromErrorCode = (\r\n//   errorCode?: ERC20_BALANCE_ERROR_CODES | TOKEN_CONTRACT_ERROR_CODES\r\n// ) => {\r\n//   if (isNil(errorCode)) {\r\n//     return;\r\n//   }\r\n//   switch (errorCode) {\r\n//     case TOKEN_CONTRACT_ERROR_CODES.MISSING_CONTRACT_ADDRESS_ERROR:\r\n//       return 'Token contract address missing';\r\n//     case TOKEN_CONTRACT_ERROR_CODES.INVALID_CONTRACT_ADDRESS_ERROR:\r\n//     case VALIDATION_ERROR_CODES.INVALID_CONTRACT_ADDRESS:\r\n//       return 'Invalid token contract address';\r\n//     case TOKEN_CONTRACT_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\r\n//     case BALANCE_CHECK_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\r\n//       return 'Error loading contract address';\r\n//     case VALIDATION_ERROR_CODES.INVALID_ADDRESS_FORMAT:\r\n//       return 'Incorrect wallet address';\r\n//     case VALIDATION_ERROR_CODES.INVALID_ENS:\r\n//       return 'Incorrect ENS name';\r\n//     case VALIDATION_ERROR_CODES.INVALID_HEX_ADDRESS:\r\n//       return 'Invalid hex address';\r\n//     case BALANCE_CHECK_ERROR_CODES.BALANCE_LOOKUP_ERROR:\r\n//       return 'Error looking up token balance';\r\n//     default:\r\n//       throw new Error(`Unhandled error code ${errorCode}`);\r\n//   }\r\n// };\r\n\r\nconst getShortenedAddress = (\r\n  address: string,\r\n  start: number = 6,\r\n  end: number = 4\r\n) => {\r\n  const shortenedAddress = `${address.slice(0, start)}...${address.slice(\r\n    -1 * end\r\n  )}`;\r\n  return shortenedAddress;\r\n};\r\n\r\nexport const toUnitAmount = (amount: BigNumber, decimals: number) => {\r\n  const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n\r\n  const unitAmount = amount.div(unit);\r\n  // const hasDecimals = unit.() !== 0;\r\n  // if (hasDecimals) {\r\n  //   throw new Error(\r\n  //     `Invalid unit amount: ${amount.toString()}, incorrect decimals ${decimals}`\r\n  //   );\r\n  // }\r\n  return unitAmount;\r\n};\r\n\r\n// export const toBaseUnitAmount = (\r\n//   amount: Numberish,\r\n//   decimals: number\r\n// ): BigNumber => {\r\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n//   const baseUnitAmount = unit.mul(amount);\r\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0;\r\n//   if (hasDecimals) {\r\n//     throw new Error(\r\n//       `Invalid unit amount: ${amount.toString()} - Too many decimal places`\r\n//     );\r\n//   }\r\n//   return baseUnitAmount;\r\n// };\r\n\r\n// export const toNearestBaseUnitAmount = (\r\n//   amount: BigNumber,\r\n//   decimals: number\r\n// ): BigNumber => {\r\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n//   const baseUnitAmount = unit.mul(amount);\r\n//   const nearestBaseUnitAmount = baseUnitAmount.decimalPlaces(0);\r\n//   return nearestBaseUnitAmount;\r\n// };\r\n\r\n// export const toBaseUnitAmountSafe = (\r\n//   amount?: BigNumber | string | number,\r\n//   decimals?: BigNumber | string | number\r\n// ): BigNumber | undefined => {\r\n//   if (amount === undefined) {\r\n//     return undefined;\r\n//   }\r\n//   if (decimals === undefined) {\r\n//     return undefined;\r\n//   }\r\n//   return toBaseUnitAmount(\r\n//     new BigNumber(amount),\r\n//     new BigNumber(decimals).toNumber()\r\n//   );\r\n// };\r\n\r\nconst getEtherscanRootUrlForChain = (chainId: number) => {\r\n  if (chainId === 4) {\r\n    return 'https://rinkeby.etherscan.io';\r\n  }\r\n  return 'https://etherscan.io';\r\n};\r\n\r\nexport const getEtherscanLinkFromTxHash = (txHash: string, chainId: number) => {\r\n  if (!txHash) {\r\n    return undefined;\r\n  }\r\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\r\n  const normalizedHash = txHash.replace(/-.*/g, '');\r\n  const etherscanLink = `${etherscanRoot}/tx/${normalizedHash}`;\r\n  return etherscanLink;\r\n};\r\n\r\nexport const getEtherscanLinkForAccount = (\r\n  account: string,\r\n  chainId: number\r\n) => {\r\n  if (!account) {\r\n    return undefined;\r\n  }\r\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\r\n  const normalizedAccount = account.replace(/-.*/g, '');\r\n  const etherscanLink = `${etherscanRoot}/address/${normalizedAccount}`;\r\n  return etherscanLink;\r\n};\r\n\r\n// export const convertGweiToWei = (numInGwei: BigNumber) => {\r\n//   const numInWei = numInGwei.mul(GWEI_IN_WEI)\r\n//   return numInWei;\r\n// };\r\n\r\n// export const convertWeiToGwei = (numInWei: BigNumber) => {\r\n//   const numInGwei = numInWei.div(GWEI_IN_WEI).toFixed(0);\r\n//   return numInGwei;\r\n// };\r\n\r\nexport {\r\n  isENSAddressFormat,\r\n  isHexAddressFormat,\r\n  // isHexStringIgnorePrefix,\r\n  // getGasPrice,\r\n  getEthPriceInUsd,\r\n  // encodeAmountAsHexString,\r\n  // convertAmountToBigNumber,\r\n  arrayToMapWithId,\r\n  getShortenedAddress,\r\n  // convertGweiToEth,\r\n};\r\n","import type { BigNumber } from '@ethersproject/bignumber';\r\nimport type { Bytes } from '@ethersproject/bytes';\r\n\r\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\r\n\r\nexport interface AddressesForChainV3 {\r\n  exchange: string;\r\n  erc20Proxy: string;\r\n  erc721Proxy: string;\r\n  multiAssetProxy: string;\r\n  erc1155Proxy: string;\r\n  forwarder: string;\r\n  wrappedNativeToken?: string | null;\r\n}\r\n\r\nexport type ContractAddresses = {\r\n  [chainId: string]: AddressesForChainV3;\r\n};\r\n\r\nexport interface Order {\r\n  makerAddress: string;\r\n  takerAddress: string;\r\n  feeRecipientAddress: string;\r\n  senderAddress: string;\r\n  makerAssetAmount: string;\r\n  takerAssetAmount: string;\r\n  makerFee: string;\r\n  takerFee: string;\r\n  expirationTimeSeconds: string;\r\n  salt: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerFeeAssetData: string;\r\n  takerFeeAssetData: string;\r\n  signature?: string;\r\n}\r\n\r\nexport interface SignedOrder extends Order {\r\n  signature: string;\r\n}\r\n\r\nexport declare enum SignatureType {\r\n  Illegal = 0,\r\n  Invalid = 1,\r\n  EIP712 = 2,\r\n  EthSign = 3,\r\n  Wallet = 4,\r\n  Validator = 5,\r\n  PreSigned = 6,\r\n  EIP1271Wallet = 7,\r\n  NSignatureTypes = 8,\r\n}\r\n\r\nexport enum AssetProxyId {\r\n  ERC20 = '0xf47261b0',\r\n  ERC721 = '0x02571792',\r\n  MultiAsset = '0x94cfcdd7',\r\n  ERC1155 = '0xa7cb5fb7',\r\n  StaticCall = '0xc339d10a',\r\n  ERC20Bridge = '0xdc1600f3',\r\n}\r\n\r\nexport enum SupportedChainIdsV3 {\r\n  Mainnet = 1,\r\n  Ropsten = 3,\r\n  Rinkeby = 4,\r\n  Kovan = 42,\r\n  Ganache = 1337,\r\n  BSC = 56,\r\n  Polygon = 137,\r\n  PolygonMumbai = 80001,\r\n  Avalanche = 43114,\r\n  GaussMainnet = 1777,\r\n  GILTestnet = 1452,\r\n}\r\n\r\nexport interface OrderInfoV3 {\r\n  orderStatus: OrderStatusV3;\r\n  orderHash: string;\r\n  orderTakerAssetFilledAmount: BigNumber;\r\n}\r\n\r\nexport enum OrderStatusV3 {\r\n  Invalid = 0,\r\n  InvalidMakerAssetAmount,\r\n  InvalidTakerAssetAmount,\r\n  Fillable,\r\n  Expired,\r\n  FullyFilled,\r\n  Cancelled,\r\n}\r\n\r\nexport const OrderStatusCodeLookup = {\r\n  0: 'Invalid',\r\n  1: 'InvalidMakerAssetAmount',\r\n  2: 'InvalidTakerAssetAmount',\r\n  3: 'Fillable',\r\n  4: 'Expired',\r\n  5: 'FullyFilled',\r\n  6: 'Cancelled',\r\n};\r\n\r\nexport interface ERC20AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n}\r\n\r\nexport interface ERC20BridgeAssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  bridgeAddress: string;\r\n  bridgeData: string;\r\n}\r\n\r\nexport interface ERC721AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenId: BigNumber;\r\n}\r\n\r\nexport interface ERC1155AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenIds: BigNumber[];\r\n  tokenValues: BigNumber[];\r\n  callbackData: string;\r\n}\r\n\r\nexport interface StaticCallAssetData {\r\n  assetProxyId: string;\r\n  callTarget: string;\r\n  staticCallData: string;\r\n  callResultHash: string;\r\n}\r\n\r\nexport interface ERC1155AssetDataNoProxyId {\r\n  tokenAddress: string;\r\n  tokenValues: BigNumber[];\r\n  tokenIds: BigNumber[];\r\n  callbackData: string;\r\n}\r\n\r\nexport declare type SingleAssetData =\r\n  | ERC20AssetData\r\n  | ERC20BridgeAssetData\r\n  | ERC721AssetData\r\n  | ERC1155AssetData\r\n  | StaticCallAssetData;\r\n\r\nexport interface MultiAssetData {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: string[];\r\n}\r\n\r\nexport interface MultiAssetDataWithRecursiveDecoding {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: SingleAssetData[];\r\n}\r\n\r\nexport interface MultiAssetDataWithRecursiveDecoding {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: SingleAssetData[];\r\n}\r\n\r\nexport interface DutchAuctionData {\r\n  assetData: AssetData;\r\n  beginTimeSeconds: BigNumber;\r\n  beginAmount: BigNumber;\r\n}\r\n\r\nexport declare type AssetData =\r\n  | SingleAssetData\r\n  | MultiAssetData\r\n  | MultiAssetDataWithRecursiveDecoding;\r\n\r\nexport type AvailableSingleAssetDataTypes =\r\n  | ERC20AssetData\r\n  | ERC721AssetData\r\n  | ERC1155AssetData;\r\n\r\nexport type AvailableAssetDataTypes =\r\n  | AvailableSingleAssetDataTypes\r\n  | MultiAssetData;\r\n\r\nexport interface MultiAssetDataSerialized {\r\n  assetProxyId: string;\r\n  amounts: string[];\r\n  nestedAssetData: string[];\r\n}\r\n\r\n// User facing\r\nexport interface UserFacingERC20AssetDataSerialized {\r\n  tokenAddress: string;\r\n  type: 'ERC20';\r\n  amount: string;\r\n}\r\n\r\nexport interface UserFacingERC721AssetDataSerialized {\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n  type: 'ERC721';\r\n}\r\n\r\nexport interface UserFacingERC1155AssetDataSerialized {\r\n  tokenAddress: string;\r\n  tokens: Array<{ tokenId: string; tokenValue: string }>;\r\n  type: 'ERC1155';\r\n}\r\n\r\n/**\r\n * Mimic the erc721 duck type\r\n */\r\nexport interface UserFacingERC1155AssetDataSerializedNormalizedSingle {\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n  type: 'ERC1155';\r\n  amount?: string; // Will default to '1'\r\n}\r\n\r\nexport type UserFacingSerializedSingleAssetDataTypes =\r\n  | UserFacingERC20AssetDataSerialized\r\n  | UserFacingERC721AssetDataSerialized\r\n  | UserFacingERC1155AssetDataSerialized;\r\n\r\nexport interface ERC20AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n}\r\n\r\nexport interface ERC721AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n}\r\nexport interface ERC1155AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenIds: string[];\r\n  tokenValues: string[];\r\n  callbackData: string;\r\n}\r\n\r\nexport type SerializedSingleAssetDataTypes =\r\n  | ERC20AssetDataSerialized\r\n  | ERC721AssetDataSerialized\r\n  | ERC1155AssetDataSerialized;\r\n\r\nexport type SerializedAvailableAssetDataTypes =\r\n  | SerializedSingleAssetDataTypes\r\n  | MultiAssetDataSerialized;\r\n\r\nexport interface MultiAssetDataSerializedRecursivelyDecoded {\r\n  assetProxyId: string;\r\n  amounts: string[];\r\n  nestedAssetData: SerializedSingleAssetDataTypes[];\r\n}\r\n\r\nexport type SerializedAvailableAssetDataTypesDecoded =\r\n  | SerializedSingleAssetDataTypes\r\n  | MultiAssetDataSerializedRecursivelyDecoded;\r\n\r\nexport enum ORDER_BUILDER_ERROR_CODES {\r\n  MISSING_CONTRACT_WRAPPERS_ERROR = 'MISSING_CONTRACT_WRAPPERS_ERROR',\r\n}\r\n\r\nexport enum SupportedTokenTypes {\r\n  ERC20 = 'ERC20',\r\n  ERC721 = 'ERC721',\r\n  ERC1155 = 'ERC1155',\r\n}\r\n\r\nexport type SupportedTokenTypesType =\r\n  | SupportedTokenTypes.ERC20\r\n  | SupportedTokenTypes.ERC721\r\n  | SupportedTokenTypes.ERC1155;\r\n\r\nexport interface TradeableAssetItem<TMetadata = any> {\r\n  amount: string;\r\n  userInputtedAmount?: string;\r\n  assetData: SerializedSingleAssetDataTypes;\r\n  type: SupportedTokenTypesType;\r\n  id: string; // unique id\r\n  metadata?: TMetadata;\r\n}\r\n\r\n// Convenience type wrappers\r\nexport interface Erc20TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC20AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC20;\r\n}\r\n\r\nexport interface Erc721TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC721AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC721;\r\n}\r\n\r\nexport interface Erc1155TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC1155AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC1155;\r\n}\r\n\r\nexport type AvailableTradeableAssets =\r\n  | Erc20TradeableAsset\r\n  | Erc721TradeableAsset\r\n  | Erc1155TradeableAsset;\r\n\r\nexport interface AdditionalOrderConfig {\r\n  makerAddress: string; // only field required\r\n  chainId?: number;\r\n  takerAddress?: string;\r\n  expiration?: Date | number;\r\n  exchangeAddress?: string;\r\n  salt?: string;\r\n  feeRecipientAddress?: string;\r\n  makerFeeAssetData?: string;\r\n  takerFeeAssetData?: string;\r\n  makerFee?: string;\r\n}\r\n\r\nexport interface ZeroExOrder {\r\n  makerAddress: string;\r\n  takerAddress: string;\r\n  feeRecipientAddress: string;\r\n  senderAddress: string;\r\n  makerAssetAmount: string;\r\n  takerAssetAmount: string;\r\n  makerFee: string;\r\n  takerFee: string;\r\n  expirationTimeSeconds: string;\r\n  salt: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerFeeAssetData: string;\r\n  takerFeeAssetData: string;\r\n}\r\n\r\nexport interface ZeroExSignedOrder extends ZeroExOrder {\r\n  signature: string;\r\n}\r\n\r\nexport interface EipDomain {\r\n  name: string;\r\n  version: string;\r\n  chainId: string;\r\n  verifyingContract: string;\r\n}\r\n\r\nexport interface TypedData {\r\n  domain: EipDomain;\r\n  types: {\r\n    Order: {\r\n      name: string;\r\n      type: string;\r\n    }[];\r\n  };\r\n  value: Order;\r\n}\r\n\r\nexport const EIP712_TYPES = {\r\n  Order: [\r\n    { name: 'makerAddress', type: 'address' },\r\n    { name: 'takerAddress', type: 'address' },\r\n    { name: 'feeRecipientAddress', type: 'address' },\r\n    { name: 'senderAddress', type: 'address' },\r\n    { name: 'makerAssetAmount', type: 'uint256' },\r\n    { name: 'takerAssetAmount', type: 'uint256' },\r\n    { name: 'makerFee', type: 'uint256' },\r\n    { name: 'takerFee', type: 'uint256' },\r\n    { name: 'expirationTimeSeconds', type: 'uint256' },\r\n    { name: 'salt', type: 'uint256' },\r\n    { name: 'makerAssetData', type: 'bytes' },\r\n    { name: 'takerAssetData', type: 'bytes' },\r\n    { name: 'makerFeeAssetData', type: 'bytes' },\r\n    { name: 'takerFeeAssetData', type: 'bytes' },\r\n  ],\r\n};\r\n\r\nexport type SwappableAsset =\r\n  | UserFacingERC20AssetDataSerialized\r\n  | UserFacingERC721AssetDataSerialized\r\n  | UserFacingERC1155AssetDataSerializedNormalizedSingle;\r\n\r\nexport enum RevertReason {\r\n  OrderUnfillable = 'ORDER_UNFILLABLE',\r\n  InvalidMaker = 'INVALID_MAKER',\r\n  InvalidTaker = 'INVALID_TAKER',\r\n  InvalidSender = 'INVALID_SENDER',\r\n  InvalidOrderSignature = 'INVALID_ORDER_SIGNATURE',\r\n  InvalidTakerAmount = 'INVALID_TAKER_AMOUNT',\r\n  DivisionByZero = 'DIVISION_BY_ZERO',\r\n  RoundingError = 'ROUNDING_ERROR',\r\n  InvalidSignature = 'INVALID_SIGNATURE',\r\n  SignatureIllegal = 'SIGNATURE_ILLEGAL',\r\n  SignatureInvalid = 'SIGNATURE_INVALID',\r\n  SignatureUnsupported = 'SIGNATURE_UNSUPPORTED',\r\n  TakerOverpay = 'TAKER_OVERPAY',\r\n  OrderOverfill = 'ORDER_OVERFILL',\r\n  InvalidFillPrice = 'INVALID_FILL_PRICE',\r\n  InvalidNewOrderEpoch = 'INVALID_NEW_ORDER_EPOCH',\r\n  CompleteFillFailed = 'COMPLETE_FILL_FAILED',\r\n  NegativeSpreadRequired = 'NEGATIVE_SPREAD_REQUIRED',\r\n  ReentrancyIllegal = 'REENTRANCY_ILLEGAL',\r\n  InvalidTxHash = 'INVALID_TX_HASH',\r\n  InvalidTxSignature = 'INVALID_TX_SIGNATURE',\r\n  FailedExecution = 'FAILED_EXECUTION',\r\n  LengthGreaterThan0Required = 'LENGTH_GREATER_THAN_0_REQUIRED',\r\n  LengthGreaterThan3Required = 'LENGTH_GREATER_THAN_3_REQUIRED',\r\n  LengthGreaterThan131Required = 'LENGTH_GREATER_THAN_131_REQUIRED',\r\n  Length0Required = 'LENGTH_0_REQUIRED',\r\n  Length65Required = 'LENGTH_65_REQUIRED',\r\n  InvalidAmount = 'INVALID_AMOUNT',\r\n  TransferFailed = 'TRANSFER_FAILED',\r\n  SenderNotAuthorized = 'SENDER_NOT_AUTHORIZED',\r\n  TargetNotAuthorized = 'TARGET_NOT_AUTHORIZED',\r\n  TargetAlreadyAuthorized = 'TARGET_ALREADY_AUTHORIZED',\r\n  IndexOutOfBounds = 'INDEX_OUT_OF_BOUNDS',\r\n  AuthorizedAddressMismatch = 'AUTHORIZED_ADDRESS_MISMATCH',\r\n  OnlyContractOwner = 'ONLY_CONTRACT_OWNER',\r\n  MakerNotWhitelisted = 'MAKER_NOT_WHITELISTED',\r\n  TakerNotWhitelisted = 'TAKER_NOT_WHITELISTED',\r\n  AssetProxyDoesNotExist = 'ASSET_PROXY_DOES_NOT_EXIST',\r\n  LengthMismatch = 'LENGTH_MISMATCH',\r\n  LibBytesGreaterThanZeroLengthRequired = 'GREATER_THAN_ZERO_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo4LengthRequired = 'GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo20LengthRequired = 'GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo32LengthRequired = 'GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualToNestedBytesLengthRequired = 'GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualToSourceBytesLengthRequired = 'GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED',\r\n  Erc20InsufficientBalance = 'ERC20_INSUFFICIENT_BALANCE',\r\n  Erc20InsufficientAllowance = 'ERC20_INSUFFICIENT_ALLOWANCE',\r\n  FeePercentageTooLarge = 'FEE_PERCENTAGE_TOO_LARGE',\r\n  ValueGreaterThanZero = 'VALUE_GREATER_THAN_ZERO',\r\n  InvalidMsgValue = 'INVALID_MSG_VALUE',\r\n  InsufficientEthRemaining = 'INSUFFICIENT_ETH_REMAINING',\r\n  Uint256Overflow = 'UINT256_OVERFLOW',\r\n  Erc721ZeroToAddress = 'ERC721_ZERO_TO_ADDRESS',\r\n  Erc721OwnerMismatch = 'ERC721_OWNER_MISMATCH',\r\n  Erc721InvalidSpender = 'ERC721_INVALID_SPENDER',\r\n  Erc721ZeroOwner = 'ERC721_ZERO_OWNER',\r\n  Erc721InvalidSelector = 'ERC721_INVALID_SELECTOR',\r\n  WalletError = 'WALLET_ERROR',\r\n  ValidatorError = 'VALIDATOR_ERROR',\r\n  InvalidFunctionSelector = 'INVALID_FUNCTION_SELECTOR',\r\n  InvalidAssetData = 'INVALID_ASSET_DATA',\r\n  InvalidAssetProxy = 'INVALID_ASSET_PROXY',\r\n  UnregisteredAssetProxy = 'UNREGISTERED_ASSET_PROXY',\r\n  TxFullyConfirmed = 'TX_FULLY_CONFIRMED',\r\n  TxNotFullyConfirmed = 'TX_NOT_FULLY_CONFIRMED',\r\n  TimeLockIncomplete = 'TIME_LOCK_INCOMPLETE',\r\n  InvalidFreeMemoryPtr = 'INVALID_FREE_MEMORY_PTR',\r\n  AuctionInvalidAmount = 'INVALID_AMOUNT',\r\n  AuctionExpired = 'AUCTION_EXPIRED',\r\n  AuctionNotStarted = 'AUCTION_NOT_STARTED',\r\n  AuctionInvalidBeginTime = 'INVALID_BEGIN_TIME',\r\n  InvalidAssetDataEnd = 'INVALID_ASSET_DATA_END',\r\n  InvalidOrBlockedExchangeSelector = 'INVALID_OR_BLOCKED_EXCHANGE_SELECTOR',\r\n  BalanceQueryFailed = 'BALANCE_QUERY_FAILED',\r\n  AtLeastOneAddressDoesNotMeetBalanceThreshold = 'AT_LEAST_ONE_ADDRESS_DOES_NOT_MEET_BALANCE_THRESHOLD',\r\n  FromLessThanToRequired = 'FROM_LESS_THAN_TO_REQUIRED',\r\n  ToLessThanLengthRequired = 'TO_LESS_THAN_LENGTH_REQUIRED',\r\n  InvalidApprovalSignature = 'INVALID_APPROVAL_SIGNATURE',\r\n  ApprovalExpired = 'APPROVAL_EXPIRED',\r\n  InvalidOrigin = 'INVALID_ORIGIN',\r\n  AmountEqualToOneRequired = 'AMOUNT_EQUAL_TO_ONE_REQUIRED',\r\n  BadReceiverReturnValue = 'BAD_RECEIVER_RETURN_VALUE',\r\n  CannotTransferToAddressZero = 'CANNOT_TRANSFER_TO_ADDRESS_ZERO',\r\n  InsufficientAllowance = 'INSUFFICIENT_ALLOWANCE',\r\n  NFTNotOwnedByFromAddress = 'NFT_NOT_OWNED_BY_FROM_ADDRESS',\r\n  OwnersAndIdsMustHaveSameLength = 'OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH',\r\n  TokenAndValuesLengthMismatch = 'TOKEN_AND_VALUES_LENGTH_MISMATCH',\r\n  TransferRejected = 'TRANSFER_REJECTED',\r\n  Uint256Underflow = 'UINT256_UNDERFLOW',\r\n  InvalidIdsOffset = 'INVALID_IDS_OFFSET',\r\n  InvalidValuesOffset = 'INVALID_VALUES_OFFSET',\r\n  InvalidDataOffset = 'INVALID_DATA_OFFSET',\r\n  InvalidAssetDataLength = 'INVALID_ASSET_DATA_LENGTH',\r\n  InvalidStaticCallDataOffset = 'INVALID_STATIC_CALL_DATA_OFFSET',\r\n  TargetNotEven = 'TARGET_NOT_EVEN',\r\n  UnexpectedStaticCallResult = 'UNEXPECTED_STATIC_CALL_RESULT',\r\n  TransfersSuccessful = 'TRANSFERS_SUCCESSFUL',\r\n  InsufficientFunds = 'INSUFFICIENT_FUNDS',\r\n  TxAlreadyExecuted = 'TX_ALREADY_EXECUTED',\r\n  DefaultTimeLockIncomplete = 'DEFAULT_TIME_LOCK_INCOMPLETE',\r\n  CustomTimeLockIncomplete = 'CUSTOM_TIME_LOCK_INCOMPLETE',\r\n  EqualLengthsRequired = 'EQUAL_LENGTHS_REQUIRED',\r\n  OnlyCallableByWallet = 'ONLY_CALLABLE_BY_WALLET',\r\n}\r\n\r\nexport type AvailableSignatureTypesV3 = 'eoa' | 'eip1271';\r\n\r\nexport interface SigningOptionsV3 {\r\n  signatureType: AvailableSignatureTypesV3; // | 'autodetect' ? and remove autodetectSignatureType maybe?\r\n  autodetectSignatureType: boolean;\r\n}\r\n","import getUnixTime from 'date-fns/getUnixTime';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\nimport { NULL_ADDRESS, NULL_BYTES, ZERO_AMOUNT } from '../eth';\r\nimport {\r\n  Order,\r\n  EipDomain,\r\n  EIP712_TYPES,\r\n  ZeroExOrder,\r\n} from '../../sdk/v3/types';\r\n\r\nexport const TRADER_ADDRESS_IDENTIFIER =\r\n  '0xBCC02a155c374263321155555Ccf41070017649e';\r\n\r\nexport const INFINITE_TIMESTAMP_SEC = BigNumber.from(2524604400);\r\n\r\nexport const getEipDomain = (\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): EipDomain => ({\r\n  name: '0x Protocol',\r\n  version: '3.0.0',\r\n  chainId: chainId.toString(10),\r\n  verifyingContract: exchangeContractAddress,\r\n});\r\n\r\nexport const hashOrder = (\r\n  order: Order,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): string =>\r\n  _TypedDataEncoder.hash(\r\n    getEipDomain(chainId, exchangeContractAddress),\r\n    EIP712_TYPES,\r\n    order\r\n  );\r\n\r\nexport const normalizeOrder = (order: Order): Order => {\r\n  return {\r\n    makerAddress: order.makerAddress.toLowerCase(),\r\n    takerAddress: order.takerAddress.toLowerCase(),\r\n    feeRecipientAddress: order.feeRecipientAddress.toLowerCase(),\r\n    senderAddress: order.senderAddress.toLowerCase(),\r\n    makerAssetAmount: order.makerAssetAmount.toString(),\r\n    takerAssetAmount: order.takerAssetAmount.toString(),\r\n    makerFee: order.makerFee.toString(),\r\n    takerFee: order.takerFee.toString(),\r\n    expirationTimeSeconds: order.expirationTimeSeconds.toString(),\r\n    salt: order.salt.toString(),\r\n    makerAssetData: order.makerAssetData.toLowerCase(),\r\n    takerAssetData: order.takerAssetData.toLowerCase(),\r\n    makerFeeAssetData: order.makerFeeAssetData.toLowerCase(),\r\n    takerFeeAssetData: order.takerFeeAssetData.toLowerCase(),\r\n    signature: order.signature?.toLowerCase(),\r\n  };\r\n};\r\n\r\nexport const generateOrderFromAssetDatas = (orderConfig: {\r\n  makerAddress: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerAssetAmount: BigNumber;\r\n  takerAssetAmount: BigNumber;\r\n  exchangeAddress: string;\r\n  // Rest of params optional\r\n  takerAddress?: string;\r\n  expiration?: Date | number;\r\n  salt?: string;\r\n  feeRecipientAddress?: string;\r\n  makerFeeAssetData?: string;\r\n  takerFeeAssetData?: string;\r\n  makerFee?: string;\r\n  takerFee?: string;\r\n}): Order => {\r\n  const {\r\n    makerAssetAmount,\r\n    takerAssetAmount,\r\n    makerAddress,\r\n    makerAssetData,\r\n    takerAssetData,\r\n    takerAddress,\r\n    expiration,\r\n    salt,\r\n    feeRecipientAddress,\r\n    makerFeeAssetData,\r\n    takerFeeAssetData,\r\n    makerFee,\r\n    takerFee,\r\n  } = orderConfig;\r\n\r\n  const expirationTimeSeconds = expiration\r\n    ? BigNumber.from(getUnixTime(expiration))\r\n    : INFINITE_TIMESTAMP_SEC;\r\n\r\n  const order: ZeroExOrder = {\r\n    makerAddress,\r\n    makerAssetAmount: makerAssetAmount.toString(),\r\n    makerAssetData,\r\n    takerAddress: takerAddress || NULL_ADDRESS,\r\n    takerAssetAmount: takerAssetAmount.toString(),\r\n    takerAssetData,\r\n    expirationTimeSeconds: expirationTimeSeconds.toString(),\r\n    // Stuff that doesn't really matter but is required\r\n    senderAddress: NULL_ADDRESS,\r\n    feeRecipientAddress: feeRecipientAddress ?? TRADER_ADDRESS_IDENTIFIER,\r\n    salt: salt ?? generateSaltHash(),\r\n    makerFeeAssetData: makerFeeAssetData ?? NULL_BYTES,\r\n    takerFeeAssetData: takerFeeAssetData ?? NULL_BYTES,\r\n    makerFee: makerFee ?? ZERO_AMOUNT.toString(),\r\n    takerFee: takerFee ?? ZERO_AMOUNT.toString(),\r\n  };\r\n\r\n  return order;\r\n};\r\n\r\nexport const generateTimeBasedSalt = () => {\r\n  const unixTime = getUnixTime(new Date());\r\n  return unixTime.toString(10);\r\n};\r\n\r\nconst generateSaltHash = (manualSaltHashToUse?: string): string => {\r\n  if (manualSaltHashToUse) {\r\n    return manualSaltHashToUse;\r\n  }\r\n  return generateTimeBasedSalt();\r\n};\r\n","// Better error objects with codes\r\n// Sourced from https://github.com/vweevers/module-error\r\n\r\ninterface ErrorOptions {\r\n  code?: string;\r\n  cause?: Error;\r\n  expected?: boolean;\r\n  transient?: boolean;\r\n}\r\n\r\nclass ModuleError extends Error {\r\n  code: string | undefined;\r\n  expected: boolean | undefined;\r\n  transient: boolean | undefined;\r\n  cause: Error | undefined;\r\n  /**\r\n   * @param {string} message Error message\r\n   * @param {{ code?: string, cause?: Error, expected?: boolean, transient?: boolean }} [options]\r\n   */\r\n  constructor(message: string, options: ErrorOptions) {\r\n    super(message || '');\r\n\r\n    if (typeof options === 'object' && options !== null) {\r\n      if (options.code) this.code = String(options.code);\r\n      if (options.expected) this.expected = true;\r\n      if (options.transient) this.transient = true;\r\n      if (options.cause) this.cause = options.cause;\r\n    }\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor);\r\n    }\r\n  }\r\n}\r\n\r\nclass UnexpectedAssetTypeError extends ModuleError {\r\n  constructor(assetType: string) {\r\n    const code = 'UnexpectedAssetTypeError';\r\n    super(`Unexpected asset type ${assetType ?? 'unknown'}`, {\r\n      expected: true,\r\n      code,\r\n    });\r\n    this.name = code;\r\n  }\r\n}\r\n\r\nclass UnsupportedChainId extends ModuleError {\r\n  constructor(chainId: number) {\r\n    const code = 'UnsupportedChainId';\r\n    super(\r\n      `Unexpected chainId ${chainId}. If you want to use that chain, please provide custom zeroex addresses`,\r\n      {\r\n        expected: true,\r\n        code,\r\n      }\r\n    );\r\n    this.name = code;\r\n  }\r\n}\r\n\r\nexport { ModuleError, UnexpectedAssetTypeError, UnsupportedChainId };\r\n","import { BigNumber } from '@ethersproject/bignumber';\r\n\r\nexport const convertStringToBN = (s: string) => {\r\n  return BigNumber.from(s);\r\n};\r\n\r\nexport const convertCollectionToBN = (arr: string[]) => {\r\n  return arr.map(convertStringToBN);\r\n};\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { hexConcat, hexDataLength, hexDataSlice } from '@ethersproject/bytes';\r\nimport { defaultAbiCoder } from '@ethersproject/abi';\r\n\r\nimport {\r\n  AssetProxyId,\r\n  ERC1155AssetDataSerialized,\r\n  ERC20AssetDataSerialized,\r\n  ERC721AssetDataSerialized,\r\n  MultiAssetDataSerializedRecursivelyDecoded,\r\n  SerializedAvailableAssetDataTypes,\r\n  SerializedAvailableAssetDataTypesDecoded,\r\n  SerializedSingleAssetDataTypes,\r\n  SupportedTokenTypes,\r\n  SwappableAsset,\r\n  UserFacingSerializedSingleAssetDataTypes,\r\n} from '../../sdk/v3/types';\r\nimport { InterallySupportedAssetFormat } from '../../sdk/v3/pure';\r\nimport { UnexpectedAssetTypeError } from '../../sdk/error';\r\nimport { convertCollectionToBN } from '../bn/convert';\r\n\r\nexport const encodeErc20AssetData = (tokenAddress: string) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC20,\r\n    defaultAbiCoder.encode(['address'], [tokenAddress]),\r\n  ]);\r\n\r\nexport const decodeErc20AssetData = (\r\n  encodedAssetData: string\r\n): ERC20AssetDataSerialized => {\r\n  const length = hexDataLength(encodedAssetData);\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['address'], rest);\r\n\r\n  const tokenAddress: string = data[0];\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n  };\r\n};\r\n\r\nexport const encodeErc721AssetData = (\r\n  tokenAddress: string,\r\n  tokenId: BigNumberish\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC721,\r\n    defaultAbiCoder.encode(['address', 'uint256'], [tokenAddress, tokenId]),\r\n  ]);\r\n\r\nexport const decodeErc721AssetData = (\r\n  encodedAssetData: string\r\n): ERC721AssetDataSerialized => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['address', 'uint256'], rest);\r\n\r\n  const tokenAddress: string = data[0];\r\n  const tokenId: BigNumber = data[1];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n    tokenId: tokenId.toString(),\r\n  };\r\n};\r\n\r\nexport const encodeErc1155AssetData = (\r\n  tokenAddress: string,\r\n  tokenIds: BigNumberish[],\r\n  values: BigNumberish[],\r\n  callbackData: string\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC1155,\r\n    defaultAbiCoder.encode(\r\n      ['address', 'uint256[]', 'uint256[]', 'bytes'],\r\n      [tokenAddress, tokenIds, values, callbackData]\r\n    ),\r\n  ]);\r\n\r\nexport const decodeErc1155AssetData = (\r\n  encodedAssetData: string\r\n): ERC1155AssetDataSerialized => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(\r\n    ['address', 'uint256[]', 'uint256[]', 'bytes'],\r\n    rest\r\n  );\r\n\r\n  const tokenAddress: string = data[0];\r\n  const tokenIds: BigNumber[] = data[1];\r\n  const values: BigNumber[] = data[2];\r\n  const callbackData: string = data[3];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n    tokenIds: tokenIds.map((id) => id.toString()),\r\n    tokenValues: values.map((val) => val.toString()),\r\n    callbackData,\r\n  };\r\n};\r\n\r\nexport const encodeMultiAssetAssetData = (\r\n  values: BigNumberish[],\r\n  nestedAssetData: string[]\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.MultiAsset,\r\n    defaultAbiCoder.encode(['uint256[]', 'bytes[]'], [values, nestedAssetData]),\r\n  ]);\r\n\r\nexport const decodeMultiAssetData = (encodedAssetData: string) => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['uint256[]', 'bytes[]'], rest);\r\n\r\n  const values: BigNumber[] = data[0];\r\n  const nestedAssetDatas: string[] = data[1];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    amounts: values.map((val) => val.toString()),\r\n    nestedAssetData: nestedAssetDatas.map(\r\n      (nestedAssetData) =>\r\n        decodeAssetData(nestedAssetData) as SerializedSingleAssetDataTypes // Cast b/c multiasset can only happen at depth 0, only singe asset datas can be nested\r\n    ),\r\n  };\r\n};\r\n\r\nexport const encodeAssetData = (\r\n  assetData: UserFacingSerializedSingleAssetDataTypes,\r\n  // To express ERC1155 amounts inside a multiasset order, you cannot encode the amount on the indiviual asset data,\r\n  // It needs to be paired with the [asset, amount] tuple inside the Multiasset order format order array (I know, a bit confusing)\r\n  // But if you're encoding erc1155 asset data within the context of a multi-asset order, this boolean should be true\r\n  erc1155EncodingForMultiAssetOrder: boolean = false\r\n): string => {\r\n  switch (assetData.type) {\r\n    case SupportedTokenTypes.ERC20:\r\n      const erc20AssetData = encodeErc20AssetData(assetData.tokenAddress);\r\n      return erc20AssetData;\r\n    case SupportedTokenTypes.ERC721:\r\n      const erc721AssetData = encodeErc721AssetData(\r\n        assetData.tokenAddress,\r\n        BigNumber.from(assetData.tokenId)\r\n      );\r\n      return erc721AssetData;\r\n    case SupportedTokenTypes.ERC1155:\r\n      const tokenIds = assetData.tokens.map((x) => x.tokenId);\r\n      let tokenValues: string[];\r\n      if (erc1155EncodingForMultiAssetOrder) {\r\n        tokenValues = assetData.tokens.map((_) => '1');\r\n      } else {\r\n        tokenValues = assetData.tokens.map((x) => x.tokenValue);\r\n      }\r\n      const erc1155AssetData = encodeErc1155AssetData(\r\n        assetData.tokenAddress,\r\n        convertCollectionToBN(tokenIds),\r\n        convertCollectionToBN(tokenValues),\r\n        '0x' // Needs to be '0x' (null bytes) (not empty string) or else it won't work lol\r\n      );\r\n      return erc1155AssetData;\r\n    default:\r\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\r\n  }\r\n};\r\n\r\nexport const decodeAssetData = (\r\n  encodedAssetData: string\r\n): SerializedAvailableAssetDataTypesDecoded => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  switch (assetProxyId) {\r\n    case AssetProxyId.ERC20:\r\n      const erc20AssetData = decodeErc20AssetData(encodedAssetData);\r\n      return erc20AssetData;\r\n    case AssetProxyId.ERC721:\r\n      const erc721AssetData = decodeErc721AssetData(encodedAssetData);\r\n      return erc721AssetData;\r\n    case AssetProxyId.ERC1155:\r\n      const erc1155AssetData = decodeErc1155AssetData(encodedAssetData);\r\n      return erc1155AssetData;\r\n    case AssetProxyId.MultiAsset:\r\n      const multiAssetData = decodeMultiAssetData(encodedAssetData);\r\n      return multiAssetData;\r\n    default:\r\n      throw new Error(\r\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\r\n      );\r\n  }\r\n};\r\n\r\nexport const getAmountFromAsset = (\r\n  assetData: UserFacingSerializedSingleAssetDataTypes\r\n): string => {\r\n  switch (assetData.type) {\r\n    case SupportedTokenTypes.ERC20:\r\n      return assetData.amount;\r\n    case SupportedTokenTypes.ERC721:\r\n      return '1';\r\n    case SupportedTokenTypes.ERC1155:\r\n      // Trader.sdk only supports trading 1 ERC1155 per _asset_ at a time,\r\n      // so we can access the 0th index for our token\r\n      // (You can still trade multiple ERC1155s per _order_).\r\n      return assetData.tokens[0]?.tokenValue ?? '1';\r\n    default:\r\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\r\n  }\r\n};\r\n\r\nexport const convertAssetToInternalFormat = (\r\n  swappable: SwappableAsset\r\n): InterallySupportedAssetFormat => {\r\n  switch (swappable.type) {\r\n    // No converting needed\r\n    case 'ERC20':\r\n      return swappable;\r\n    // No converting needed\r\n    case 'ERC721':\r\n      return swappable;\r\n    // Convert normalized public ERC1155 interface to 0x internal asset data format\r\n    // We do this to reduce complexity for end user SDK (and keep api same with erc721)\r\n    case 'ERC1155':\r\n      const zeroExErc1155AssetFormat = {\r\n        tokenAddress: swappable.tokenAddress,\r\n        tokens: [\r\n          {\r\n            tokenId: swappable.tokenId,\r\n            tokenValue: swappable.amount || '1',\r\n          },\r\n        ],\r\n        type: SupportedTokenTypes.ERC1155 as const,\r\n      };\r\n      return zeroExErc1155AssetFormat;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((swappable as any)?.type ?? 'Unknown');\r\n  }\r\n};\r\n\r\nexport const convertAssetsToInternalFormat = (\r\n  assets: Array<SwappableAsset>\r\n): Array<InterallySupportedAssetFormat> => {\r\n  return assets.map(convertAssetToInternalFormat);\r\n};\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type {\r\n  ExchangeContract,\r\n  ExchangeContractInterface,\r\n} from '../../../ZeroEx/v3/ExchangeContract';\r\n\r\nconst _abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'chainId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes4',\r\n        name: 'id',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'assetProxy',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'AssetProxyRegistered',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'feeRecipientAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'senderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'Cancel',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'orderSenderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'orderEpoch',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'CancelUpTo',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'feeRecipientAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerFeeAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerFeeAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'senderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFilledAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFilledAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'makerFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'takerFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'protocolFeePaid',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Fill',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'oldProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'updatedProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ProtocolFeeCollectorAddress',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'oldProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'updatedProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ProtocolFeeMultiplier',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'signerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'validatorAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'isApproved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'SignatureValidatorApproval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'transactionHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'TransactionExecution',\r\n    type: 'event',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EIP1271_MAGIC_VALUE',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EIP712_EXCHANGE_DOMAIN_HASH',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowedValidators',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelOrders',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction[]',\r\n        name: 'transactions',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchExecuteTransactions',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: '',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrKillOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'leftOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'rightOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'leftSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'rightSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'left',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'right',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\r\n        name: 'batchMatchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'leftOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'rightOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'leftSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'rightSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchOrdersWithMaximalFill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'left',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'right',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\r\n        name: 'batchMatchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelOrder',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'targetOrderEpoch',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelOrdersUpTo',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'cancelled',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'currentContextAddress',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: 'detachProtocolFeeCollector',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\r\n        name: 'transaction',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'executeTransaction',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: '',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'fillOrKillOrder',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'fillOrder',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'filled',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'assetProxyId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'getAssetProxy',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'orderStatus',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'orderTakerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'signerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidHashSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidOrderSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\r\n        name: 'transaction',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidTransactionSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersFillOrKill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersFillOrKill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'leftOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'rightOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'leftSignature',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'rightSignature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'matchOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'left',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'right',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.MatchedFillResults',\r\n        name: 'matchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'leftOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'rightOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'leftSignature',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'rightSignature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'matchOrdersWithMaximalFill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'left',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'right',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.MatchedFillResults',\r\n        name: 'matchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'orderEpoch',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'preSign',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'preSigned',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'protocolFeeCollector',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'protocolFeeMultiplier',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'assetProxy',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'registerAssetProxy',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'updatedProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setProtocolFeeCollectorAddress',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'updatedProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'setProtocolFeeMultiplier',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'validatorAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approval',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setSignatureValidatorApproval',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'assetData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'fromAddresses',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'toAddresses',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'amounts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'simulateDispatchTransferFromCalls',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'transactionsExecuted',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ExchangeContract__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ExchangeContractInterface {\r\n    return new utils.Interface(_abi) as ExchangeContractInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): ExchangeContract {\r\n    return new Contract(address, _abi, signerOrProvider) as ExchangeContract;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type {\r\n  Forwarder,\r\n  ForwarderInterface,\r\n} from '../../../ZeroEx/v3/Forwarder';\r\n\r\nconst _abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_exchange',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_exchangeV2',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_weth',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'fallback',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'ERC1155_BATCH_RECEIVED',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'ERC1155_RECEIVED',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EXCHANGE_V2_ORDER_ID',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'assetData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'approveMakerAssetProxy',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'ethSellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketSellAmountWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'values',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155BatchReceived',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'assetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'withdrawAsset',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class Forwarder__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ForwarderInterface {\r\n    return new utils.Interface(_abi) as ForwarderInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): Forwarder {\r\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { IZeroEx, IZeroExInterface } from '../../../ZeroEx/v4/IZeroEx';\r\n\r\nconst _abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20FillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC1155Token',\r\n        name: 'erc1155Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'erc1155FillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'matcher',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'feeData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Fee[]',\r\n        name: 'fees',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC1155Token',\r\n        name: 'erc1155Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IPropertyValidator',\r\n            name: 'propertyValidator',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'propertyData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Property[]',\r\n        name: 'erc1155TokenProperties',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'erc1155TokenAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderPreSigned',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC721Token',\r\n        name: 'erc721Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'matcher',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'feeData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Fee[]',\r\n        name: 'fees',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC721Token',\r\n        name: 'erc721Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IPropertyValidator',\r\n            name: 'propertyValidator',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'propertyData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Property[]',\r\n        name: 'erc721TokenProperties',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderPreSigned',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'feeRecipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFeeFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'protocolFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'pool',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'LimitOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract ILiquidityProvider',\r\n        name: 'provider',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'LiquidityProviderSwap',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'MetaTransactionExecuted',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'migrator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'Migrated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'OrderSignerRegistered',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'OtcOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'PairCancelledLimitOrders',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'PairCancelledRfqOrders',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'oldImpl',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'newImpl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ProxyFunctionUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'quoteSigner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'QuoteSignerUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'pool',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'RfqOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'origin',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address[]',\r\n        name: 'addrs',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'RfqOrderOriginsAllowed',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'TransformedERC20',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'transformerDeployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'TransformerDeployerUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'useSelfBalance',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillOtcOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'useSelfBalance',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_sellHeldTokenForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'inputToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'outputToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'inputTokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minOutputTokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint32',\r\n                name: 'deploymentNonce',\r\n                type: 'uint32',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'data',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct ITransformERC20Feature.Transformation[]',\r\n            name: 'transformations',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'bool',\r\n            name: 'useSelfBalance',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n        ],\r\n        internalType: 'struct ITransformERC20Feature.TransformERC20Args',\r\n        name: 'args',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: '_transformERC20',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'erc1155TokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'callbackData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchBuyERC1155s',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'callbackData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchBuyERC721s',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'orderNonces',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelERC1155Orders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'orderNonces',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelERC721Orders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairLimitOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairRfqOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData[]',\r\n        name: 'mtxs',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchExecuteMetaTransactions',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'returnResults',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFillAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchFillLimitOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'makerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFillAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchFillRfqOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'makerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'makerSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'takerSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'unwrapWeth',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    name: 'batchFillTakerSignedOtcOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchGetLimitOrderRelevantStates',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\r\n        name: 'orderInfos',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'actualFillableTakerTokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'isSignatureValids',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchGetRfqOrderRelevantStates',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\r\n        name: 'orderInfos',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'actualFillableTakerTokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'isSignatureValids',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'buyOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'sellOrderSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'buyOrderSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchERC721Orders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'profits',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'erc1155BuyAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'buyERC1155',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'buyERC721',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'orderNonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelERC1155Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'orderNonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelERC721Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelLimitOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairLimitOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairRfqOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelRfqOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'createTransformWallet',\r\n    outputs: [\r\n      {\r\n        internalType: 'contract IFlashWallet',\r\n        name: 'wallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'executeMetaTransaction',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'returnResult',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'impl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'extend',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOrKillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOrKillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrderForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrderWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'takerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillTakerSignedOtcOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'takerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillTakerSignedOtcOrderForEth',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC1155OrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC1155OrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNFTOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'orderAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'remainingAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderStatus',\r\n    outputs: [\r\n      {\r\n        internalType: 'enum LibNFTOrder.OrderStatus',\r\n        name: 'status',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint248',\r\n        name: 'nonceRange',\r\n        type: 'uint248',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderStatusBitVector',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'bitVector',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderRelevantState',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'actualFillableTakerTokenAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSignatureValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionExecutedBlock',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'blockNumber',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'mtxHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'mtxHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionHashExecutedBlock',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'blockNumber',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOtcOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOtcOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getProtocolFeeMultiplier',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint32',\r\n        name: 'multiplier',\r\n        type: 'uint32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getQuoteSigner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderRelevantState',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'actualFillableTakerTokenAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSignatureValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'idx',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'getRollbackEntryAtIndex',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'impl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'getRollbackLength',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'rollbackLength',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getTransformWallet',\r\n    outputs: [\r\n      {\r\n        internalType: 'contract IFlashWallet',\r\n        name: 'wallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getTransformerDeployer',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'deployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isValidOrderSigner',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isAllowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'txOrigin',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint64',\r\n        name: 'nonceBucket',\r\n        type: 'uint64',\r\n      },\r\n    ],\r\n    name: 'lastOtcTxOriginNonce',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'lastNonce',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'sellOrderSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'buyOrderSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'matchERC721Orders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'profit',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'target',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'migrate',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellEthForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellTokenForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellTokenForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellEthForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellTokenForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellTokenForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'success',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC721Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'success',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'ownerAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'preSignERC1155Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'preSignERC721Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'registerAllowedOrderSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'origins',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'registerAllowedRfqOrigins',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'targetImpl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'rollback',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'erc1155SellAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellERC1155',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellERC721',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellEthForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract ILiquidityProvider',\r\n        name: 'provider',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'auxiliaryData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellToLiquidityProvider',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'enum IPancakeSwapFeature.ProtocolFork',\r\n        name: 'fork',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    name: 'sellToPancakeSwap',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSushi',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'sellToUniswap',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellTokenForEthToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellTokenForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'quoteSigner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setQuoteSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'transformerDeployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setTransformerDeployer',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSupported',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32[]',\r\n        name: 'poolIds',\r\n        type: 'bytes32[]',\r\n      },\r\n    ],\r\n    name: 'transferProtocolFeesForPools',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amountOut',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'recipientWallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferTrappedTokensTo',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minOutputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint32',\r\n            name: 'deploymentNonce',\r\n            type: 'uint32',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct ITransformERC20Feature.Transformation[]',\r\n        name: 'transformations',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'transformERC20',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'int256',\r\n        name: 'amount0Delta',\r\n        type: 'int256',\r\n      },\r\n      {\r\n        internalType: 'int256',\r\n        name: 'amount1Delta',\r\n        type: 'int256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'uniswapV3SwapCallback',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'validateERC1155OrderProperties',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'validateERC1155OrderSignature',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'validateERC721OrderProperties',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'validateERC721OrderSignature',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class IZeroEx__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): IZeroExInterface {\r\n    return new utils.Interface(_abi) as IZeroExInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): IZeroEx {\r\n    return new Contract(address, _abi, signerOrProvider) as IZeroEx;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC1155, ERC1155Interface } from '../ERC1155';\r\n\r\nconst _abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: '_approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: '_amounts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'TransferBatch',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: '_amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'TransferSingle',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: '_owners',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'balanceOfBatch',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isOperator',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_amounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeBatchTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_amount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: '_approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '_interfaceID',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ERC1155__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC1155Interface {\r\n    return new utils.Interface(_abi) as ERC1155Interface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): ERC1155 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC1155;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC20, ERC20Interface } from '../ERC20';\r\n\r\nconst _abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        name: 'balance',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'fallback',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n];\r\n\r\nexport class ERC20__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC20Interface {\r\n    return new utils.Interface(_abi) as ERC20Interface;\r\n  }\r\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC721, ERC721Interface } from '../ERC721';\r\n\r\nconst _abi = [\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'approved',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'getApproved',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ownerOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ERC721__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC721Interface {\r\n    return new utils.Interface(_abi) as ERC721Interface;\r\n  }\r\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC721;\r\n  }\r\n}\r\n","import {\r\n  TypedDataDomain,\r\n  TypedDataField,\r\n} from '@ethersproject/abstract-signer';\r\nimport { arrayify } from '@ethersproject/bytes';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\n\r\nexport interface TypedData {\r\n  domain: TypedDataDomain;\r\n  types: Record<string, Array<TypedDataField>>;\r\n  message: Record<string, any>;\r\n  primaryType?: string;\r\n}\r\n\r\nexport type { TypedDataDomain, TypedDataField };\r\n\r\nexport const encodeTypedDataHash = (typedData: TypedData): string => {\r\n  const types = { ...typedData.types };\r\n\r\n  // remove EIP712Domain key from types as ethers will auto-gen it in\r\n  // the hash encoder below\r\n  delete types['EIP712Domain'];\r\n\r\n  return _TypedDataEncoder.hash(typedData.domain, types, typedData.message);\r\n};\r\n\r\nexport const encodeTypedDataDigest = (typedData: TypedData): Uint8Array => {\r\n  return arrayify(encodeTypedDataHash(typedData));\r\n};\r\n","export const EIP1271ZeroExDataAbi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IEIP1271Data.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'OrderWithHash',\r\n    outputs: [],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n];\r\n","import flatten from 'lodash/flatten';\r\nimport type { ContractTransaction } from '@ethersproject/contracts';\r\nimport { BaseProvider, Provider } from '@ethersproject/providers';\r\nimport {\r\n  arrayify,\r\n  hexConcat,\r\n  hexDataLength,\r\n  hexDataSlice,\r\n  hexlify,\r\n  joinSignature,\r\n  splitSignature,\r\n} from '@ethersproject/bytes';\r\nimport { verifyTypedData } from '@ethersproject/wallet';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport {\r\n  generateOrderFromAssetDatas,\r\n  generateTimeBasedSalt,\r\n  getEipDomain,\r\n  normalizeOrder,\r\n} from '../../utils/v3/order';\r\nimport { NULL_ADDRESS } from '../../utils/eth';\r\nimport {\r\n  decodeAssetData,\r\n  encodeAssetData,\r\n  encodeMultiAssetAssetData,\r\n  getAmountFromAsset,\r\n} from '../../utils/v3/asset-data';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC20__factory,\r\n  ERC721__factory,\r\n  ExchangeContract,\r\n} from '../../contracts';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport {\r\n  AdditionalOrderConfig,\r\n  AssetProxyId,\r\n  AvailableSignatureTypesV3,\r\n  EIP712_TYPES,\r\n  ERC1155AssetDataSerialized,\r\n  ERC20AssetDataSerialized,\r\n  ERC721AssetDataSerialized,\r\n  MultiAssetDataSerializedRecursivelyDecoded,\r\n  Order,\r\n  OrderInfoV3,\r\n  OrderStatusV3,\r\n  SerializedAvailableAssetDataTypesDecoded,\r\n  SignedOrder,\r\n  SigningOptionsV3,\r\n  SwappableAsset,\r\n  UserFacingERC1155AssetDataSerializedNormalizedSingle,\r\n  UserFacingERC20AssetDataSerialized,\r\n  UserFacingERC721AssetDataSerialized,\r\n  UserFacingSerializedSingleAssetDataTypes,\r\n} from './types';\r\nimport { encodeTypedDataHash, TypedData } from '../../utils/typed-data';\r\nimport { EIP1271ZeroExDataAbi } from '../../utils/v3/eip1271';\r\nimport { convertCollectionToBN } from '../../utils/bn/convert';\r\nimport type {\r\n  ApprovalStatus,\r\n  PayableOverrides,\r\n  TransactionOverrides,\r\n} from '../common/types';\r\n\r\nexport const cancelOrder = (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n) => {\r\n  return exchangeContract.cancelOrder(order);\r\n};\r\n\r\nexport const getOrderInfo = async (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n): Promise<OrderInfoV3> => {\r\n  const orderInfo = await exchangeContract.getOrderInfo(order);\r\n  return orderInfo as OrderInfoV3;\r\n};\r\n\r\nexport const getOrderStatus = async (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n): Promise<OrderStatusV3> => {\r\n  const orderInfo = await exchangeContract.getOrderInfo(order);\r\n  return orderInfo.orderStatus as OrderStatusV3;\r\n};\r\n\r\nexport const cancelOrders = (\r\n  exchangeContract: ExchangeContract,\r\n  orders: Array<Order>,\r\n  overrides?: PayableOverrides\r\n) => {\r\n  return exchangeContract.batchCancelOrders(orders, overrides);\r\n};\r\n\r\nexport const cancelOrdersUpToNow = (\r\n  exchangeContract: ExchangeContract,\r\n  unixTimestampAsSalt: string = generateTimeBasedSalt()\r\n) => {\r\n  exchangeContract.cancelOrdersUpTo(unixTimestampAsSalt);\r\n};\r\n\r\nexport const hashOrder = (\r\n  order: Order,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): string => {\r\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\r\n  return _TypedDataEncoder.hash(EIP712_DOMAIN, EIP712_TYPES, order);\r\n};\r\n\r\nexport type InterallySupportedAssetFormat =\r\n  UserFacingSerializedSingleAssetDataTypes;\r\n\r\nexport const signOrderWithEip1271 = async (\r\n  order: Order,\r\n  signer: Signer,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const domain = getEipDomain(chainId, exchangeContractAddress);\r\n  const types = EIP712_TYPES;\r\n  const value = order;\r\n\r\n  const typedData: TypedData = {\r\n    domain,\r\n    types,\r\n    message: value,\r\n  };\r\n\r\n  const orderHash = encodeTypedDataHash(typedData);\r\n\r\n  const msg = new Interface(EIP1271ZeroExDataAbi).encodeFunctionData(\r\n    'OrderWithHash',\r\n    [order, orderHash]\r\n  );\r\n\r\n  const rawSignatureFromContractWallet = await signer.signMessage(\r\n    arrayify(msg)\r\n  );\r\n\r\n  return rawSignatureFromContractWallet;\r\n};\r\n\r\nexport const signOrderWithEoaWallet = async (\r\n  order: Order,\r\n  signer: TypedDataSigner,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const domain = getEipDomain(chainId, exchangeContractAddress);\r\n  const types = EIP712_TYPES;\r\n  const value = order;\r\n\r\n  const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n    domain,\r\n    types,\r\n    value\r\n  );\r\n\r\n  return rawSignatureFromEoaWallet;\r\n};\r\n\r\nexport const checkIfContractWallet = async (\r\n  provider: Provider,\r\n  walletAddress: string\r\n): Promise<boolean> => {\r\n  let isContractWallet: boolean = false;\r\n  if (provider.getCode) {\r\n    let walletCode = await provider.getCode(walletAddress);\r\n    // Wallet Code returns '0x' if no contract address is associated with\r\n    // Note: Lazy loaded contract wallets will show 0x initially, so we fall back to feature detection\r\n    if (walletCode && walletCode != '0x') {\r\n      isContractWallet = true;\r\n    }\r\n  }\r\n  let isSequence = !!(provider as any)._isSequenceProvider;\r\n  if (isSequence) {\r\n    isContractWallet = true;\r\n  }\r\n  // Walletconnect hides the real provider in the provider (yo dawg)\r\n  let providerToUse = (provider as any).provider;\r\n  if (providerToUse?.isWalletConnect) {\r\n    const isSequenceViaWalletConnect = !!(\r\n      (providerToUse as any).connector?._peerMeta?.description === 'Sequence'\r\n    );\r\n    if (isSequenceViaWalletConnect) {\r\n      isContractWallet = true;\r\n    }\r\n  }\r\n\r\n  return isContractWallet;\r\n};\r\n\r\nexport const signOrder = async (\r\n  order: Order,\r\n  signerAddress: string,\r\n  signer: Signer,\r\n  provider: Provider,\r\n  chainId: number,\r\n  exchangeContractAddress: string,\r\n  signingOptions?: Partial<SigningOptionsV3>\r\n): Promise<SignedOrder> => {\r\n  try {\r\n    let method: AvailableSignatureTypesV3 = 'eoa';\r\n    // If we have any specific signature type overrides, prefer those\r\n    if (signingOptions?.signatureType === 'eip1271') {\r\n      method = 'eip1271';\r\n    } else if (signingOptions?.signatureType === 'eoa') {\r\n      method = 'eoa';\r\n    } else {\r\n      // Try to detect...\r\n      if (signingOptions?.autodetectSignatureType === false) {\r\n        method = 'eoa';\r\n      } else {\r\n        // If we made it here, consumer has no preferred signing method,\r\n        // let's try feature detection to automagically pick a signature type\r\n        // By default we fallback to EOA signing if we can't figure it out.\r\n\r\n        // Let's try to determine if the signer is a contract wallet or not.\r\n        // If it is, we'll try EIP-1271, otherwise we'll do a normal sign\r\n        const isContractWallet = await checkIfContractWallet(\r\n          provider,\r\n          signerAddress\r\n        );\r\n        if (isContractWallet) {\r\n          method = 'eip1271';\r\n        } else {\r\n          method = 'eoa';\r\n        }\r\n      }\r\n    }\r\n    let signature: string;\r\n    switch (method) {\r\n      case 'eoa':\r\n        const rawEip712Signature = await signOrderWithEoaWallet(\r\n          order,\r\n          signer as unknown as TypedDataSigner,\r\n          chainId,\r\n          exchangeContractAddress\r\n        );\r\n        signature = prepareOrderSignatureFromEoaWallet(rawEip712Signature);\r\n        break;\r\n      case 'eip1271':\r\n        const rawEip1271Signature = (signature = await signOrderWithEip1271(\r\n          order,\r\n          signer,\r\n          chainId,\r\n          exchangeContractAddress\r\n        ));\r\n        signature =\r\n          prepareOrderSignatureFromContractWallet(rawEip1271Signature);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown signature method chosen: ${method}`);\r\n    }\r\n\r\n    const signedOrder: SignedOrder = {\r\n      ...order,\r\n      signature,\r\n    };\r\n\r\n    return signedOrder;\r\n  } catch (e) {\r\n    console.log('error signing order', e);\r\n    throw e;\r\n  }\r\n};\r\n\r\n// export const prepareOrderSignature = (\r\n//   rawSignature: string,\r\n//   method?: AvailableSignatureTypes\r\n// ) => {\r\n//   let preferredMethod = method ?? 'eoa';\r\n//   try {\r\n//     return prepareOrderSignatureFromEoaWallet(rawSignature);\r\n//   } catch (e) {\r\n//     console.log('prepareOrderSignature:Errror preparing order signature', e);\r\n//     console.log('Attempting to decode contract wallet signature');\r\n//     try {\r\n//       return prepareOrderSignatureFromContractWallet(rawSignature);\r\n//     } catch (e) {\r\n//       throw e;\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const prepareOrderSignatureFromEoaWallet = (rawSignature: string) => {\r\n  // Append the signature type (eg. \"0x02\" for EIP712 signatures)\r\n  // at the end of the signature since this is what 0x expects\r\n  const signature = splitSignature(rawSignature);\r\n  return hexConcat([hexlify(signature.v), signature.r, signature.s, '0x02']);\r\n};\r\n\r\nexport const prepareOrderSignatureFromContractWallet = (\r\n  rawSignature: string\r\n) => {\r\n  // Append the signature type (eg. \"0x07\" for EIP1271 signatures)\r\n  // at the end of the signature since this is what 0x expects\r\n  // See: https://github.com/0xProject/ZEIPs/issues/33\r\n  return hexConcat([rawSignature, '0x07']);\r\n};\r\n\r\nexport const verifyOrderSignature = (\r\n  order: Order,\r\n  signature: string,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\r\n  try {\r\n    const maker = order.makerAddress.toLowerCase();\r\n    const length = hexDataLength(signature);\r\n    // Grab the V (exists at index 0 for 0x orders)\r\n    const slicedSigV = hexDataSlice(signature, 0, 1);\r\n    // Grab the R and S (index 1 through length - 1 b/c the end hex is the signature type so we strip that too)\r\n    const slicedSig = hexDataSlice(signature, 1, length - 1);\r\n\r\n    const derivedSignatureHex = hexConcat([slicedSig, slicedSigV]);\r\n    const derivedSignature = joinSignature(derivedSignatureHex);\r\n\r\n    const signer = verifyTypedData(\r\n      EIP712_DOMAIN,\r\n      EIP712_TYPES,\r\n      order,\r\n      derivedSignature\r\n    );\r\n\r\n    return maker.toLowerCase() === signer.toLowerCase();\r\n  } catch (e) {\r\n    console.log(e);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const buildOrder = (\r\n  makerAssets: Array<InterallySupportedAssetFormat>,\r\n  takerAssets: Array<InterallySupportedAssetFormat>,\r\n  orderConfig: AdditionalOrderConfig\r\n): Order => {\r\n  // Encode maker assets\r\n  let makerAssetAmount: BigNumber;\r\n  let makerAssetData: string;\r\n\r\n  const makerAssetEligibleForSingleAsset = makerAssets.length === 1;\r\n  if (makerAssetEligibleForSingleAsset) {\r\n    const makerAsset = makerAssets[0];\r\n    makerAssetAmount = BigNumber.from(getAmountFromAsset(makerAsset));\r\n    makerAssetData = encodeAssetData(makerAsset, false);\r\n  } else {\r\n    const makerAssetAmounts = makerAssets.map((ma) => getAmountFromAsset(ma));\r\n    const makerAssetDatas = makerAssets.map((ma) => encodeAssetData(ma, true));\r\n    const makerMultiAsset = encodeMultiAssetAssetData(\r\n      makerAssetAmounts,\r\n      makerAssetDatas\r\n    );\r\n    makerAssetData = makerMultiAsset;\r\n    makerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\r\n  }\r\n\r\n  // Encode taker assets\r\n  let takerAssetAmount: BigNumber;\r\n  let takerAssetData: string;\r\n\r\n  const takerAssetEligibleForSingleAsset = takerAssets.length === 1;\r\n  // If we only have one asset to swap\r\n  if (takerAssetEligibleForSingleAsset) {\r\n    const takerAsset = takerAssets[0];\r\n    takerAssetAmount = BigNumber.from(getAmountFromAsset(takerAsset));\r\n    takerAssetData = encodeAssetData(takerAsset, false);\r\n  } else {\r\n    const takerAssetAmounts = takerAssets.map((ta) => getAmountFromAsset(ta));\r\n    const takerAssetDatas = takerAssets.map((ta) => encodeAssetData(ta, true));\r\n    const takerMultiAsset = encodeMultiAssetAssetData(\r\n      convertCollectionToBN(takerAssetAmounts),\r\n      takerAssetDatas\r\n    );\r\n    takerAssetData = takerMultiAsset;\r\n    takerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\r\n  }\r\n\r\n  const order = generateOrderFromAssetDatas({\r\n    makerAssetAmount: makerAssetAmount,\r\n    makerAssetData: makerAssetData,\r\n    takerAddress: orderConfig.takerAddress ?? NULL_ADDRESS,\r\n    takerAssetAmount: takerAssetAmount,\r\n    takerAssetData: takerAssetData,\r\n    exchangeAddress: orderConfig.exchangeAddress ?? '',\r\n    ...orderConfig,\r\n  });\r\n\r\n  return order;\r\n};\r\n\r\nexport const fillSignedOrder = async (\r\n  signedOrder: SignedOrder,\r\n  exchangeContract: ExchangeContract,\r\n  overrides?: PayableOverrides\r\n): Promise<ContractTransaction> => {\r\n  return exchangeContract.fillOrKillOrder(\r\n    normalizeOrder(signedOrder),\r\n    signedOrder.takerAssetAmount,\r\n    signedOrder.signature,\r\n    overrides\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * @param walletAddress Owner of the asset\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param provider\r\n * @returns\r\n */\r\nexport const getApprovalStatus = async (\r\n  walletAddress: string,\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  provider: BaseProvider\r\n): Promise<ApprovalStatus> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\r\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\r\n        MAX_APPROVAL.toString()\r\n      ).sub('100000000000000000');\r\n      const approvedForMax = erc20AllowanceBigNumber.gte(\r\n        MAX_APPROVAL_WITH_BUFFER\r\n      );\r\n      return {\r\n        contractApproved: approvedForMax,\r\n      };\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\r\n        asset.tokenId\r\n      );\r\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\r\n        await Promise.all([\r\n          erc721ApprovalForAllPromise,\r\n          erc721ApprovedAddressForIdPromise,\r\n        ]);\r\n      const tokenIdApproved =\r\n        erc721ApprovedAddressForId.toLowerCase() ===\r\n        exchangeProxyAddressForAsset.toLowerCase();\r\n      return {\r\n        contractApproved: erc721ApprovalForAll ?? false,\r\n        tokenIdApproved: tokenIdApproved,\r\n      };\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      return {\r\n        contractApproved: erc1155ApprovalForAll ?? false,\r\n      };\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Some arbitrarily high number.\r\n// TODO(johnrjj) - Support custom ERC20 approval amounts\r\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const approveAsset = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  signer: Signer,\r\n  overrides: TransactionOverrides = {},\r\n  approve: boolean = true\r\n): Promise<ContractTransaction> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL.toString() : 0,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const estimateGasForApproval = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  signer: Signer,\r\n  overrides: TransactionOverrides = {},\r\n  approve: boolean = true\r\n): Promise<BigNumber> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.estimateGas.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL : 0\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      const erc721ApprovalForAllPromise = erc721.estimateGas.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      const erc1155ApprovalForAll = await erc1155.estimateGas.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\nexport const getSignatureTypeFromSignature = (signature: string): string => {\r\n  const length = hexDataLength(signature);\r\n  const signatureType = hexDataSlice(signature, length - 1);\r\n  return signatureType;\r\n};\r\n\r\nexport const estimateGasForFillOrder = async (\r\n  signedOrder: SignedOrder,\r\n  exchangeContract: ExchangeContract,\r\n  _overrides?: PayableOverrides | undefined\r\n) => {\r\n  const estimatedGasRequiredForFill =\r\n    await exchangeContract.estimateGas.fillOrder(\r\n      normalizeOrder(signedOrder),\r\n      signedOrder.takerAssetAmount,\r\n      signedOrder.signature\r\n    );\r\n  return estimatedGasRequiredForFill;\r\n};\r\n\r\nexport const convertDecodedAssetDataToUserFacingAssets = (\r\n  decodedAssetData: SerializedAvailableAssetDataTypesDecoded,\r\n  assetAmount: string\r\n): Array<SwappableAsset> => {\r\n  const assetProxyId = decodedAssetData.assetProxyId;\r\n\r\n  switch (assetProxyId) {\r\n    case AssetProxyId.ERC20:\r\n      const decodedErc20 = decodedAssetData as ERC20AssetDataSerialized;\r\n      const swappableErc20: UserFacingERC20AssetDataSerialized = {\r\n        type: 'ERC20',\r\n        amount: assetAmount,\r\n        tokenAddress: decodedErc20.tokenAddress,\r\n      };\r\n      return [swappableErc20];\r\n    case AssetProxyId.ERC721:\r\n      const decodedErc721 = decodedAssetData as ERC721AssetDataSerialized;\r\n      const swappableErc721: UserFacingERC721AssetDataSerialized = {\r\n        type: 'ERC721',\r\n        tokenAddress: decodedErc721.tokenAddress,\r\n        tokenId: decodedErc721.tokenId,\r\n      };\r\n      return [swappableErc721];\r\n    case AssetProxyId.ERC1155:\r\n      const decodedErc1155 = decodedAssetData as ERC1155AssetDataSerialized;\r\n      const swappableErc1155: UserFacingERC1155AssetDataSerializedNormalizedSingle =\r\n        {\r\n          type: 'ERC1155',\r\n          tokenAddress: decodedErc1155.tokenAddress,\r\n          tokenId: decodedErc1155.tokenIds[0],\r\n          amount: decodedErc1155.tokenValues[0] ?? '1',\r\n        };\r\n      return [swappableErc1155];\r\n    case AssetProxyId.MultiAsset:\r\n      const multiAssetDecodedData =\r\n        decodedAssetData as MultiAssetDataSerializedRecursivelyDecoded;\r\n      const nestedAssets = flatten(\r\n        multiAssetDecodedData.nestedAssetData.map((asset, idx) =>\r\n          convertDecodedAssetDataToUserFacingAssets(\r\n            asset,\r\n            multiAssetDecodedData.amounts[idx]\r\n          )\r\n        )\r\n      );\r\n      const nestedAssetsWithCorrectAmounts: Array<SwappableAsset> =\r\n        nestedAssets.map((nestedAsset, idx) => {\r\n          const nestedAssetValueFromMultiAsset =\r\n            multiAssetDecodedData.amounts[idx];\r\n          // Overwrite original nested asset amount, b/c when its nested inside a multiasset encoding, the multiasset top level values take over.\r\n          return {\r\n            ...nestedAsset,\r\n            amount: nestedAssetValueFromMultiAsset,\r\n          };\r\n        });\r\n      return nestedAssetsWithCorrectAmounts;\r\n    default:\r\n      throw new Error(\r\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\r\n      );\r\n  }\r\n};\r\n\r\nexport const getAssetsFromOrder = (\r\n  order: Order\r\n): { makerAssets: SwappableAsset[]; takerAssets: SwappableAsset[] } => {\r\n  const decodedMakerAssetData = decodeAssetData(order.makerAssetData);\r\n  const decodedTakerAssetData = decodeAssetData(order.takerAssetData);\r\n\r\n  const makerAssets = convertDecodedAssetDataToUserFacingAssets(\r\n    decodedMakerAssetData,\r\n    order.makerAssetAmount\r\n  );\r\n  const takerAssets = convertDecodedAssetDataToUserFacingAssets(\r\n    decodedTakerAssetData,\r\n    order.takerAssetAmount\r\n  );\r\n\r\n  return {\r\n    makerAssets,\r\n    takerAssets,\r\n  };\r\n};\r\n\r\n// export const loadApprovalStatusAll = async (assets: Array<InterallySupportedAsset>) => {\r\n//   const assetsGroupedByContractAddress = groupBy(assets, (asset) => asset.tokenAddress)\r\n//   const todoPromises = Object.entries(assetsGroupedByContractAddress).map(\r\n//     ([contractAddress, assetsWithSameTakerAddress]) => {\r\n//       const type = assetsWithSameTakerAddress[0]?.type\r\n//       switch (type) {\r\n//         case SupportedTokenTypes.ERC20:\r\n//           break\r\n//         case SupportedTokenTypes.ERC721:\r\n//           break\r\n//         case SupportedTokenTypes.ERC1155:\r\n//           break\r\n//         default:\r\n//           break\r\n//       }\r\n//     },\r\n//   )\r\n// }\r\n","import { UnsupportedChainId, UnexpectedAssetTypeError } from '../../sdk/error';\r\nimport type {\r\n  AddressesForChainV3,\r\n  ContractAddresses,\r\n  SupportedTokenTypes,\r\n} from '../../sdk/v3/types';\r\nimport defaultAddresses from '../../sdk/v3/addresses.json';\r\n\r\nconst getZeroExAddressesForChain = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n): AddressesForChainV3 | undefined => {\r\n  const chainIdString = chainId.toString(10);\r\n  const maybeAddressesForChain: AddressesForChainV3 | undefined = (\r\n    addresses as { [key: string]: AddressesForChainV3 }\r\n  )[chainIdString];\r\n  return maybeAddressesForChain;\r\n};\r\n\r\nexport const getProxyAddressForErcType = (\r\n  assetType: SupportedTokenTypes,\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n) => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  if (!zeroExAddresses) {\r\n    throw new UnsupportedChainId(chainId);\r\n  }\r\n  switch (assetType) {\r\n    case 'ERC20':\r\n      return zeroExAddresses.erc20Proxy;\r\n    case 'ERC721':\r\n      return zeroExAddresses.erc721Proxy;\r\n    case 'ERC1155':\r\n      return zeroExAddresses.erc1155Proxy;\r\n    default:\r\n      throw new UnexpectedAssetTypeError(assetType);\r\n  }\r\n};\r\n\r\nexport const getForwarderAddress = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n) => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  if (!zeroExAddresses) {\r\n    throw new UnsupportedChainId(chainId);\r\n  }\r\n  return zeroExAddresses.forwarder;\r\n};\r\n\r\nexport const getWrappedNativeToken = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n): string | null => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  return zeroExAddresses?.wrappedNativeToken ?? null;\r\n};\r\n","import { SupportedChainIdsV3 } from '../../sdk/v3/types';\r\n\r\nconst DEFAUTLT_GAS_BUFFER_MULTIPLES: { [chainId: number]: number } = {\r\n  [SupportedChainIdsV3.Polygon]: 1.5,\r\n  [SupportedChainIdsV3.PolygonMumbai]: 1.5,\r\n  [SupportedChainIdsV3.Kovan]: 1.5,\r\n};\r\n\r\nexport { DEFAUTLT_GAS_BUFFER_MULTIPLES };\r\n","export const sleep = (t: number) => {\r\n  return new Promise<void>((resolve) => {\r\n    const timeout = setTimeout(() => {\r\n      clearTimeout(timeout);\r\n      resolve();\r\n    }, t);\r\n  });\r\n};\r\n","import type { BaseProvider } from '@ethersproject/providers';\r\nimport type { Signer } from '@ethersproject/abstract-signer';\r\nimport invariant from 'tiny-invariant';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  buildOrder as _buildOrder,\r\n  signOrder as _signOrder,\r\n  fillSignedOrder as _fillSignedOrder,\r\n  approveAsset as _approveAsset,\r\n  verifyOrderSignature as _verifyOrderSignature,\r\n  getApprovalStatus as _getApprovalStatus,\r\n  cancelOrder as _cancelOrder,\r\n  cancelOrders as _cancelOrders,\r\n  estimateGasForFillOrder as _estimateGasForFillOrder,\r\n  estimateGasForApproval as _estimateGasForApproval,\r\n  cancelOrdersUpToNow as _cancelOrdersUpToNow,\r\n  getOrderInfo as _getOrderInfo,\r\n  getAssetsFromOrder as _getAssetsFromOrder,\r\n  hashOrder as _hashOrder,\r\n} from './pure';\r\nimport {\r\n  getEipDomain,\r\n  normalizeOrder as _normalizeOrder,\r\n} from '../../utils/v3/order';\r\nimport type {\r\n  ApprovalOverrides,\r\n  BuildOrderAdditionalConfig,\r\n  FillOrderOverrides,\r\n  INftSwapV3,\r\n} from './INftSwapV3';\r\nimport {\r\n  SupportedChainIdsV3,\r\n  EIP712_TYPES,\r\n  Order,\r\n  OrderInfoV3,\r\n  OrderStatusV3,\r\n  OrderStatusCodeLookup,\r\n  SignedOrder,\r\n  SupportedTokenTypes,\r\n  SwappableAsset,\r\n  AddressesForChainV3,\r\n  BigNumberish,\r\n  ERC20AssetDataSerialized,\r\n  AssetProxyId,\r\n  SigningOptionsV3,\r\n} from './types';\r\nimport {\r\n  ExchangeContract,\r\n  ExchangeContract__factory,\r\n  Forwarder__factory,\r\n} from '../../contracts';\r\nimport {\r\n  convertAssetsToInternalFormat,\r\n  convertAssetToInternalFormat,\r\n  decodeAssetData,\r\n} from '../../utils/v3/asset-data';\r\nimport {\r\n  getProxyAddressForErcType,\r\n  getForwarderAddress,\r\n  getWrappedNativeToken,\r\n} from '../../utils/v3/default-addresses';\r\nimport { DEFAUTLT_GAS_BUFFER_MULTIPLES } from '../../utils/v3/gas-buffer';\r\nimport { sleep } from '../../utils/sleep';\r\nimport addresses from './addresses.json';\r\nimport { PayableOverrides, TransactionOverrides } from '../common/types';\r\n\r\nexport interface NftSwapConfig {\r\n  exchangeContractAddress?: string;\r\n  erc20ProxyContractAddress?: string;\r\n  erc721ProxyContractAddress?: string;\r\n  erc1155ProxyContractAddress?: string;\r\n  forwarderContractAddress?: string;\r\n  wrappedNativeTokenContractAddress?: string;\r\n  gasBufferMultiples?: { [chainId: number]: number };\r\n}\r\n\r\n/**\r\n * NftSwap Convenience class to swap between ERC20, ERC721, and ERC1155. Primary entrypoint for swapping.\r\n */\r\nclass NftSwapV3 implements INftSwapV3 {\r\n  public provider: BaseProvider;\r\n  public signer: Signer | undefined;\r\n  public chainId: number;\r\n  public exchangeContract: ExchangeContract;\r\n  public exchangeContractAddress: string;\r\n  public erc20ProxyContractAddress: string;\r\n  public erc721ProxyContractAddress: string;\r\n  public erc1155ProxyContractAddress: string;\r\n  public wrappedNativeTokenContractAddress: string | null;\r\n  public forwarderContractAddress: string | null;\r\n  public gasBufferMultiples: { [chainId: number]: number } | null;\r\n\r\n  constructor(\r\n    provider: BaseProvider,\r\n    signer: Signer,\r\n    chainId?: number,\r\n    additionalConfig?: NftSwapConfig\r\n  ) {\r\n    this.provider = provider;\r\n    this.signer = signer;\r\n    this.chainId =\r\n      chainId ?? (this.provider._network.chainId as SupportedChainIdsV3);\r\n\r\n    const chainDefaultContractAddresses: AddressesForChainV3 | undefined =\r\n      addresses[this.chainId as SupportedChainIdsV3];\r\n\r\n    const zeroExExchangeContractAddress =\r\n      additionalConfig?.exchangeContractAddress ??\r\n      chainDefaultContractAddresses?.exchange;\r\n\r\n    warning(\r\n      chainDefaultContractAddresses,\r\n      `Default contract addresses missing for chain ${this.chainId}. Supply ExchangeContract and Asset Proxy contracts manually via additionalConfig argument`\r\n    );\r\n\r\n    this.exchangeContractAddress = zeroExExchangeContractAddress;\r\n\r\n    this.erc20ProxyContractAddress =\r\n      additionalConfig?.erc20ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC20, this.chainId);\r\n    this.erc721ProxyContractAddress =\r\n      additionalConfig?.erc721ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC721, this.chainId);\r\n    this.erc1155ProxyContractAddress =\r\n      additionalConfig?.erc1155ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC1155, this.chainId);\r\n    this.forwarderContractAddress =\r\n      additionalConfig?.forwarderContractAddress ??\r\n      getForwarderAddress(this.chainId) ??\r\n      null;\r\n    this.wrappedNativeTokenContractAddress =\r\n      additionalConfig?.wrappedNativeTokenContractAddress ??\r\n      getWrappedNativeToken(this.chainId) ??\r\n      null;\r\n\r\n    invariant(\r\n      this.exchangeContractAddress,\r\n      '0x V3 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\r\n    );\r\n    warning(\r\n      this.erc20ProxyContractAddress,\r\n      'ERC20Proxy Contract Address not set, ERC20 swaps will not work'\r\n    );\r\n    warning(\r\n      this.erc721ProxyContractAddress,\r\n      'ERC721Proxy Contract Address not set, ERC721 swaps will not work'\r\n    );\r\n    warning(\r\n      this.erc1155ProxyContractAddress,\r\n      'ERC20Proxy Contract Address not set, ERC1155 swaps will not work'\r\n    );\r\n    warning(\r\n      this.forwarderContractAddress,\r\n      'Forwarder Contract Address not set, native token fills will not work'\r\n    );\r\n    warning(\r\n      this.wrappedNativeTokenContractAddress,\r\n      'WETH Contract Address not set, SDK cannot automatically check if order can be filled with native token'\r\n    );\r\n    warning(this.signer, 'No Signer provided; Read-only mode only.');\r\n\r\n    // Initialize Exchange contract so we can interact with it easily.\r\n    this.exchangeContract = ExchangeContract__factory.connect(\r\n      zeroExExchangeContractAddress,\r\n      signer ?? provider\r\n    );\r\n\r\n    this.gasBufferMultiples =\r\n      additionalConfig?.gasBufferMultiples ?? DEFAUTLT_GAS_BUFFER_MULTIPLES;\r\n  }\r\n\r\n  public cancelOrder = async (order: Order) => {\r\n    return _cancelOrder(this.exchangeContract, order);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param order : 0x Order;\r\n   * @param timeoutInMs : Timeout in millisecond to give up listening for order fill\r\n   * @param throwIfStatusOtherThanFillableOrFilled : Option to throw if status changes from fillable to anything other than 'filled' (e.g 'cancelled')\r\n   * @returns OrderInfo if status change in order, or null if timed out\r\n   */\r\n  public waitUntilOrderFilledOrCancelled = async (\r\n    order: Order,\r\n    timeoutInMs: number = 60 * 1000,\r\n    pollOrderStatusFrequencyInMs: number = 10_000,\r\n    throwIfStatusOtherThanFillableOrFilled: boolean = false\r\n  ): Promise<OrderInfoV3 | null> => {\r\n    let settled = false;\r\n\r\n    const timeoutPromise = sleep(timeoutInMs).then((_) => null);\r\n\r\n    const orderStatusRefreshPromiseFn =\r\n      async (): Promise<OrderInfoV3 | null> => {\r\n        while (!settled) {\r\n          const orderInfo = await this.getOrderInfo(order);\r\n          if (orderInfo.orderStatus === OrderStatusV3.Fillable) {\r\n            await sleep(pollOrderStatusFrequencyInMs);\r\n            continue;\r\n          } else if (orderInfo.orderStatus === OrderStatusV3.FullyFilled) {\r\n            return orderInfo;\r\n          } else {\r\n            // expired, bad order, etc\r\n            if (throwIfStatusOtherThanFillableOrFilled) {\r\n              throw new Error(\r\n                OrderStatusCodeLookup[orderInfo.orderStatus] ??\r\n                  orderInfo.orderStatus ??\r\n                  'Unknown status'\r\n              );\r\n            }\r\n            return orderInfo;\r\n          }\r\n        }\r\n        return null;\r\n      };\r\n    const fillEventListenerFn = async () => {\r\n      // TODO(johnrjj)\r\n      await sleep(timeoutInMs * 2);\r\n      return null;\r\n    };\r\n\r\n    const orderStatusRefreshPromiseLoop: Promise<OrderInfoV3 | null> =\r\n      orderStatusRefreshPromiseFn();\r\n\r\n    const fillEventPromise: Promise<OrderInfoV3 | null> = fillEventListenerFn();\r\n\r\n    const orderInfo = await Promise.any([\r\n      timeoutPromise,\r\n      orderStatusRefreshPromiseLoop,\r\n      fillEventPromise,\r\n    ]);\r\n    settled = true;\r\n\r\n    return orderInfo;\r\n  };\r\n\r\n  public getOrderInfo = async (order: Order): Promise<OrderInfoV3> => {\r\n    return _getOrderInfo(this.exchangeContract, order);\r\n  };\r\n\r\n  public getOrderStatus = async (order: Order): Promise<OrderStatusV3> => {\r\n    const orderInfo = await this.getOrderInfo(order);\r\n    return orderInfo.orderStatus;\r\n  };\r\n\r\n  public awaitTransactionHash = async (txHash: string) => {\r\n    return this.provider.waitForTransaction(txHash);\r\n  };\r\n\r\n  public signOrder = async (\r\n    order: Order,\r\n    addressOfWalletSigningOrder: string,\r\n    signerOverride?: Signer,\r\n    signingOptions?: Partial<SigningOptionsV3>\r\n  ) => {\r\n    const signerToUser = signerOverride ?? this.signer;\r\n    if (!signerToUser) {\r\n      throw new Error('signOrder:Signer undefined');\r\n    }\r\n    return _signOrder(\r\n      order,\r\n      addressOfWalletSigningOrder,\r\n      signerToUser,\r\n      this.provider,\r\n      this.chainId,\r\n      this.exchangeContract.address,\r\n      signingOptions\r\n    );\r\n  };\r\n\r\n  public buildOrder = (\r\n    makerAssets: SwappableAsset[],\r\n    takerAssets: SwappableAsset[],\r\n    makerAddress: string,\r\n    userConfig?: Partial<BuildOrderAdditionalConfig>\r\n  ) => {\r\n    const defaultConfig = { chainId: this.chainId, makerAddress: makerAddress };\r\n    const config = { ...defaultConfig, ...userConfig };\r\n    return _buildOrder(\r\n      convertAssetsToInternalFormat(makerAssets),\r\n      convertAssetsToInternalFormat(takerAssets),\r\n      config\r\n    );\r\n  };\r\n\r\n  public loadApprovalStatus = async (\r\n    asset: SwappableAsset,\r\n    walletAddress: string\r\n  ) => {\r\n    // TODO(johnrjj) - Fix this...\r\n    const exchangeProxyAddressForAsset = getProxyAddressForErcType(\r\n      asset.type as SupportedTokenTypes,\r\n      this.chainId\r\n    );\r\n    const assetInternalFmt = convertAssetToInternalFormat(asset);\r\n    return _getApprovalStatus(\r\n      walletAddress,\r\n      exchangeProxyAddressForAsset,\r\n      assetInternalFmt,\r\n      this.provider\r\n    );\r\n  };\r\n\r\n  /**\r\n   * @param asset Asset in the SDK format\r\n   * @returns\r\n   */\r\n  public async approveTokenOrNftByAsset(\r\n    asset: SwappableAsset,\r\n    _walletAddress: string, // Remove in next release\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    otherOverrides?: Partial<ApprovalOverrides>\r\n  ) {\r\n    // TODO(johnrjj) - Look up via class fields instead...\r\n    const exchangeProxyAddressForAsset =\r\n      otherOverrides?.exchangeProxyContractAddressForAsset ??\r\n      getProxyAddressForErcType(\r\n        asset.type as SupportedTokenTypes,\r\n        this.chainId\r\n      );\r\n    const signerToUse = otherOverrides?.signer ?? this.signer;\r\n    if (!signerToUse) {\r\n      throw new Error('approveTokenOrNftByAsset:Signer null');\r\n    }\r\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\r\n    }\r\n    let gasBufferMultiple: number | undefined = undefined;\r\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\r\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\r\n      gasBufferMultiple = undefined;\r\n    } else {\r\n      gasBufferMultiple =\r\n        otherOverrides?.gasAmountBufferMultiple ??\r\n        this.getGasMultipleForChainId(this.chainId);\r\n    }\r\n    let maybeCustomGasLimit: BigNumberish | undefined;\r\n    if (gasBufferMultiple) {\r\n      const estimatedGasAmount = await _estimateGasForApproval(\r\n        exchangeProxyAddressForAsset,\r\n        convertAssetToInternalFormat(asset),\r\n        signerToUse,\r\n        approvalTransactionOverrides ?? {},\r\n        otherOverrides?.approve ?? true\r\n      );\r\n      maybeCustomGasLimit = Math.floor(\r\n        estimatedGasAmount.toNumber() * gasBufferMultiple\r\n      );\r\n    }\r\n\r\n    return _approveAsset(\r\n      exchangeProxyAddressForAsset,\r\n      convertAssetToInternalFormat(asset),\r\n      signerToUse,\r\n      {\r\n        gasLimit: maybeCustomGasLimit,\r\n        ...approvalTransactionOverrides,\r\n      },\r\n      otherOverrides?.approve ?? true\r\n    );\r\n  }\r\n\r\n  public getOrderHash = (order: Order) => {\r\n    return _hashOrder(order, this.chainId, this.exchangeContract.address);\r\n  };\r\n\r\n  public getTypedData = (\r\n    chainId: number,\r\n    exchangeContractAddress: string,\r\n    order: Order\r\n  ) => {\r\n    const domain = getEipDomain(chainId, exchangeContractAddress);\r\n    const types = EIP712_TYPES;\r\n    const value = order;\r\n    return {\r\n      domain,\r\n      types,\r\n      value,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Decodes readable order data (maker and taker assets) from the Order's encoded asset data\r\n   * @param order : 0x Order (or Signed Order);\r\n   * @returns Maker and taker assets for the order\r\n   */\r\n  public getAssetsFromOrder = (order: Order) => {\r\n    return _getAssetsFromOrder(order);\r\n  };\r\n\r\n  public checkIfOrderCanBeFilledWithNativeToken = (\r\n    order: Order,\r\n    wrappedNativeTokenContractAddress: string | undefined = this\r\n      .wrappedNativeTokenContractAddress ?? undefined\r\n  ): boolean => {\r\n    warning(\r\n      this.wrappedNativeTokenContractAddress,\r\n      'Wrapped native token contract address not set. Cannot determine if order can be filled with native token'\r\n    );\r\n    const decodedAssetData = decodeAssetData(order.takerAssetData);\r\n\r\n    // Can only fill with native token when taker asset is ERC20. (Multiasset is not supported)\r\n    if (\r\n      decodedAssetData.assetProxyId.toLowerCase() !==\r\n      AssetProxyId.ERC20.toLowerCase()\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // If we get this far, we have a single asset (non-multiasset) ERC20 for the taker token.\r\n    // Let's check if it is the wrapped native contract address for this chain (e.g. WETH on mainnet or rinkeby, WMATIC on polygon)\r\n    const erc20TokenAddress = (decodedAssetData as ERC20AssetDataSerialized)\r\n      .tokenAddress;\r\n    invariant(\r\n      erc20TokenAddress,\r\n      'ERC20 token address missing from detected ERC20 asset data'\r\n    );\r\n\r\n    return (\r\n      erc20TokenAddress.toLowerCase() ===\r\n      wrappedNativeTokenContractAddress?.toLowerCase()\r\n    );\r\n  };\r\n\r\n  public fillSignedOrder = async (\r\n    signedOrder: SignedOrder,\r\n    fillOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides: Partial<PayableOverrides> = {}\r\n  ) => {\r\n    const exchangeContract =\r\n      fillOverrides?.exchangeContract ?? this.exchangeContract;\r\n    let gasBufferMultiple: number | undefined = undefined;\r\n    if (fillOverrides?.gasAmountBufferMultiple === null) {\r\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\r\n      gasBufferMultiple = undefined;\r\n    } else {\r\n      gasBufferMultiple =\r\n        fillOverrides?.gasAmountBufferMultiple ??\r\n        this.getGasMultipleForChainId(this.chainId);\r\n    }\r\n    let maybeCustomGasLimit: BigNumberish | undefined;\r\n    if (gasBufferMultiple) {\r\n      const estimatedGasAmount = await _estimateGasForFillOrder(\r\n        signedOrder,\r\n        exchangeContract\r\n      );\r\n      // NOTE(johnrjj) - Underflow issues, so we convert to number. Gas amounts shouldn't overflow.\r\n      maybeCustomGasLimit = Math.floor(\r\n        estimatedGasAmount.toNumber() * gasBufferMultiple\r\n      );\r\n    }\r\n\r\n    const allTxOverrides: Partial<PayableOverrides> = {\r\n      gasLimit: maybeCustomGasLimit,\r\n      ...transactionOverrides,\r\n    };\r\n\r\n    if (fillOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken) {\r\n      const eligibleForNativeTokenFill =\r\n        this.checkIfOrderCanBeFilledWithNativeToken(signedOrder);\r\n      warning(\r\n        eligibleForNativeTokenFill,\r\n        `Order ineligible for native token fill, fill will fail.`\r\n      );\r\n      invariant(\r\n        this.forwarderContractAddress,\r\n        'Forwarder contract address null, cannot fill order in native token'\r\n      );\r\n      const forwarderContract = Forwarder__factory.connect(\r\n        this.forwarderContractAddress,\r\n        this.signer ?? this.provider\r\n      );\r\n      const amountOfEthToFillWith = signedOrder.takerAssetAmount;\r\n      return forwarderContract.marketBuyOrdersWithEth(\r\n        [signedOrder],\r\n        signedOrder.makerAssetAmount,\r\n        [signedOrder.signature],\r\n        [],\r\n        [],\r\n        {\r\n          value: amountOfEthToFillWith,\r\n          ...allTxOverrides,\r\n        }\r\n      );\r\n    }\r\n\r\n    return _fillSignedOrder(signedOrder, exchangeContract, allTxOverrides);\r\n  };\r\n\r\n  private getGasMultipleForChainId = (chainId: number): number | undefined => {\r\n    if (this.gasBufferMultiples) {\r\n      return this.gasBufferMultiples[this.chainId];\r\n    }\r\n    return undefined;\r\n  };\r\n\r\n  public normalizeOrder = (order: Order): Order => {\r\n    const normalizedOrder = _normalizeOrder(order);\r\n    return normalizedOrder as Order;\r\n  };\r\n\r\n  public normalizeSignedOrder = (order: SignedOrder): SignedOrder => {\r\n    const normalizedOrder = _normalizeOrder(order);\r\n    return normalizedOrder as SignedOrder;\r\n  };\r\n\r\n  public verifyOrderSignature = (\r\n    order: Order,\r\n    signature: string,\r\n    chainId: number,\r\n    exchangeContractAddress: string\r\n  ) => {\r\n    return _verifyOrderSignature(\r\n      order,\r\n      signature,\r\n      chainId,\r\n      exchangeContractAddress\r\n    );\r\n  };\r\n}\r\n\r\nexport { NftSwapV3 };\r\n","export const EIP712_DOMAIN_PARAMETERS = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'version', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n];\r\n\r\nexport const ERC721ORDER_STRUCT_NAME = 'ERC721Order';\r\n\r\nexport const ERC721ORDER_STRUCT_ABI = [\r\n  { type: 'uint8', name: 'direction' },\r\n  { type: 'address', name: 'maker' },\r\n  { type: 'address', name: 'taker' },\r\n  { type: 'uint256', name: 'expiry' },\r\n  { type: 'uint256', name: 'nonce' },\r\n  { type: 'address', name: 'erc20Token' },\r\n  { type: 'uint256', name: 'erc20TokenAmount' },\r\n  { type: 'Fee[]', name: 'fees' },\r\n  { type: 'address', name: 'erc721Token' },\r\n  { type: 'uint256', name: 'erc721TokenId' },\r\n  { type: 'Property[]', name: 'erc721TokenProperties' },\r\n];\r\n\r\nexport const EIP1155_DOMAIN_PARAMETERS = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'version', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n];\r\n\r\nexport const ERC1155ORDER_STRUCT_NAME = 'ERC1155Order';\r\nexport const ERC1155ORDER_STRUCT_ABI = [\r\n  { type: 'uint8', name: 'direction' },\r\n  { type: 'address', name: 'maker' },\r\n  { type: 'address', name: 'taker' },\r\n  { type: 'uint256', name: 'expiry' },\r\n  { type: 'uint256', name: 'nonce' },\r\n  { type: 'address', name: 'erc20Token' },\r\n  { type: 'uint256', name: 'erc20TokenAmount' },\r\n  { type: 'Fee[]', name: 'fees' },\r\n  { type: 'address', name: 'erc1155Token' },\r\n  { type: 'uint256', name: 'erc1155TokenId' },\r\n  { type: 'Property[]', name: 'erc1155TokenProperties' },\r\n  { type: 'uint128', name: 'erc1155TokenAmount' },\r\n];\r\n\r\nexport const FEE_ABI = [\r\n  { type: 'address', name: 'recipient' },\r\n  { type: 'uint256', name: 'amount' },\r\n  { type: 'bytes', name: 'feeData' },\r\n];\r\n\r\nexport const PROPERTY_ABI = [\r\n  { type: 'address', name: 'propertyValidator' },\r\n  { type: 'bytes', name: 'propertyData' },\r\n];\r\n\r\nexport const ETH_ADDRESS_AS_ERC20 =\r\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n\r\nexport const NATIVE_TOKEN_ADDRESS_AS_ERC20 =\r\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { hexDataLength, hexDataSlice } from '@ethersproject/bytes';\r\nimport type { BaseProvider } from '@ethersproject/providers';\r\nimport type { ContractTransaction } from '@ethersproject/contracts';\r\nimport getUnixTime from 'date-fns/getUnixTime';\r\nimport { v4 } from 'uuid';\r\nimport warning from 'tiny-warning';\r\nimport invariant from 'tiny-invariant';\r\nimport padEnd from 'lodash/padEnd';\r\nimport padStart from 'lodash/padStart';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC20__factory,\r\n  ERC721__factory,\r\n} from '../../contracts';\r\nimport { NULL_ADDRESS } from '../../utils/eth';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport type {\r\n  ECSignature,\r\n  ERC721OrderStruct,\r\n  ERC721OrderStructSerialized,\r\n  ERC1155OrderStruct,\r\n  ERC1155OrderStructSerialized,\r\n  NftOrderV4,\r\n  OrderStructOptionsCommon,\r\n  OrderStructOptionsCommonStrict,\r\n  SignedNftOrderV4,\r\n  SignedNftOrderV4Serialized,\r\n  SwappableAssetV4,\r\n  UserFacingERC20AssetDataSerializedV4,\r\n  UserFacingERC721AssetDataSerializedV4,\r\n  UserFacingERC1155AssetDataSerializedV4,\r\n  ApprovalOverrides,\r\n} from './types';\r\nimport { ApprovalStatus, TransactionOverrides } from '../common/types';\r\nimport {\r\n  ERC721ORDER_STRUCT_NAME,\r\n  ERC721ORDER_STRUCT_ABI,\r\n  ERC1155ORDER_STRUCT_NAME,\r\n  ERC1155ORDER_STRUCT_ABI,\r\n  FEE_ABI,\r\n  PROPERTY_ABI,\r\n  ETH_ADDRESS_AS_ERC20,\r\n} from './constants';\r\n\r\nexport const signOrderWithEoaWallet = async (\r\n  order: NftOrderV4,\r\n  signer: TypedDataSigner,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  if ((order as ERC1155OrderStruct).erc1155Token) {\r\n    const domain = {\r\n      chainId: chainId,\r\n      verifyingContract: exchangeContractAddress,\r\n      name: 'ZeroEx',\r\n      version: '1.0.0',\r\n    };\r\n    const types = {\r\n      [ERC1155ORDER_STRUCT_NAME]: ERC1155ORDER_STRUCT_ABI,\r\n      Fee: FEE_ABI,\r\n      Property: PROPERTY_ABI,\r\n    };\r\n    const value = order;\r\n\r\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n      domain,\r\n      types,\r\n      value\r\n    );\r\n\r\n    return rawSignatureFromEoaWallet;\r\n  }\r\n\r\n  if ((order as ERC721OrderStruct).erc721Token) {\r\n    const domain = {\r\n      chainId: chainId,\r\n      verifyingContract: exchangeContractAddress,\r\n      name: 'ZeroEx',\r\n      version: '1.0.0',\r\n    };\r\n    const types = {\r\n      [ERC721ORDER_STRUCT_NAME]: ERC721ORDER_STRUCT_ABI,\r\n      Fee: FEE_ABI,\r\n      Property: PROPERTY_ABI,\r\n    };\r\n    const value = order;\r\n\r\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n      domain,\r\n      types,\r\n      value\r\n    );\r\n\r\n    return rawSignatureFromEoaWallet;\r\n  }\r\n\r\n  warning(!order, 'Unknown order type');\r\n  throw new Error(`Unknown order type`);\r\n};\r\n\r\n/**\r\n *\r\n * @param walletAddress Owner of the asset\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param provider\r\n * @returns\r\n */\r\nexport const getApprovalStatus = async (\r\n  walletAddress: string,\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: SwappableAssetV4,\r\n  provider: BaseProvider\r\n): Promise<ApprovalStatus> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      // ETH (ERC20 representation) requires no approvals, we can shortcut here\r\n      if (asset.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\r\n        return {\r\n          contractApproved: true,\r\n        };\r\n      }\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\r\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\r\n        MAX_APPROVAL.toString()\r\n      ).sub('100000000000000000');\r\n      const approvedForMax = erc20AllowanceBigNumber.gte(\r\n        MAX_APPROVAL_WITH_BUFFER\r\n      );\r\n      return {\r\n        contractApproved: approvedForMax,\r\n      };\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\r\n        asset.tokenId\r\n      );\r\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\r\n        await Promise.all([\r\n          erc721ApprovalForAllPromise,\r\n          erc721ApprovedAddressForIdPromise,\r\n        ]);\r\n      const tokenIdApproved =\r\n        erc721ApprovedAddressForId.toLowerCase() ===\r\n        exchangeProxyAddressForAsset.toLowerCase();\r\n      return {\r\n        contractApproved: erc721ApprovalForAll ?? false,\r\n        tokenIdApproved: tokenIdApproved,\r\n      };\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      return {\r\n        contractApproved: erc1155ApprovalForAll ?? false,\r\n      };\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Some arbitrarily high number.\r\n// TODO(johnrjj) - Support custom ERC20 approval amounts\r\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const approveAsset = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: SwappableAssetV4,\r\n  signer: Signer,\r\n  txOverrides: Partial<TransactionOverrides> = {},\r\n  approvalOrderrides?: Partial<ApprovalOverrides>\r\n): Promise<ContractTransaction> => {\r\n  const approve = approvalOrderrides?.approve ?? true;\r\n\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL.toString() : 0,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      // If consumer prefers only to approve the tokenId, only approve tokenId\r\n      if (approvalOrderrides?.approvalOnlyTokenIdIfErc721) {\r\n        const erc721ApprovalForOnlyTokenId = erc721.approve(\r\n          exchangeProxyAddressForAsset,\r\n          asset.tokenId,\r\n          {\r\n            ...txOverrides,\r\n          }\r\n        );\r\n        return erc721ApprovalForOnlyTokenId;\r\n      }\r\n      // Otherwise default to approving entire contract\r\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      // ERC1155s can only approval all\r\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Parse a hex signature returned by an RPC call into an `ECSignature`.\r\nexport function parseRawSignature(rawSignature: string): ECSignature {\r\n  const hexSize = hexDataLength(rawSignature);\r\n  // if (hexUtils.size(rpcSig) !== 65) {\r\n  //     throw new Error(`Invalid RPC signature length: \"${rpcSig}\"`);\r\n  // }\r\n  if (hexSize !== 65) {\r\n    throw new Error(\r\n      `Invalid signature length, expected 65, got ${hexSize}.\\n\"Raw signature: ${rawSignature}\"`\r\n    );\r\n  }\r\n  // Some providers encode V as 0,1 instead of 27,28.\r\n  const VALID_V_VALUES = [0, 1, 27, 28];\r\n  // Some providers return the signature packed as V,R,S and others R,S,V.\r\n  // Try to guess which encoding it is (with a slight preference for R,S,V).\r\n  // let v = parseInt(rpcSig.slice(-2), 16);\r\n  let v = parseInt(rawSignature.slice(-2), 16);\r\n\r\n  if (VALID_V_VALUES.includes(v)) {\r\n    // Format is R,S,V\r\n    v = v >= 27 ? v : v + 27;\r\n    return {\r\n      // r: hexDataSlice.slice(rpcSig, 0, 32),\r\n      // s: hexUtils.slice(rpcSig, 32, 64),\r\n      r: hexDataSlice(rawSignature, 0, 32),\r\n      s: hexDataSlice(rawSignature, 32, 64),\r\n      v,\r\n    };\r\n  }\r\n  // Format should be V,R,S\r\n  // v = parseInt(rpcSig.slice(2, 4), 16);\r\n  v = parseInt(rawSignature.slice(2, 4), 16);\r\n  if (!VALID_V_VALUES.includes(v)) {\r\n    throw new Error(\r\n      `Cannot determine RPC signature layout from V value: \"${rawSignature}\"`\r\n    );\r\n  }\r\n  v = v >= 27 ? v : v + 27;\r\n  return {\r\n    v,\r\n    r: hexDataSlice(rawSignature, 1, 33),\r\n    s: hexDataSlice(rawSignature, 33, 65),\r\n  };\r\n}\r\n\r\nexport const INFINITE_EXPIRATION_TIMESTAMP_SEC = BigNumber.from(2524604400);\r\n\r\nexport const generateErc721Order = (\r\n  nft: UserFacingERC721AssetDataSerializedV4,\r\n  erc20: UserFacingERC20AssetDataSerializedV4,\r\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\r\n): ERC721OrderStructSerialized => {\r\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\r\n  if (orderData.expiry) {\r\n    // If number is provided, assume given as unix timestamp\r\n    if (typeof orderData.expiry === 'number') {\r\n      expiry = orderData.expiry.toString();\r\n    } else {\r\n      // If date is provided, convert to unix timestamp\r\n      expiry = getUnixTime(orderData.expiry).toString();\r\n    }\r\n  }\r\n  const erc721Order: ERC721OrderStructSerialized = {\r\n    erc721Token: nft.tokenAddress.toLowerCase(),\r\n    erc721TokenId: nft.tokenId,\r\n    direction: parseInt(orderData.direction.toString()), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\r\n    erc20Token: erc20.tokenAddress.toLowerCase(),\r\n    erc20TokenAmount: erc20.amount,\r\n    maker: orderData.maker.toLowerCase(),\r\n    // Defaults not required...\r\n    erc721TokenProperties:\r\n      orderData.tokenProperties?.map((property) => ({\r\n        propertyData: property.propertyData,\r\n        propertyValidator: property.propertyValidator,\r\n      })) ?? [],\r\n    fees:\r\n      orderData.fees?.map((x) => {\r\n        return {\r\n          amount: x.amount.toString(),\r\n          recipient: x.recipient.toLowerCase(),\r\n          feeData: x.feeData?.toString() ?? '0x',\r\n        };\r\n      }) ?? [],\r\n    expiry: expiry,\r\n    nonce:\r\n      orderData.nonce?.toString() ??\r\n      generateRandomV4OrderNonce(orderData.appId),\r\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\r\n  };\r\n\r\n  return erc721Order;\r\n};\r\n\r\nexport const generateErc1155Order = (\r\n  nft: UserFacingERC1155AssetDataSerializedV4,\r\n  erc20: UserFacingERC20AssetDataSerializedV4,\r\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\r\n): ERC1155OrderStructSerialized => {\r\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\r\n  if (orderData.expiry) {\r\n    // If number is provided, assume given as unix timestamp\r\n    if (typeof orderData.expiry === 'number') {\r\n      expiry = orderData.expiry.toString();\r\n    } else {\r\n      // If date is provided, convert to unix timestamp\r\n      expiry = getUnixTime(orderData.expiry).toString();\r\n    }\r\n  }\r\n  const erc1155Order: ERC1155OrderStructSerialized = {\r\n    erc1155Token: nft.tokenAddress.toLowerCase(),\r\n    erc1155TokenId: nft.tokenId,\r\n    erc1155TokenAmount: nft.amount ?? '1',\r\n    direction: parseInt(orderData.direction.toString(10)), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\r\n    erc20Token: erc20.tokenAddress.toLowerCase(),\r\n    erc20TokenAmount: erc20.amount,\r\n    maker: orderData.maker.toLowerCase(),\r\n    // Defaults not required...\r\n    erc1155TokenProperties:\r\n      orderData.tokenProperties?.map((property) => ({\r\n        propertyData: property.propertyData.toString(),\r\n        propertyValidator: property.propertyValidator,\r\n      })) ?? [],\r\n    fees:\r\n      orderData.fees?.map((fee) => {\r\n        return {\r\n          amount: fee.amount.toString(),\r\n          recipient: fee.recipient.toLowerCase(),\r\n          feeData: fee.feeData?.toString() ?? '0x',\r\n        };\r\n      }) ?? [],\r\n    expiry: expiry,\r\n    nonce:\r\n      orderData.nonce?.toString() ??\r\n      generateRandomV4OrderNonce(orderData.appId),\r\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\r\n  };\r\n\r\n  return erc1155Order;\r\n};\r\n\r\n// Number of digits in base 10 128bit nonce\r\n// floor(log_10(2^128 - 1)) + 1\r\nexport const ONE_TWENTY_EIGHT_BIT_LENGTH = 39;\r\n\r\n// Max nonce digit length in base 10\r\n// floor(log_10(2^256 - 1)) + 1\r\nexport const TWO_FIFTY_SIX_BIT_LENGTH = 78;\r\n\r\nconst checkIfStringContainsOnlyNumbers = (val: string) => {\r\n  const onlyNumbers = /^\\d+$/.test(val);\r\n  return onlyNumbers;\r\n};\r\n\r\nexport const RESERVED_APP_ID_PREFIX = '1001';\r\nconst RESERVED_APP_ID_PREFIX_DIGITS = RESERVED_APP_ID_PREFIX.length;\r\n\r\nexport const DEFAULT_APP_ID = '314159';\r\n\r\nexport const verifyAppIdOrThrow = (appId: string) => {\r\n  const isCorrectLength =\r\n    appId.length <= ONE_TWENTY_EIGHT_BIT_LENGTH - RESERVED_APP_ID_PREFIX_DIGITS;\r\n  const hasOnlyNumbers = checkIfStringContainsOnlyNumbers(appId);\r\n  invariant(isCorrectLength, 'appId must be 39 digits or less');\r\n  invariant(\r\n    hasOnlyNumbers,\r\n    'appId must be numeric only (no alpha or special characters, only numbers)'\r\n  );\r\n};\r\n\r\n/**\r\n * Generates a 256bit nonce.\r\n * The format:\r\n *   First 128bits:  ${SDK_PREFIX}${APP_ID}000000 (right padded zeroes to fill)\r\n *   Second 128bits: ${RANDOM_GENERATED_128BIT_ORDER_HASH}\r\n * @returns 128bit nonce as string (0x orders can handle up to 256 bit nonce)\r\n */\r\nexport const generateRandomV4OrderNonce = (\r\n  appId: string = DEFAULT_APP_ID\r\n): string => {\r\n  if (appId) {\r\n    verifyAppIdOrThrow(appId);\r\n  }\r\n  const order128 = padStart(\r\n    generateRandom128BitNumber(),\r\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\r\n    '0'\r\n  );\r\n  const appId128 = padEnd(\r\n    `${RESERVED_APP_ID_PREFIX}${appId}`,\r\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\r\n    '0'\r\n  );\r\n  const final256BitNonce = `${appId128}${order128}`;\r\n  invariant(\r\n    final256BitNonce.length <= TWO_FIFTY_SIX_BIT_LENGTH,\r\n    'Invalid nonce size'\r\n  );\r\n  return final256BitNonce;\r\n};\r\n\r\n// uuids are 128bits\r\nexport const generateRandom128BitNumber = (base = 10): string => {\r\n  const hex = '0x' + v4().replace(/-/g, '');\r\n  const value = BigInt(hex);\r\n  const valueBase10String = value.toString(base); // don't convert this to a number, will lose precision\r\n  return valueBase10String;\r\n};\r\n\r\nexport const serializeNftOrder = (\r\n  signedOrder: SignedNftOrderV4\r\n): SignedNftOrderV4Serialized => {\r\n  if ('erc721Token' in signedOrder) {\r\n    return {\r\n      ...signedOrder,\r\n      direction: parseInt(signedOrder.direction.toString()),\r\n      expiry: signedOrder.expiry.toString(),\r\n      nonce: signedOrder.nonce.toString(),\r\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\r\n      fees: signedOrder.fees.map((fee) => ({\r\n        ...fee,\r\n        amount: fee.amount.toString(),\r\n        feeData: fee.feeData.toString(),\r\n      })),\r\n      erc721TokenId: signedOrder.erc721TokenId.toString(),\r\n    };\r\n  } else if ('erc1155Token' in signedOrder) {\r\n    return {\r\n      ...signedOrder,\r\n      direction: parseInt(signedOrder.direction.toString()),\r\n      expiry: signedOrder.expiry.toString(),\r\n      nonce: signedOrder.nonce.toString(),\r\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\r\n      fees: signedOrder.fees.map((fee) => ({\r\n        ...fee,\r\n        amount: fee.amount.toString(),\r\n        feeData: fee.feeData.toString(),\r\n      })),\r\n      erc1155TokenAmount: signedOrder.erc1155TokenAmount.toString(),\r\n      erc1155TokenId: signedOrder.erc1155TokenId.toString(),\r\n    };\r\n  } else {\r\n    console.log(\r\n      'unknown order format type (not erc721 and not erc1155',\r\n      signedOrder\r\n    );\r\n    throw new Error('Unknown asset type');\r\n  }\r\n};\r\n","export const ERC721_TRANSFER_FROM_DATA = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'safeTransferFromErc721Data',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport const ERC1155_TRANSFER_FROM_DATA = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'safeTransferFromErc1155Data',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n","import unfetch from 'isomorphic-unfetch';\r\nimport { stringify } from 'query-string';\r\nimport type { SignedNftOrderV4, SignedNftOrderV4Serialized } from './types';\r\nimport { serializeNftOrder } from './pure';\r\n\r\nexport const ORDERBOOK_API_ROOT_URL_PRODUCTION = 'https://api.trader.xyz';\r\n\r\nexport interface OrderbookRequestOptions {\r\n  rootUrl: string;\r\n}\r\n\r\nexport interface PostOrderRequestPayload {\r\n  order: SignedNftOrderV4Serialized;\r\n  chainId: string;\r\n  metadata?: Record<string, string>;\r\n}\r\n\r\nexport interface PostOrderResponsePayload {\r\n  erc20Token: string;\r\n  erc20TokenAmount: string;\r\n  nftToken: string;\r\n  nftTokenId: string;\r\n  nftTokenAmount: string;\r\n  nftType: string;\r\n  sellOrBuyNft: 'buy' | 'sell';\r\n  chainId: string;\r\n  order: SignedNftOrderV4Serialized;\r\n  metadata: Record<string, string> | null;\r\n}\r\n\r\nexport interface SearchOrdersResponsePayload {\r\n  orders: Array<PostOrderResponsePayload>;\r\n}\r\n\r\nconst postOrderToOrderbook = async (\r\n  signedOrder: SignedNftOrderV4,\r\n  chainId: string | number,\r\n  metadata: Record<string, string> = {},\r\n  requestOptions?: Partial<OrderbookRequestOptions>,\r\n  fetchFn: typeof unfetch = unfetch\r\n): Promise<PostOrderResponsePayload> => {\r\n  const payload: PostOrderRequestPayload = {\r\n    order: serializeNftOrder(signedOrder),\r\n    chainId: chainId.toString(10),\r\n    metadata,\r\n  };\r\n\r\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n  const orderPostResult: PostOrderResponsePayload = await fetchFn(\r\n    `${rootUrl}/orderbook/order`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    }\r\n  )\r\n    .then(async (res) => {\r\n      if (!res.ok) {\r\n        throw await res.json();\r\n      }\r\n      if (res.status >= 300) {\r\n        throw await res.json();\r\n      }\r\n      return res.json();\r\n    })\r\n    .catch((err) => {\r\n      // err is not a promise\r\n      throw err;\r\n    });\r\n\r\n  return orderPostResult;\r\n};\r\n\r\n/**\r\n * Available query parameters for searching the orderbook\r\n */\r\nexport interface SearchOrdersParams {\r\n  nftTokenId: string | string[];\r\n  erc20Token: string | string[];\r\n  nftToken: string | string[];\r\n  nftType: 'ERC721' | 'ERC1155';\r\n  chainId: string | number | string[] | number[];\r\n  maker: string;\r\n  taker: string;\r\n  nonce: string | string[];\r\n  offset: string | number;\r\n  limit: string | number;\r\n  sellOrBuyNft: 'sell' | 'buy';\r\n  direction: '0' | '1';\r\n  // Defaults to only 'open' orders\r\n  status: 'open' | 'filled' | 'expired' | 'cancelled' | 'all';\r\n  visibility: 'public' | 'private';\r\n  valid: 'valid' | 'all';\r\n}\r\n\r\n/**\r\n * Search through the public hosted orderbook\r\n * @param filters Optional query param filters\r\n * @param requestOptions Fetch options/overrides\r\n * @param fetchFn Optional fetch function override. Uses unfetch by default.\r\n * @returns\r\n */\r\nconst searchOrderbook = async (\r\n  filters?: Partial<SearchOrdersParams>,\r\n  requestOptions?: Partial<OrderbookRequestOptions>,\r\n  fetchFn: typeof unfetch = unfetch\r\n): Promise<SearchOrdersResponsePayload> => {\r\n  // https://github.com/sindresorhus/query-string#arrayformat\r\n  const stringifiedQueryParams = stringify(filters ?? {}, {\r\n    arrayFormat: 'none',\r\n  });\r\n\r\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n  const findOrdersResult = await fetchFn(\r\n    `${rootUrl}/orderbook/orders?${stringifiedQueryParams}`\r\n  )\r\n    .then(async (res) => {\r\n      if (!res.ok) {\r\n        throw await res.json();\r\n      }\r\n      if (res.status >= 300) {\r\n        throw await res.json();\r\n      }\r\n      return res.json();\r\n    })\r\n    .catch((err) => {\r\n      // err is not a promise\r\n      throw err;\r\n    });\r\n\r\n  return findOrdersResult;\r\n};\r\n\r\nexport { postOrderToOrderbook, searchOrderbook };\r\n","import { SupportedChainIdsV4 } from '../sdk';\r\nimport defaultAddresses from '../sdk/v4/addresses.json';\r\n\r\nexport const getWrappedNativeToken = (\r\n  chainId: number | string\r\n): string | null => {\r\n  const chainIdString = chainId.toString(10);\r\n  const zeroExAddresses:\r\n    | { exchange: string; wrappedNativeToken: string }\r\n    | undefined =\r\n    defaultAddresses[chainIdString as unknown as SupportedChainIdsV4];\r\n  return zeroExAddresses?.wrappedNativeToken ?? null;\r\n};\r\n","export enum TradeDirection {\r\n  /**\r\n   * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\r\n   */\r\n  SellNFT = 0,\r\n  /**\r\n   * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\r\n   */\r\n  BuyNFT = 1,\r\n}\r\n\r\nexport enum OrderStatusV4 {\r\n  Invalid = 0,\r\n  Fillable = 1,\r\n  Unfillable = 2,\r\n  Expired = 3,\r\n}\r\n\r\nexport type DirectionMap = {\r\n  [key in TradeDirection]: 'buy' | 'sell' | undefined;\r\n};\r\n\r\n/**\r\n * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\r\n * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\r\n */\r\nexport const DIRECTION_MAPPING: DirectionMap = {\r\n  [TradeDirection.BuyNFT]: 'buy',\r\n  [TradeDirection.SellNFT]: 'sell',\r\n};\r\n","import { NULL_ADDRESS } from '../../utils/eth';\r\nimport { PropertyStruct } from './types';\r\n\r\n/**\r\n * Contract-based orders property validator.\r\n * Add this to your order's tokenProperties to make it a collection order\r\n */\r\nexport const CONTRACT_ORDER_VALIDATOR: PropertyStruct = {\r\n  propertyValidator: NULL_ADDRESS,\r\n  propertyData: [],\r\n};\r\n","import type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport type {\r\n  BaseProvider,\r\n  TransactionReceipt,\r\n} from '@ethersproject/providers';\r\nimport { BigNumber, BigNumberish, ContractTransaction } from 'ethers';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport invariant from 'tiny-invariant';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC721__factory,\r\n  ERC20__factory,\r\n  IZeroEx,\r\n  IZeroEx__factory,\r\n} from '../../contracts';\r\nimport type {\r\n  ApprovalStatus,\r\n  BaseNftSwap,\r\n  PayableOverrides,\r\n  TransactionOverrides,\r\n} from '../common/types';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport {\r\n  approveAsset,\r\n  DEFAULT_APP_ID,\r\n  generateErc1155Order,\r\n  generateErc721Order,\r\n  getApprovalStatus,\r\n  parseRawSignature,\r\n  signOrderWithEoaWallet,\r\n  verifyAppIdOrThrow,\r\n} from './pure';\r\nimport type {\r\n  AddressesForChainV4,\r\n  ApprovalOverrides,\r\n  ERC721OrderStruct,\r\n  FillOrderOverrides,\r\n  NftOrderV4,\r\n  NftOrderV4Serialized,\r\n  OrderStructOptionsCommonStrict,\r\n  SignedERC1155OrderStruct,\r\n  SignedERC1155OrderStructSerialized,\r\n  SignedERC721OrderStruct,\r\n  SignedERC721OrderStructSerialized,\r\n  SignedNftOrderV4,\r\n  SigningOptionsV4,\r\n  SwappableAssetV4,\r\n  UserFacingERC1155AssetDataSerializedV4,\r\n  UserFacingERC20AssetDataSerializedV4,\r\n  UserFacingERC721AssetDataSerializedV4,\r\n} from './types';\r\nimport {\r\n  ERC1155_TRANSFER_FROM_DATA,\r\n  ERC721_TRANSFER_FROM_DATA,\r\n} from './nft-safe-transfer-from-data';\r\nimport addresses from './addresses.json';\r\nimport {\r\n  searchOrderbook,\r\n  postOrderToOrderbook,\r\n  PostOrderResponsePayload,\r\n  SearchOrdersParams,\r\n  ORDERBOOK_API_ROOT_URL_PRODUCTION,\r\n  SearchOrdersResponsePayload,\r\n} from './orderbook';\r\nimport { getWrappedNativeToken } from '../../utils/addresses';\r\nimport { DIRECTION_MAPPING, OrderStatusV4, TradeDirection } from './enums';\r\nimport { CONTRACT_ORDER_VALIDATOR } from './properties';\r\nimport { ETH_ADDRESS_AS_ERC20 } from './constants';\r\nimport { ZERO_AMOUNT } from '../../utils/eth';\r\nimport { arrayify } from '@ethersproject/bytes';\r\n\r\nexport enum SupportedChainIdsV4 {\r\n  Mainnet = 1,\r\n  Ropsten = 3,\r\n  Ubiq = 8,\r\n  Ganache = 1337,\r\n  Polygon = 137,\r\n  PolygonMumbai = 80001,\r\n  BSC = 56,\r\n  Optimism = 10,\r\n  Fantom = 250,\r\n  Celo = 42220,\r\n  Avalance = 43114,\r\n  GaussMainnet = 1777,\r\n  GILTestnet = 1452,\r\n}\r\n\r\nexport const SupportedChainsForV4OrderbookStatusMonitoring = [\r\n  SupportedChainIdsV4.Ropsten,\r\n  SupportedChainIdsV4.Polygon,\r\n  SupportedChainIdsV4.PolygonMumbai,\r\n  SupportedChainIdsV4.Mainnet,\r\n  SupportedChainIdsV4.Optimism,\r\n]; // We may want to see if it is possible to add our chain to the orderbook status monitoring.\r\n\r\nexport interface INftSwapV4 extends BaseNftSwap {\r\n  signOrder: (\r\n    order: NftOrderV4,\r\n    signerAddress: string,\r\n    signer: Signer,\r\n    signingOptions?: Partial<SigningOptionsV4>\r\n  ) => Promise<SignedNftOrderV4>;\r\n  buildNftAndErc20Order: (\r\n    nft:\r\n      | UserFacingERC721AssetDataSerializedV4\r\n      | UserFacingERC1155AssetDataSerializedV4,\r\n    erc20: UserFacingERC20AssetDataSerializedV4,\r\n    sellOrBuyNft: 'sell' | 'buy',\r\n    makerAddress: string,\r\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ) => NftOrderV4Serialized;\r\n  loadApprovalStatus: (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalOverrides?: Partial<ApprovalOverrides>\r\n  ) => Promise<ApprovalStatus>;\r\n  approveTokenOrNftByAsset: (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    approvalOverrides?: Partial<ApprovalOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  fillSignedOrder: (\r\n    signedOrder: SignedNftOrderV4,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  awaitTransactionHash: (txHash: string) => Promise<TransactionReceipt>;\r\n  cancelOrder: (\r\n    nonce: BigNumberish,\r\n    orderType: 'ERC721' | 'ERC1155' // Can we make this optional\r\n  ) => Promise<ContractTransaction>;\r\n  matchOrders: (\r\n    sellOrder: SignedNftOrderV4,\r\n    buyOrder: SignedNftOrderV4,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  // waitUntilOrderFilledOrCancelled: (\r\n  //   order: NftOrderV4,\r\n  //   timeoutInMs?: number,\r\n  //   pollOrderStatusFrequencyInMs?: number,\r\n  //   throwIfStatusOtherThanFillableOrFilled?: boolean\r\n  // ) => Promise<OrderStatus | null>;\r\n  getOrderStatus: (order: NftOrderV4) => Promise<OrderStatusV4>;\r\n  // getOrderHash: (order: NftOrderV4) => string;\r\n  // getTypedData: (\r\n  //   chainId: number,\r\n  //   exchangeContractAddress: string,\r\n  //   order: NftOrderV4\r\n  // ) => TypedData;\r\n  // normalizeSignedOrder: (order: SignedNftOrderV4) => SignedNftOrderV4;\r\n  // normalizeOrder: (order: NftOrderV4) => NftOrderV4;\r\n  // verifyOrderSignature: (\r\n  //   order: NftOrderV4,\r\n  //   signature: string,\r\n  //   chainId: number,\r\n  //   exchangeContractAddress: string\r\n  // ) => boolean;\r\n  // checkIfOrderCanBeFilledWithNativeToken: (order: NftOrderV4) => boolean;\r\n  // getAssetsFromOrder: (order: NftOrderV4) => {\r\n  //   makerAssets: SwappableAsset[];\r\n  //   takerAssets: SwappableAsset[];\r\n  // };\r\n}\r\n\r\nexport interface AdditionalSdkConfig {\r\n  // Identify your app fills with distinct integer\r\n  appId: string;\r\n  // Custom zeroex proxy contract address (defaults to the canonical contracts deployed by 0x Labs core team)\r\n  zeroExExchangeProxyContractAddress: string;\r\n  // Custom orderbook url. Defaults to using Trader.xyz's multi-chain open orderbook\r\n  orderbookRootUrl: string;\r\n}\r\n\r\nclass NftSwapV4 implements INftSwapV4 {\r\n  // RPC provider\r\n  public provider: BaseProvider;\r\n  // Wallet signer\r\n  public signer: Signer | undefined;\r\n  // Chain Id for this instance of NftSwapV4.\r\n  // To switch chains, instantiate a new version of NftSWapV4 with the updated chain id.\r\n  public chainId: number;\r\n\r\n  // ZeroEx ExchangeProxy contract address to reference\r\n  public exchangeProxyContractAddress: string;\r\n  // Generated ZeroEx ExchangeProxy contracts\r\n  public exchangeProxy: IZeroEx;\r\n\r\n  // Unique identifier for app. Must be a positive integer between 1 and 2**128\r\n  public appId: string;\r\n\r\n  // Orderbook URL\r\n  public orderbookRootUrl: string;\r\n\r\n  constructor(\r\n    provider: BaseProvider,\r\n    signer: Signer,\r\n    chainId?: number | string,\r\n    additionalConfig?: Partial<AdditionalSdkConfig>\r\n  ) {\r\n    this.provider = provider;\r\n    this.signer = signer;\r\n    this.chainId = chainId\r\n      ? parseInt(chainId.toString(10), 10)\r\n      : (this.provider._network.chainId as SupportedChainIdsV4);\r\n\r\n    const defaultAddressesForChain: AddressesForChainV4 | undefined =\r\n      addresses[this.chainId as SupportedChainIdsV4];\r\n\r\n    const zeroExExchangeContractAddress =\r\n      additionalConfig?.zeroExExchangeProxyContractAddress ??\r\n      defaultAddressesForChain?.exchange;\r\n\r\n    invariant(\r\n      zeroExExchangeContractAddress,\r\n      '0x V4 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\r\n    );\r\n\r\n    this.exchangeProxyContractAddress = zeroExExchangeContractAddress;\r\n\r\n    this.orderbookRootUrl =\r\n      additionalConfig?.orderbookRootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n    this.appId = additionalConfig?.appId ?? DEFAULT_APP_ID;\r\n    verifyAppIdOrThrow(this.appId);\r\n\r\n    this.exchangeProxy = IZeroEx__factory.connect(\r\n      zeroExExchangeContractAddress,\r\n      signer ?? provider\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if an asset is approved for trading with 0x v4\r\n   * If an asset is not approved, call approveTokenOrNftByAsset to approve.\r\n   * @param asset A tradeable asset (ERC20, ERC721, or ERC1155)\r\n   * @param walletAddress The wallet address that owns the asset\r\n   * @param approvalOverrides Optional config options for approving\r\n   * @returns\r\n   */\r\n  loadApprovalStatus = (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalOverrides?: Partial<ApprovalOverrides> | undefined\r\n  ): Promise<ApprovalStatus> => {\r\n    // TODO(johnrjj) - Fix to pass thru more args...\r\n    return getApprovalStatus(\r\n      walletAddress,\r\n      approvalOverrides?.exchangeContractAddress ?? this.exchangeProxy.address,\r\n      asset,\r\n      this.provider\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Convenience function to await a transaction hash.\r\n   * During a fill order call, you can get the pending transaction hash and await it manually via this method.\r\n   * @param txHash Transaction hash to await\r\n   * @returns\r\n   */\r\n  awaitTransactionHash = async (txHash: string) => {\r\n    return this.provider.waitForTransaction(txHash);\r\n  };\r\n\r\n  /**\r\n   * Cancels an 0x v4 order. Once cancelled, the order no longer fillable.\r\n   * Requires a signer\r\n   * @param nonce\r\n   * @param orderType\r\n   * @returns Transaciton Receipt\r\n   */\r\n  cancelOrder = (\r\n    nonce: BigNumberish,\r\n    orderType: 'ERC721' | 'ERC1155'\r\n  ): Promise<ContractTransaction> => {\r\n    if (orderType === 'ERC721') {\r\n      return this.exchangeProxy.cancelERC721Order(nonce);\r\n    }\r\n    if (orderType === 'ERC1155') {\r\n      return this.exchangeProxy.cancelERC1155Order(nonce);\r\n    }\r\n    console.log('unsupported order', orderType);\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Batch fill NFT sell orders\r\n   * Can be used by taker to fill multiple NFT sell orders atomically.\r\n   * E.g. A taker has a shopping cart full of NFTs to buy, can call this method to fill them all.\r\n   * Requires a valid signer to execute transaction\r\n   * @param signedOrders Signed 0x NFT sell orders\r\n   * @param revertIfIncomplete Revert if we don't fill _all_ orders (defaults to false)\r\n   * @param transactionOverrides Ethers transaciton overrides\r\n   * @returns\r\n   */\r\n  batchBuyNfts = (\r\n    signedOrders: Array<SignedNftOrderV4>,\r\n    revertIfIncomplete: boolean = false,\r\n    transactionOverrides?: PayableOverrides\r\n  ) => {\r\n    const allSellOrders = signedOrders.every((signedOrder) => {\r\n      if (signedOrder.direction === 0) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    invariant(\r\n      allSellOrders,\r\n      `batchBuyNfts: All orders must be of type sell order (order direction == 0)`\r\n    );\r\n\r\n    const allErc721 = signedOrders.every((signedOrder) => {\r\n      if ('erc721Token' in signedOrder) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const allErc1155 = signedOrders.every((signedOrder) => {\r\n      if ('erc1155Token' in signedOrder) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const eitherAllErc721OrErc1155Orders = allErc721 || allErc1155;\r\n\r\n    invariant(\r\n      eitherAllErc721OrErc1155Orders,\r\n      `Batch buy is only available for tokens of the same ERC type.`\r\n    );\r\n\r\n    if (allErc721) {\r\n      const erc721SignedOrders: SignedERC721OrderStruct[] =\r\n        signedOrders as SignedERC721OrderStruct[];\r\n      return this.exchangeProxy.batchBuyERC721s(\r\n        erc721SignedOrders,\r\n        erc721SignedOrders.map((so) => so.signature),\r\n        erc721SignedOrders.map((_) => '0x'),\r\n        revertIfIncomplete,\r\n        {\r\n          ...transactionOverrides,\r\n        }\r\n      );\r\n    } else if (allErc1155) {\r\n      const erc1155SignedOrders: SignedERC1155OrderStruct[] =\r\n        signedOrders as SignedERC1155OrderStruct[];\r\n      return this.exchangeProxy.batchBuyERC1155s(\r\n        erc1155SignedOrders,\r\n        erc1155SignedOrders.map((so) => so.signature),\r\n        erc1155SignedOrders.map((so) => so.erc1155TokenAmount),\r\n        erc1155SignedOrders.map((_) => '0x'),\r\n        revertIfIncomplete,\r\n        {\r\n          ...transactionOverrides,\r\n        }\r\n      );\r\n    } else {\r\n      throw Error('batchBuyNfts: Incompatible state');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Derives order hash from order (currently requires a provider to derive)\r\n   * @param order A 0x v4 order (signed or unsigned)\r\n   * @returns Order hash\r\n   */\r\n  getOrderHash = (order: NftOrderV4Serialized): Promise<string> => {\r\n    if ('erc721Token' in order) {\r\n      return this.exchangeProxy.getERC721OrderHash(order);\r\n    }\r\n    if ('erc1155Token' in order) {\r\n      return this.exchangeProxy.getERC1155OrderHash(order);\r\n    }\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Looks up the order status for a given 0x v4 order.\r\n   * (Available states for an order are 'filled', 'expired', )\r\n   * @param order An 0x v4 NFT order\r\n   * @returns A number the corresponds to the enum OrderStatusV4\r\n   * Valid order states:\r\n   * Invalid = 0\r\n   * Fillable = 1,\r\n   * Unfillable = 2,\r\n   * Expired = 3,\r\n   */\r\n  getOrderStatus = async (order: NftOrderV4): Promise<number> => {\r\n    if ('erc721Token' in order) {\r\n      const erc721OrderStatus = await this.exchangeProxy.getERC721OrderStatus(\r\n        order\r\n      );\r\n      return erc721OrderStatus;\r\n    }\r\n    if ('erc1155Token' in order) {\r\n      const [\r\n        _erc1155OrderHash,\r\n        erc1155OrderStatus,\r\n        _erc1155OrderAmount,\r\n        _erc1155OrderAmountReminaing,\r\n      ] = await this.exchangeProxy.getERC1155OrderInfo(order);\r\n      return erc1155OrderStatus;\r\n    }\r\n    console.log('unsupported order', order);\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Convenience function to approve an asset (ERC20, ERC721, or ERC1155) for trading with 0x v4\r\n   * @param asset\r\n   * @param _walletAddress\r\n   * @param approvalTransactionOverrides\r\n   * @param otherOverrides\r\n   * @returns An ethers contract transaction\r\n   */\r\n  approveTokenOrNftByAsset = (\r\n    asset: SwappableAssetV4,\r\n    _walletAddress: string, // Remove in next release\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    otherOverrides?: Partial<ApprovalOverrides>\r\n  ): Promise<ContractTransaction> => {\r\n    const signedToUse = otherOverrides?.signer ?? this.signer;\r\n    if (!signedToUse) {\r\n      throw new Error('Signed not defined');\r\n    }\r\n    return approveAsset(\r\n      this.exchangeProxy.address,\r\n      asset,\r\n      signedToUse,\r\n      {\r\n        ...approvalTransactionOverrides,\r\n      },\r\n      otherOverrides\r\n    );\r\n  };\r\n\r\n  // // TyPeSaFeTy: Order types supported:\r\n  // // ERC721<>ERC20\r\n  // // ERC1155<>ERC20\r\n  // // Below ensures type-safe for those specific combinations\r\n  /**\r\n   * Builds a 0x order given two assets (either NFT<>ERC20 or ERC20<>NFT)\r\n   * @param makerAsset An asset (ERC20, ERC721, or ERC1155) the user has\r\n   * @param takerAsset An asset (ERC20, ERC721, or ERC1155) the user wants\r\n   * @param makerAddress The address of the wallet creating the order\r\n   * @param orderConfig Various order configuration options (e.g. expiration, nonce)\r\n   */\r\n  buildOrder(\r\n    makerAsset: UserFacingERC1155AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC1155AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC721AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC721AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: SwappableAssetV4,\r\n    takerAsset: SwappableAssetV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ) {\r\n    // Basic validation checks\r\n    if (\r\n      (takerAsset.type === 'ERC1155' || takerAsset.type === 'ERC721') &&\r\n      (makerAsset.type === 'ERC1155' || makerAsset.type === 'ERC721')\r\n    ) {\r\n      throw new Error(\r\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\r\n      );\r\n    }\r\n    if (makerAsset.type === 'ERC20' && takerAsset.type === 'ERC20') {\r\n      throw new Error(\r\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\r\n      );\r\n    }\r\n\r\n    // First determine if the maker or taker is trading the erc20 (to orient the direction of the trade)\r\n    let direction: TradeDirection = TradeDirection.SellNFT;\r\n    if (takerAsset.type === 'ERC20') {\r\n      // NFT is on the maker side (so the maker is selling the NFT)\r\n      direction = TradeDirection.SellNFT;\r\n    }\r\n    if (makerAsset.type === 'ERC20') {\r\n      // NFT is on the taker side (so the maker is buying the NFT)\r\n      direction = TradeDirection.BuyNFT;\r\n    }\r\n\r\n    const nft = (\r\n      direction === TradeDirection.BuyNFT ? takerAsset : makerAsset\r\n    ) as SwappableAssetV4;\r\n    const erc20 = (\r\n      direction === TradeDirection.BuyNFT ? makerAsset : takerAsset\r\n    ) as UserFacingERC20AssetDataSerializedV4;\r\n\r\n    return this.buildNftAndErc20Order(\r\n      nft,\r\n      erc20,\r\n      DIRECTION_MAPPING[direction],\r\n      makerAddress,\r\n      orderConfig\r\n    );\r\n  }\r\n\r\n  getWrappedTokenAddress = (chainId: number | string) => {\r\n    return getWrappedNativeToken(chainId);\r\n  };\r\n\r\n  buildCollectionBasedOrder = (\r\n    erc20ToSell: UserFacingERC20AssetDataSerializedV4,\r\n    nftCollectionToBid: {\r\n      tokenAddress: string;\r\n      type: 'ERC721' | 'ERC1155';\r\n    },\r\n    makerAddress: string\r\n  ): NftOrderV4Serialized => {\r\n    return this.buildNftAndErc20Order(\r\n      {\r\n        ...nftCollectionToBid,\r\n        // Override tokenId to zero, tokenId is ignored when using token properties\r\n        tokenId: '0',\r\n      },\r\n      erc20ToSell,\r\n      'buy',\r\n      makerAddress,\r\n      {\r\n        // Add the token property of 'collection', so this order will be valid for any nft in the collection\r\n        tokenProperties: [CONTRACT_ORDER_VALIDATOR],\r\n      }\r\n    );\r\n  };\r\n\r\n  buildNftAndErc20Order = (\r\n    nft: SwappableAssetV4,\r\n    erc20: UserFacingERC20AssetDataSerializedV4,\r\n    sellOrBuyNft: 'sell' | 'buy' = 'sell',\r\n    makerAddress: string,\r\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized => {\r\n    const defaultConfig = {\r\n      chainId: this.chainId,\r\n      makerAddress: makerAddress,\r\n      appId: this.appId,\r\n    };\r\n    const config = { ...defaultConfig, ...userConfig };\r\n\r\n    const direction =\r\n      sellOrBuyNft === 'sell' ? TradeDirection.SellNFT : TradeDirection.BuyNFT;\r\n\r\n    // Validate that a bid does not use ETH.\r\n    if (direction === TradeDirection.BuyNFT) {\r\n      if (erc20.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\r\n        throw new Error(\r\n          'NFT Bids cannot use the native token (e.g. ETH). Please use the wrapped native token (e.g. WETH)'\r\n        );\r\n      }\r\n    }\r\n\r\n    switch (nft.type) {\r\n      // Build ERC721 order\r\n      case 'ERC721':\r\n        const erc721Order = generateErc721Order(nft, erc20, {\r\n          direction,\r\n          maker: makerAddress,\r\n          ...config,\r\n        });\r\n        return erc721Order;\r\n      // Build ERC1155 order\r\n      case 'ERC1155':\r\n        const erc1155Order = generateErc1155Order(nft, erc20, {\r\n          direction,\r\n          maker: makerAddress,\r\n          ...config,\r\n        });\r\n        return erc1155Order;\r\n      default:\r\n        throw new UnexpectedAssetTypeError((nft as any).type ?? 'Unknown');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Signs a 0x order. Requires a signer (e.g. wallet or private key)\r\n   * Once signed, the order becomes fillable (as long as the order is valid)\r\n   * 0x orders require a signature to fill.\r\n   * @param order A 0x v4 order\r\n   * @returns A signed 0x v4 order\r\n   */\r\n  signOrder = async (order: NftOrderV4): Promise<SignedNftOrderV4> => {\r\n    if (!this.signer) {\r\n      throw new Error('Signed not defined');\r\n    }\r\n\r\n    const rawSignature = await signOrderWithEoaWallet(\r\n      order,\r\n      this.signer as unknown as TypedDataSigner,\r\n      this.chainId,\r\n      this.exchangeProxy.address\r\n    );\r\n\r\n    const ecSignature = parseRawSignature(rawSignature);\r\n\r\n    const signedOrder = {\r\n      ...order,\r\n      signature: {\r\n        signatureType: 2,\r\n        r: ecSignature.r,\r\n        s: ecSignature.s,\r\n        v: ecSignature.v,\r\n      },\r\n    };\r\n    return signedOrder;\r\n  };\r\n\r\n  /**\r\n   * Fill a 'Buy NFT' order (e.g. taker would be selling'their NFT to fill this order) without needing an approval\r\n   * Use case: Users can accept offers/bids for their NFTs without needing to approve their NFT! 🤯\r\n   * @param signedOrder Signed Buy Nft order (e.g. direction = 1)\r\n   * @param tokenId NFT token id that taker of trade will sell\r\n   * @param fillOrderOverrides Trade specific (SDK-level) overrides\r\n   * @param transactionOverrides General transaction overrides from ethers (gasPrice, gasLimit, etc)\r\n   * @returns\r\n   */\r\n  fillBuyNftOrderWithoutApproval = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    tokenId: string,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    if (!this.signer) {\r\n      throw new Error(\r\n        'Signer undefined. Signer must be provided to fill order'\r\n      );\r\n    }\r\n    if (signedOrder.direction !== TradeDirection.BuyNFT) {\r\n      throw new Error(\r\n        'Only filling Buy NFT orders (direction=1) is valid for skipping approvals'\r\n      );\r\n    }\r\n\r\n    const signerAddress = await this.signer.getAddress();\r\n    const unwrapWeth =\r\n      fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n      false;\r\n\r\n    // Handle ERC721\r\n    if ('erc721Token' in signedOrder) {\r\n      const erc721Contract = ERC721__factory.connect(\r\n        signedOrder.erc721Token,\r\n        this.signer\r\n      );\r\n\r\n      const encodingIface = new Interface(ERC721_TRANSFER_FROM_DATA);\r\n\r\n      const fragment = encodingIface.getFunction('safeTransferFromErc721Data');\r\n      const data = encodingIface._encodeParams(fragment.inputs, [\r\n        signedOrder,\r\n        signedOrder.signature,\r\n        unwrapWeth,\r\n      ]);\r\n\r\n      const transferFromTx = await erc721Contract[\r\n        'safeTransferFrom(address,address,uint256,bytes)'\r\n      ](\r\n        signerAddress,\r\n        this.exchangeProxy.address,\r\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\r\n        data,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return transferFromTx;\r\n    }\r\n\r\n    // Handle ERC1155\r\n    if ('erc1155Token' in signedOrder) {\r\n      const erc1155Contract = ERC1155__factory.connect(\r\n        signedOrder.erc1155Token,\r\n        this.signer\r\n      );\r\n      const encodingIface = new Interface(ERC1155_TRANSFER_FROM_DATA);\r\n\r\n      const fragment = encodingIface.getFunction('safeTransferFromErc1155Data');\r\n      const data = encodingIface._encodeParams(fragment.inputs, [\r\n        signedOrder,\r\n        signedOrder.signature,\r\n        unwrapWeth,\r\n      ]);\r\n\r\n      const transferFromTx = await erc1155Contract.safeTransferFrom(\r\n        signerAddress,\r\n        this.exchangeProxy.address,\r\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\r\n        signedOrder.erc1155TokenAmount ?? '1',\r\n        data,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return transferFromTx;\r\n    }\r\n\r\n    // Unknown format (NFT neither ERC721 or ERC1155)\r\n    throw new Error('unknown order type');\r\n  };\r\n\r\n  /**\r\n   * Fills a 'collection'-based order (e.g. a bid for any nft belonging to a particular collection)\r\n   * @param signedOrder A 0x signed collection order\r\n   * @param tokenId The token id to fill for the collection order\r\n   * @param fillOrderOverrides Various fill options\r\n   * @param transactionOverrides Ethers transaction overrides\r\n   * @returns\r\n   */\r\n  fillSignedCollectionOrder = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    tokenId: BigNumberish,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    return this.fillSignedOrder(\r\n      signedOrder,\r\n      {\r\n        tokenIdToSellForCollectionOrder: tokenId,\r\n        ...fillOrderOverrides,\r\n      },\r\n      {\r\n        ...transactionOverrides,\r\n      }\r\n    );\r\n  };\r\n\r\n  isErc20NativeToken = (order: NftOrderV4): boolean => {\r\n    return order.erc20Token.toLowerCase() === ETH_ADDRESS_AS_ERC20;\r\n  };\r\n\r\n  /**\r\n   * Fills a signed order\r\n   * @param signedOrder A signed 0x v4 order\r\n   * @param fillOrderOverrides Optional configuration on possible ways to fill the order\r\n   * @param transactionOverrides Ethers transaction overrides (e.g. gas price)\r\n   * @returns\r\n   */\r\n  fillSignedOrder = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    // Only Sell orders can be filled with ETH\r\n    const canOrderTypeBeFilledWithNativeToken =\r\n      signedOrder.direction === TradeDirection.SellNFT;\r\n    // Is ERC20 being traded the native token\r\n    const isNativeToken = this.isErc20NativeToken(signedOrder);\r\n    const needsEthAttached =\r\n      isNativeToken && canOrderTypeBeFilledWithNativeToken;\r\n    const erc20TotalAmount = this.getErc20TotalIncludingFees(signedOrder);\r\n\r\n    // do fill\r\n    if ('erc1155Token' in signedOrder) {\r\n      // If maker is selling an NFT, taker wants to 'buy' nft\r\n      if (signedOrder.direction === TradeDirection.SellNFT) {\r\n        return this.exchangeProxy.buyERC1155(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          signedOrder.erc1155TokenAmount,\r\n          '0x',\r\n          {\r\n            // If we're filling an order with ETH, be sure to include the value with fees added\r\n            value: needsEthAttached ? erc20TotalAmount : undefined,\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      } else {\r\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\r\n        let unwrapNativeToken: boolean =\r\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n          false;\r\n\r\n        if (signedOrder.erc1155TokenProperties.length > 0) {\r\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\r\n          if (\r\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\r\n          ) {\r\n            throw new Error(\r\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\r\n            );\r\n          }\r\n        }\r\n\r\n        // Otherwise, taker is selling the nft (and buying an ERC20)\r\n        return this.exchangeProxy.sellERC1155(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\r\n            signedOrder.erc1155TokenId,\r\n          signedOrder.erc1155TokenAmount,\r\n          unwrapNativeToken,\r\n          '0x',\r\n          {\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      }\r\n    } else if ('erc721Token' in signedOrder) {\r\n      // If maker is selling an NFT, taker wants to 'buy' nft\r\n      if (signedOrder.direction === TradeDirection.SellNFT) {\r\n        return this.exchangeProxy.buyERC721(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          '0x',\r\n          {\r\n            // If we're filling an order with ETH, be sure to include the value with fees added\r\n            value: needsEthAttached ? erc20TotalAmount : undefined,\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      } else {\r\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\r\n        let unwrapNativeToken: boolean =\r\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n          false;\r\n\r\n        if (signedOrder.erc721TokenProperties.length > 0) {\r\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\r\n          if (\r\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\r\n          ) {\r\n            throw new Error(\r\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\r\n            );\r\n          }\r\n        }\r\n\r\n        // Otherwise, taker is selling the nft (and buying an ERC20)\r\n        return this.exchangeProxy.sellERC721(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\r\n            signedOrder.erc721TokenId,\r\n          unwrapNativeToken,\r\n          '0x',\r\n          {\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      }\r\n    }\r\n    console.log('unsupported order', signedOrder);\r\n    throw new Error('unsupport signedOrder type');\r\n  };\r\n\r\n  /**\r\n   * Posts a 0x order to the Trader.xyz NFT open orderbook\r\n   * @param signedOrder A valid 0x v4 signed order\r\n   * @param chainId The chain id (e.g. '1' for mainnet, or '137' for polygon mainnet)\r\n   * @param metadata An optional record object (key: string, value: string) that will be stored alongside the order in the orderbook\r\n   * This is helpful for webapp builders, as they can save app-level order metadata\r\n   * (e.g. maybe save a 'bidMessage' alongside the order, or extra image metadata)\r\n   * @returns\r\n   */\r\n  postOrder = (\r\n    signedOrder: SignedNftOrderV4,\r\n    chainId: string | number,\r\n    metadata?: Record<string, string>\r\n  ): Promise<PostOrderResponsePayload> => {\r\n    const parsedChainId = parseInt(chainId.toString(10), 10);\r\n    const supportsMonitoring =\r\n      SupportedChainsForV4OrderbookStatusMonitoring.includes(parsedChainId);\r\n    warning(\r\n      supportsMonitoring,\r\n      `Chain ${chainId} does not support live orderbook status monitoring. Orders can be posted to be persisted, but status wont be monitored (e.g. updating status on a fill, cancel, or expiry.)`\r\n    );\r\n    return postOrderToOrderbook(signedOrder, parsedChainId, metadata, {\r\n      rootUrl: this.orderbookRootUrl,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Gets orders from the Trader.xyz Open NFT Orderbook\r\n   * By default will find all order, active orders.\r\n   * @param filters Various options to filter an order search\r\n   * @returns An object that includes `orders` key with an array of orders that meet the search critera\r\n   */\r\n  getOrders = async (\r\n    filters?: Partial<SearchOrdersParams>\r\n  ): Promise<SearchOrdersResponsePayload> => {\r\n    const orders = await searchOrderbook(filters, {\r\n      rootUrl: this.orderbookRootUrl,\r\n    });\r\n    return orders;\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param sellOrder ERC721 Order to sell an NFT\r\n   * @param buyOrder ERC721 Order to buy an NFT\r\n   * @param transactionOverrides Ethers transaction overrides\r\n   * @returns\r\n   */\r\n  matchOrders = async (\r\n    // NOTE(johnrjj)- Should these types be SignedERC721OrderStruct directly since only 712 is supported for matching\r\n    sellOrder: SignedNftOrderV4,\r\n    buyOrder: SignedNftOrderV4,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    if ('erc721Token' in sellOrder && 'erc721Token' in buyOrder) {\r\n      // TODO(johnrjj) - More validation here before we match on-chain\r\n      const contractTx = await this.exchangeProxy.matchERC721Orders(\r\n        sellOrder,\r\n        buyOrder,\r\n        sellOrder.signature,\r\n        buyOrder.signature,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return contractTx;\r\n    }\r\n\r\n    throw new Error(\r\n      'Only ERC721 Orders are currently supported for matching. Please ensure both the sellOrder and buyOrder are ERC721 orders'\r\n    );\r\n  };\r\n\r\n  getMakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\r\n    // Buy NFT - So maker asset is an ERC20\r\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\r\n      return {\r\n        tokenAddress: order.erc20Token,\r\n        amount: order.erc20TokenAmount.toString(10),\r\n        type: 'ERC20' as const,\r\n      };\r\n    } else if (\r\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\r\n    ) {\r\n      // Sell NFT - So maker asset is an NFT (either ERC721 or ERC1155)\r\n      if ('erc721Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc721Token,\r\n          tokenId: order.erc721TokenId.toString(10),\r\n          type: 'ERC721' as const,\r\n        };\r\n      } else if ('erc1155Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc1155Token,\r\n          tokenId: order.erc1155TokenId.toString(10),\r\n          amount: order.erc1155TokenAmount.toString(10),\r\n          type: 'ERC1155' as const,\r\n        };\r\n      }\r\n    }\r\n    throw new Error(`Unknown order direction ${order.direction}`);\r\n  };\r\n\r\n  getTakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\r\n    // Buy NFT - So taker asset is an NFT [ERC721 or ERC1155] (because the taker is the NFT owner 'accepting' a buy order)\r\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\r\n      if ('erc721Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc721Token,\r\n          tokenId: order.erc721TokenId.toString(10),\r\n          type: 'ERC721' as const,\r\n        };\r\n      } else if ('erc1155Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc1155Token,\r\n          tokenId: order.erc1155TokenId.toString(10),\r\n          amount: order.erc1155TokenAmount.toString(10),\r\n          type: 'ERC1155' as const,\r\n        };\r\n      }\r\n    } else if (\r\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\r\n    ) {\r\n      // Sell NFT - So taker asset is an ERC20 -- because the taker here is 'buying' the sell NFT order\r\n      return {\r\n        tokenAddress: order.erc20Token,\r\n        amount: order.erc20TokenAmount.toString(10),\r\n        type: 'ERC20' as const,\r\n      };\r\n    }\r\n    throw new Error(`Unknown order direction ${order.direction}`);\r\n  };\r\n\r\n  /**\r\n   * Validate an order signature given a signed order\r\n   * Throws if invalid\r\n   * @param signedOrder A 0x v4 signed order to validate signature for\r\n   * @returns\r\n   */\r\n  validateSignature = async (\r\n    signedOrder: SignedNftOrderV4\r\n  ): Promise<boolean> => {\r\n    if ('erc721Token' in signedOrder) {\r\n      // Validate functions on-chain return void if successful\r\n      await this.exchangeProxy.validateERC721OrderSignature(\r\n        signedOrder,\r\n        signedOrder.signature\r\n      );\r\n      return true;\r\n    } else if ('erc1155Token' in signedOrder) {\r\n      // Validate functions on-chain return void if successful\r\n      await this.exchangeProxy.validateERC1155OrderSignature(\r\n        signedOrder,\r\n        signedOrder.signature\r\n      );\r\n      return true;\r\n    } else {\r\n      throw new Error('Unknown order type (not ERC721 or ERC1155)');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetches the balance of an asset for a given wallet address\r\n   * @param asset A Tradeable asset -- An ERC20, ERC721, or ERC1155\r\n   * @param walletAddress A wallet address ('0x1234...6789')\r\n   * @param provider Optional, defaults to the class's provider but can be overridden\r\n   * @returns A BigNumber balance (e.g. 1 or 0 for ERC721s. ERC20 and ERC1155s can have balances greater than 1)\r\n   */\r\n  fetchBalanceForAsset = async (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    provider: BaseProvider = this.provider\r\n  ): Promise<BigNumber> => {\r\n    switch (asset.type) {\r\n      case 'ERC20':\r\n        const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n        return erc20.balanceOf(walletAddress);\r\n      case 'ERC721':\r\n        const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n        const owner = await erc721.ownerOf(asset.tokenId);\r\n        if (owner.toLowerCase() === walletAddress.toLowerCase()) {\r\n          return BigNumber.from(1);\r\n        }\r\n        return BigNumber.from(0);\r\n      case 'ERC1155':\r\n        const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n        return erc1155.balanceOf(walletAddress, asset.tokenId);\r\n      default:\r\n        throw new Error(`Asset type unknown ${(asset as any).type}`);\r\n    }\r\n  };\r\n\r\n  // TODO(johnrjj) Consolidate w/ checkOrderCanBeFilledMakerSide\r\n  checkOrderCanBeFilledTakerSide = async (\r\n    order: NftOrderV4,\r\n    takerWalletAddress: string\r\n  ) => {\r\n    const takerAsset = this.getTakerAsset(order);\r\n    const takerApprovalStatus = await this.loadApprovalStatus(\r\n      takerAsset,\r\n      takerWalletAddress\r\n    );\r\n    const takerBalance = await this.fetchBalanceForAsset(\r\n      this.getTakerAsset(order),\r\n      takerWalletAddress\r\n    );\r\n\r\n    const hasBalance: boolean = takerBalance.gte(\r\n      (takerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\r\n    );\r\n\r\n    const isApproved: boolean =\r\n      takerApprovalStatus.contractApproved ||\r\n      takerApprovalStatus.tokenIdApproved ||\r\n      false;\r\n\r\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\r\n\r\n    return {\r\n      approvalStatus: takerApprovalStatus,\r\n      balance: takerBalance.toString(),\r\n      isApproved,\r\n      hasBalance,\r\n      canOrderBeFilled,\r\n    };\r\n  };\r\n\r\n  checkOrderCanBeFilledMakerSide = async (\r\n    order: NftOrderV4\r\n    // override?: Partial<VerifyOrderOptionsOverrides>\r\n  ) => {\r\n    const makerAddress = order.maker;\r\n    const makerAsset = this.getMakerAsset(order);\r\n    const makerApprovalStatus = await this.loadApprovalStatus(\r\n      makerAsset,\r\n      makerAddress\r\n    );\r\n    const makerBalance = await this.fetchBalanceForAsset(\r\n      this.getMakerAsset(order),\r\n      makerAddress\r\n    );\r\n\r\n    const hasBalance: boolean = makerBalance.gte(\r\n      (makerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\r\n    );\r\n    const isApproved: boolean =\r\n      makerApprovalStatus.tokenIdApproved ||\r\n      makerApprovalStatus.contractApproved ||\r\n      false;\r\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\r\n\r\n    return {\r\n      approvalStatus: makerApprovalStatus,\r\n      balance: makerBalance.toString(),\r\n      isApproved,\r\n      hasBalance,\r\n      canOrderBeFilled,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Convenience function to sum all fees. Total fees denominated in erc20 token amount.\r\n   * @param order A 0x v4 order (signed or un-signed);\r\n   * @returns Total summed fees for a 0x v4 order. Amount is represented in Erc20 token units.\r\n   */\r\n  getTotalFees = (order: NftOrderV4): BigNumber => {\r\n    const fees = order.fees;\r\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\r\n    let feesTotal = ZERO_AMOUNT;\r\n    fees.forEach((fee) => {\r\n      feesTotal = feesTotal.add(BigNumber.from(fee.amount));\r\n    });\r\n    return feesTotal;\r\n  };\r\n\r\n  /**\r\n   * Calculates total order cost.\r\n   * In 0x v4, fees are additive (i.e. they are not deducted from the order amount, but added on top of)\r\n   * @param order A 0x v4 order;\r\n   * @returns Total cost of an order (base amount + fees). Amount is represented in Erc20 token units. Does not include gas costs.\r\n   */\r\n  getErc20TotalIncludingFees = (order: NftOrderV4): BigNumber => {\r\n    const fees = order.fees;\r\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\r\n    let feesTotal = this.getTotalFees(order);\r\n    const orderTotalCost = BigNumber.from(order.erc20TokenAmount).add(\r\n      feesTotal\r\n    );\r\n    return orderTotalCost;\r\n  };\r\n}\r\n\r\nexport { NftSwapV4 };\r\n"],"names":["undefined","ZERO_AMOUNT","BigNumber","from","NULL_ADDRESS","NULL_BYTES","AssetProxyId","SupportedChainIdsV3","OrderStatusV3","OrderStatusCodeLookup","ORDER_BUILDER_ERROR_CODES","SupportedTokenTypes","EIP712_TYPES","Order","name","type","RevertReason","TRADER_ADDRESS_IDENTIFIER","INFINITE_TIMESTAMP_SEC","getEipDomain","chainId","exchangeContractAddress","version","toString","verifyingContract","normalizeOrder","order","makerAddress","toLowerCase","takerAddress","feeRecipientAddress","senderAddress","makerAssetAmount","takerAssetAmount","makerFee","takerFee","expirationTimeSeconds","salt","makerAssetData","takerAssetData","makerFeeAssetData","takerFeeAssetData","signature","generateOrderFromAssetDatas","orderConfig","expiration","getUnixTime","generateSaltHash","generateTimeBasedSalt","unixTime","Date","manualSaltHashToUse","ModuleError","message","options","code","String","expected","cause","Error","captureStackTrace","constructor","UnexpectedAssetTypeError","assetType","UnsupportedChainId","convertStringToBN","s","convertCollectionToBN","arr","map","encodeErc20AssetData","tokenAddress","hexConcat","ERC20","defaultAbiCoder","encode","decodeErc20AssetData","encodedAssetData","length","hexDataLength","assetProxyId","hexDataSlice","rest","data","decode","encodeErc721AssetData","tokenId","ERC721","decodeErc721AssetData","encodeErc1155AssetData","tokenIds","values","callbackData","ERC1155","decodeErc1155AssetData","id","tokenValues","val","encodeMultiAssetAssetData","nestedAssetData","MultiAsset","decodeMultiAssetData","nestedAssetDatas","amounts","decodeAssetData","encodeAssetData","assetData","erc1155EncodingForMultiAssetOrder","erc20AssetData","erc721AssetData","tokens","x","_","tokenValue","erc1155AssetData","multiAssetData","getAmountFromAsset","amount","convertAssetToInternalFormat","swappable","zeroExErc1155AssetFormat","convertAssetsToInternalFormat","assets","_abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","components","ExchangeContract__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","Forwarder__factory","IZeroEx__factory","ERC1155__factory","ERC20__factory","ERC721__factory","encodeTypedDataHash","typedData","types","_TypedDataEncoder","hash","domain","EIP1271ZeroExDataAbi","cancelOrder","exchangeContract","getOrderInfo","orderInfo","getOrderStatus","orderStatus","cancelOrders","orders","overrides","batchCancelOrders","cancelOrdersUpToNow","unixTimestampAsSalt","cancelOrdersUpTo","hashOrder","EIP712_DOMAIN","signOrderWithEip1271","signer","value","orderHash","msg","encodeFunctionData","signMessage","arrayify","rawSignatureFromContractWallet","signOrderWithEoaWallet","_signTypedData","rawSignatureFromEoaWallet","checkIfContractWallet","provider","walletAddress","isContractWallet","getCode","walletCode","isSequence","_isSequenceProvider","providerToUse","isWalletConnect","isSequenceViaWalletConnect","connector","_peerMeta","description","signOrder","signerAddress","signingOptions","method","signatureType","autodetectSignatureType","rawEip712Signature","prepareOrderSignatureFromEoaWallet","rawEip1271Signature","prepareOrderSignatureFromContractWallet","signedOrder","console","log","rawSignature","splitSignature","hexlify","v","r","verifyOrderSignature","maker","slicedSigV","slicedSig","derivedSignatureHex","derivedSignature","joinSignature","verifyTypedData","e","buildOrder","makerAssets","takerAssets","makerAssetEligibleForSingleAsset","makerAsset","makerAssetAmounts","ma","makerAssetDatas","makerMultiAsset","takerAssetEligibleForSingleAsset","takerAsset","takerAssetAmounts","ta","takerAssetDatas","takerMultiAsset","exchangeAddress","fillSignedOrder","fillOrKillOrder","getApprovalStatus","exchangeProxyAddressForAsset","asset","erc20","allowance","erc20AllowanceBigNumber","MAX_APPROVAL_WITH_BUFFER","MAX_APPROVAL","sub","approvedForMax","gte","contractApproved","erc721","erc721ApprovalForAllPromise","isApprovedForAll","erc721ApprovedAddressForIdPromise","getApproved","Promise","all","erc721ApprovalForAll","erc721ApprovedAddressForId","tokenIdApproved","erc1155","erc1155ApprovalForAll","pow","approveAsset","approve","erc20ApprovalTxPromise","setApprovalForAll","estimateGasForApproval","estimateGas","getSignatureTypeFromSignature","estimateGasForFillOrder","_overrides","fillOrder","estimatedGasRequiredForFill","convertDecodedAssetDataToUserFacingAssets","decodedAssetData","assetAmount","decodedErc20","swappableErc20","decodedErc721","swappableErc721","decodedErc1155","swappableErc1155","multiAssetDecodedData","nestedAssets","flatten","idx","nestedAssetsWithCorrectAmounts","nestedAsset","nestedAssetValueFromMultiAsset","getAssetsFromOrder","decodedMakerAssetData","decodedTakerAssetData","getZeroExAddressesForChain","addresses","defaultAddresses","chainIdString","maybeAddressesForChain","getProxyAddressForErcType","zeroExAddresses","erc20Proxy","erc721Proxy","erc1155Proxy","getForwarderAddress","forwarder","getWrappedNativeToken","wrappedNativeToken","DEFAUTLT_GAS_BUFFER_MULTIPLES","Polygon","PolygonMumbai","Kovan","sleep","t","resolve","timeout","setTimeout","clearTimeout","NftSwapV3","additionalConfig","_cancelOrder","timeoutInMs","pollOrderStatusFrequencyInMs","throwIfStatusOtherThanFillableOrFilled","settled","timeoutPromise","then","orderStatusRefreshPromiseFn","Fillable","FullyFilled","fillEventListenerFn","orderStatusRefreshPromiseLoop","fillEventPromise","any","_getOrderInfo","txHash","waitForTransaction","addressOfWalletSigningOrder","signerOverride","signerToUser","_signOrder","userConfig","defaultConfig","config","_buildOrder","assetInternalFmt","_getApprovalStatus","_hashOrder","_getAssetsFromOrder","wrappedNativeTokenContractAddress","warning","erc20TokenAddress","invariant","fillOverrides","transactionOverrides","gasBufferMultiple","gasAmountBufferMultiple","getGasMultipleForChainId","_estimateGasForFillOrder","estimatedGasAmount","maybeCustomGasLimit","Math","floor","toNumber","allTxOverrides","gasLimit","fillOrderWithNativeTokenInsteadOfWrappedToken","eligibleForNativeTokenFill","checkIfOrderCanBeFilledWithNativeToken","forwarderContractAddress","forwarderContract","amountOfEthToFillWith","marketBuyOrdersWithEth","_fillSignedOrder","gasBufferMultiples","normalizedOrder","_normalizeOrder","_verifyOrderSignature","_network","chainDefaultContractAddresses","zeroExExchangeContractAddress","exchange","erc20ProxyContractAddress","erc721ProxyContractAddress","erc1155ProxyContractAddress","approveTokenOrNftByAsset","_walletAddress","approvalTransactionOverrides","otherOverrides","exchangeProxyContractAddressForAsset","signerToUse","_estimateGasForApproval","_approveAsset","EIP712_DOMAIN_PARAMETERS","ERC721ORDER_STRUCT_NAME","ERC721ORDER_STRUCT_ABI","EIP1155_DOMAIN_PARAMETERS","ERC1155ORDER_STRUCT_NAME","ERC1155ORDER_STRUCT_ABI","FEE_ABI","PROPERTY_ABI","ETH_ADDRESS_AS_ERC20","NATIVE_TOKEN_ADDRESS_AS_ERC20","erc1155Token","Fee","Property","erc721Token","txOverrides","approvalOrderrides","approvalOnlyTokenIdIfErc721","erc721ApprovalForOnlyTokenId","parseRawSignature","hexSize","VALID_V_VALUES","parseInt","slice","includes","INFINITE_EXPIRATION_TIMESTAMP_SEC","generateErc721Order","nft","orderData","expiry","erc721Order","erc721TokenId","direction","erc20Token","erc20TokenAmount","erc721TokenProperties","tokenProperties","property","propertyData","propertyValidator","fees","recipient","feeData","nonce","generateRandomV4OrderNonce","appId","taker","generateErc1155Order","erc1155Order","erc1155TokenId","erc1155TokenAmount","erc1155TokenProperties","fee","ONE_TWENTY_EIGHT_BIT_LENGTH","TWO_FIFTY_SIX_BIT_LENGTH","checkIfStringContainsOnlyNumbers","onlyNumbers","test","RESERVED_APP_ID_PREFIX","RESERVED_APP_ID_PREFIX_DIGITS","DEFAULT_APP_ID","verifyAppIdOrThrow","isCorrectLength","hasOnlyNumbers","order128","padStart","generateRandom128BitNumber","appId128","padEnd","final256BitNonce","base","hex","v4","replace","BigInt","valueBase10String","serializeNftOrder","ERC721_TRANSFER_FROM_DATA","ERC1155_TRANSFER_FROM_DATA","ORDERBOOK_API_ROOT_URL_PRODUCTION","postOrderToOrderbook","metadata","requestOptions","fetchFn","unfetch","payload","rootUrl","headers","body","JSON","stringify","res","ok","json","status","err","orderPostResult","searchOrderbook","filters","stringifiedQueryParams","arrayFormat","findOrdersResult","TradeDirection","OrderStatusV4","DIRECTION_MAPPING","BuyNFT","SellNFT","CONTRACT_ORDER_VALIDATOR","SupportedChainIdsV4","SupportedChainsForV4OrderbookStatusMonitoring","Ropsten","Mainnet","Optimism","NftSwapV4","approvalOverrides","exchangeProxy","orderType","cancelERC721Order","cancelERC1155Order","signedOrders","revertIfIncomplete","allSellOrders","every","allErc721","allErc1155","eitherAllErc721OrErc1155Orders","erc721SignedOrders","batchBuyERC721s","so","erc1155SignedOrders","batchBuyERC1155s","getERC721OrderHash","getERC1155OrderHash","getERC721OrderStatus","erc721OrderStatus","getERC1155OrderInfo","_erc1155OrderHash","erc1155OrderStatus","_erc1155OrderAmount","signedToUse","erc20ToSell","nftCollectionToBid","buildNftAndErc20Order","sellOrBuyNft","ecSignature","fillOrderOverrides","getAddress","unwrapWeth","erc721Contract","encodingIface","fragment","getFunction","_encodeParams","tokenIdToSellForCollectionOrder","transferFromTx","erc1155Contract","safeTransferFrom","canOrderTypeBeFilledWithNativeToken","isNativeToken","isErc20NativeToken","needsEthAttached","erc20TotalAmount","getErc20TotalIncludingFees","buyERC1155","unwrapNativeToken","sellERC1155","buyERC721","sellERC721","parsedChainId","supportsMonitoring","orderbookRootUrl","sellOrder","buyOrder","matchERC721Orders","contractTx","validateERC721OrderSignature","validateERC1155OrderSignature","balanceOf","ownerOf","owner","takerWalletAddress","getTakerAsset","loadApprovalStatus","takerApprovalStatus","fetchBalanceForAsset","takerBalance","hasBalance","isApproved","canOrderBeFilled","approvalStatus","balance","getMakerAsset","makerApprovalStatus","makerBalance","feesTotal","forEach","add","getTotalFees","orderTotalCost","defaultAddressesForChain","zeroExExchangeProxyContractAddress","exchangeProxyContractAddress"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,OAAO,IAAI,UAAU,OAAO,EAAE;AAElC;AACA,EAAE,IAAI,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;AAC5B,EAAE,IAAI,MAAM,GAAG,EAAE,CAAC,cAAc,CAAC;AACjC,EAAE,IAAIA,WAAS,CAAC;AAChB,EAAE,IAAI,OAAO,GAAG,OAAO,MAAM,KAAK,UAAU,GAAG,MAAM,GAAG,EAAE,CAAC;AAC3D,EAAE,IAAI,cAAc,GAAG,OAAO,CAAC,QAAQ,IAAI,YAAY,CAAC;AACxD,EAAE,IAAI,mBAAmB,GAAG,OAAO,CAAC,aAAa,IAAI,iBAAiB,CAAC;AACvE,EAAE,IAAI,iBAAiB,GAAG,OAAO,CAAC,WAAW,IAAI,eAAe,CAAC;AACjE;AACA,EAAE,SAAS,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACnC,IAAI,MAAM,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,EAAE;AACpC,MAAM,KAAK,EAAE,KAAK;AAClB,MAAM,UAAU,EAAE,IAAI;AACtB,MAAM,YAAY,EAAE,IAAI;AACxB,MAAM,QAAQ,EAAE,IAAI;AACpB,KAAK,CAAC,CAAC;AACP,IAAI,OAAO,GAAG,CAAC,GAAG,CAAC,CAAC;AACpB,GAAG;AACH,EAAE,IAAI;AACN;AACA,IAAI,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AACnB,GAAG,CAAC,OAAO,GAAG,EAAE;AAChB,IAAI,MAAM,GAAG,SAAS,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE;AACvC,MAAM,OAAO,GAAG,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;AAC9B,KAAK,CAAC;AACN,GAAG;AACH;AACA,EAAE,SAAS,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE;AACrD;AACA,IAAI,IAAI,cAAc,GAAG,OAAO,IAAI,OAAO,CAAC,SAAS,YAAY,SAAS,GAAG,OAAO,GAAG,SAAS,CAAC;AACjG,IAAI,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;AAC5D,IAAI,IAAI,OAAO,GAAG,IAAI,OAAO,CAAC,WAAW,IAAI,EAAE,CAAC,CAAC;AACjD;AACA;AACA;AACA,IAAI,SAAS,CAAC,OAAO,GAAG,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACjE;AACA,IAAI,OAAO,SAAS,CAAC;AACrB,GAAG;AACH,EAAE,OAAO,CAAC,IAAI,GAAG,IAAI,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE;AAClC,IAAI,IAAI;AACR,MAAM,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC;AACxD,KAAK,CAAC,OAAO,GAAG,EAAE;AAClB,MAAM,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC;AACzC,KAAK;AACL,GAAG;AACH;AACA,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,sBAAsB,GAAG,gBAAgB,CAAC;AAChD,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC,EAAE,IAAI,iBAAiB,GAAG,WAAW,CAAC;AACtC;AACA;AACA;AACA,EAAE,IAAI,gBAAgB,GAAG,EAAE,CAAC;AAC5B;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,SAAS,GAAG,EAAE;AACzB,EAAE,SAAS,iBAAiB,GAAG,EAAE;AACjC,EAAE,SAAS,0BAA0B,GAAG,EAAE;AAC1C;AACA;AACA;AACA,EAAE,IAAI,iBAAiB,GAAG,EAAE,CAAC;AAC7B,EAAE,MAAM,CAAC,iBAAiB,EAAE,cAAc,EAAE,YAAY;AACxD,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,IAAI,QAAQ,GAAG,MAAM,CAAC,cAAc,CAAC;AACvC,EAAE,IAAI,uBAAuB,GAAG,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AAC3E,EAAE,IAAI,uBAAuB;AAC7B,MAAM,uBAAuB,KAAK,EAAE;AACpC,MAAM,MAAM,CAAC,IAAI,CAAC,uBAAuB,EAAE,cAAc,CAAC,EAAE;AAC5D;AACA;AACA,IAAI,iBAAiB,GAAG,uBAAuB,CAAC;AAChD,GAAG;AACH;AACA,EAAE,IAAI,EAAE,GAAG,0BAA0B,CAAC,SAAS;AAC/C,IAAI,SAAS,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAC3D,EAAE,iBAAiB,CAAC,SAAS,GAAG,0BAA0B,CAAC;AAC3D,EAAE,MAAM,CAAC,EAAE,EAAE,aAAa,EAAE,0BAA0B,CAAC,CAAC;AACxD,EAAE,MAAM,CAAC,0BAA0B,EAAE,aAAa,EAAE,iBAAiB,CAAC,CAAC;AACvE,EAAE,iBAAiB,CAAC,WAAW,GAAG,MAAM;AACxC,IAAI,0BAA0B;AAC9B,IAAI,iBAAiB;AACrB,IAAI,mBAAmB;AACvB,GAAG,CAAC;AACJ;AACA;AACA;AACA,EAAE,SAAS,qBAAqB,CAAC,SAAS,EAAE;AAC5C,IAAI,CAAC,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC,OAAO,CAAC,SAAS,MAAM,EAAE;AACzD,MAAM,MAAM,CAAC,SAAS,EAAE,MAAM,EAAE,SAAS,GAAG,EAAE;AAC9C,QAAQ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACzC,OAAO,CAAC,CAAC;AACT,KAAK,CAAC,CAAC;AACP,GAAG;AACH;AACA,EAAE,OAAO,CAAC,mBAAmB,GAAG,SAAS,MAAM,EAAE;AACjD,IAAI,IAAI,IAAI,GAAG,OAAO,MAAM,KAAK,UAAU,IAAI,MAAM,CAAC,WAAW,CAAC;AAClE,IAAI,OAAO,IAAI;AACf,QAAQ,IAAI,KAAK,iBAAiB;AAClC;AACA;AACA,QAAQ,CAAC,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,IAAI,MAAM,mBAAmB;AAC/D,QAAQ,KAAK,CAAC;AACd,GAAG,CAAC;AACJ;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,MAAM,CAAC,cAAc,EAAE;AAC/B,MAAM,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,0BAA0B,CAAC,CAAC;AAChE,KAAK,MAAM;AACX,MAAM,MAAM,CAAC,SAAS,GAAG,0BAA0B,CAAC;AACpD,MAAM,MAAM,CAAC,MAAM,EAAE,iBAAiB,EAAE,mBAAmB,CAAC,CAAC;AAC7D,KAAK;AACL,IAAI,MAAM,CAAC,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;AACzC,IAAI,OAAO,MAAM,CAAC;AAClB,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,GAAG,EAAE;AAChC,IAAI,OAAO,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC;AAC5B,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,aAAa,CAAC,SAAS,EAAE,WAAW,EAAE;AACjD,IAAI,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE;AAClD,MAAM,IAAI,MAAM,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC;AAC/D,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;AAC3B,OAAO,MAAM;AACb,QAAQ,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AAChC,QAAQ,IAAI,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;AACjC,QAAQ,IAAI,KAAK;AACjB,YAAY,OAAO,KAAK,KAAK,QAAQ;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,EAAE;AAC3C,UAAU,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,EAAE;AACzE,YAAY,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACnD,WAAW,EAAE,SAAS,GAAG,EAAE;AAC3B,YAAY,MAAM,CAAC,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAClD,WAAW,CAAC,CAAC;AACb,SAAS;AACT;AACA,QAAQ,OAAO,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,SAAS,SAAS,EAAE;AACnE;AACA;AACA;AACA,UAAU,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;AACnC,UAAU,OAAO,CAAC,MAAM,CAAC,CAAC;AAC1B,SAAS,EAAE,SAAS,KAAK,EAAE;AAC3B;AACA;AACA,UAAU,OAAO,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AACzD,SAAS,CAAC,CAAC;AACX,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,eAAe,CAAC;AACxB;AACA,IAAI,SAAS,OAAO,CAAC,MAAM,EAAE,GAAG,EAAE;AAClC,MAAM,SAAS,0BAA0B,GAAG;AAC5C,QAAQ,OAAO,IAAI,WAAW,CAAC,SAAS,OAAO,EAAE,MAAM,EAAE;AACzD,UAAU,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAC/C,SAAS,CAAC,CAAC;AACX,OAAO;AACP;AACA,MAAM,OAAO,eAAe;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,eAAe,GAAG,eAAe,CAAC,IAAI;AAC9C,UAAU,0BAA0B;AACpC;AACA;AACA,UAAU,0BAA0B;AACpC,SAAS,GAAG,0BAA0B,EAAE,CAAC;AACzC,KAAK;AACL;AACA;AACA;AACA,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;AAC3B,GAAG;AACH;AACA,EAAE,qBAAqB,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;AACjD,EAAE,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,mBAAmB,EAAE,YAAY;AACnE,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL,EAAE,OAAO,CAAC,aAAa,GAAG,aAAa,CAAC;AACxC;AACA;AACA;AACA;AACA,EAAE,OAAO,CAAC,KAAK,GAAG,SAAS,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE;AAC7E,IAAI,IAAI,WAAW,KAAK,KAAK,CAAC,EAAE,WAAW,GAAG,OAAO,CAAC;AACtD;AACA,IAAI,IAAI,IAAI,GAAG,IAAI,aAAa;AAChC,MAAM,IAAI,CAAC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC;AAC/C,MAAM,WAAW;AACjB,KAAK,CAAC;AACN;AACA,IAAI,OAAO,OAAO,CAAC,mBAAmB,CAAC,OAAO,CAAC;AAC/C,QAAQ,IAAI;AACZ,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,SAAS,MAAM,EAAE;AAC1C,UAAU,OAAO,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,EAAE,CAAC;AAC1D,SAAS,CAAC,CAAC;AACX,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,gBAAgB,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE;AACpD,IAAI,IAAI,KAAK,GAAG,sBAAsB,CAAC;AACvC;AACA,IAAI,OAAO,SAAS,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE;AACxC,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,MAAM,IAAI,KAAK,CAAC,8BAA8B,CAAC,CAAC;AACxD,OAAO;AACP;AACA,MAAM,IAAI,KAAK,KAAK,iBAAiB,EAAE;AACvC,QAAQ,IAAI,MAAM,KAAK,OAAO,EAAE;AAChC,UAAU,MAAM,GAAG,CAAC;AACpB,SAAS;AACT;AACA;AACA;AACA,QAAQ,OAAO,UAAU,EAAE,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC9B,MAAM,OAAO,CAAC,GAAG,GAAG,GAAG,CAAC;AACxB;AACA,MAAM,OAAO,IAAI,EAAE;AACnB,QAAQ,IAAI,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;AACxC,QAAQ,IAAI,QAAQ,EAAE;AACtB,UAAU,IAAI,cAAc,GAAG,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACtE,UAAU,IAAI,cAAc,EAAE;AAC9B,YAAY,IAAI,cAAc,KAAK,gBAAgB,EAAE,SAAS;AAC9D,YAAY,OAAO,cAAc,CAAC;AAClC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,EAAE;AACvC;AACA;AACA,UAAU,OAAO,CAAC,IAAI,GAAG,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC;AACrD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC/C,UAAU,IAAI,KAAK,KAAK,sBAAsB,EAAE;AAChD,YAAY,KAAK,GAAG,iBAAiB,CAAC;AACtC,YAAY,MAAM,OAAO,CAAC,GAAG,CAAC;AAC9B,WAAW;AACX;AACA,UAAU,OAAO,CAAC,iBAAiB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACjD;AACA,SAAS,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AAChD,UAAU,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAChD,SAAS;AACT;AACA,QAAQ,KAAK,GAAG,iBAAiB,CAAC;AAClC;AACA,QAAQ,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;AACtD,QAAQ,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AACtC;AACA;AACA,UAAU,KAAK,GAAG,OAAO,CAAC,IAAI;AAC9B,cAAc,iBAAiB;AAC/B,cAAc,sBAAsB,CAAC;AACrC;AACA,UAAU,IAAI,MAAM,CAAC,GAAG,KAAK,gBAAgB,EAAE;AAC/C,YAAY,SAAS;AACrB,WAAW;AACX;AACA,UAAU,OAAO;AACjB,YAAY,KAAK,EAAE,MAAM,CAAC,GAAG;AAC7B,YAAY,IAAI,EAAE,OAAO,CAAC,IAAI;AAC9B,WAAW,CAAC;AACZ;AACA,SAAS,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AAC5C,UAAU,KAAK,GAAG,iBAAiB,CAAC;AACpC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACnC,UAAU,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AACnC,SAAS;AACT,OAAO;AACP,KAAK,CAAC;AACN,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE;AAClD,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACnD,IAAI,IAAI,MAAM,KAAKA,WAAS,EAAE;AAC9B;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AACtC;AACA,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;AACzC;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,QAAQ,CAAC;AACpC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,UAAU,mBAAmB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AACjD;AACA,UAAU,IAAI,OAAO,CAAC,MAAM,KAAK,OAAO,EAAE;AAC1C;AACA;AACA,YAAY,OAAO,gBAAgB,CAAC;AACpC,WAAW;AACX,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AACjC,QAAQ,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS;AACnC,UAAU,gDAAgD,CAAC,CAAC;AAC5D,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;AAClE;AACA,IAAI,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACjC,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1B;AACA,IAAI,IAAI,EAAE,IAAI,EAAE;AAChB,MAAM,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC;AAC/B,MAAM,OAAO,CAAC,GAAG,GAAG,IAAI,SAAS,CAAC,kCAAkC,CAAC,CAAC;AACtE,MAAM,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC9B,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,IAAI,IAAI,CAAC,IAAI,EAAE;AACnB;AACA;AACA,MAAM,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC;AAChD;AACA;AACA,MAAM,OAAO,CAAC,IAAI,GAAG,QAAQ,CAAC,OAAO,CAAC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,QAAQ,EAAE;AACvC,QAAQ,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAChC,QAAQ,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAChC,OAAO;AACP;AACA,KAAK,MAAM;AACX;AACA,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK;AACL;AACA;AACA;AACA,IAAI,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC5B,IAAI,OAAO,gBAAgB,CAAC;AAC5B,GAAG;AACH;AACA;AACA;AACA,EAAE,qBAAqB,CAAC,EAAE,CAAC,CAAC;AAC5B;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,iBAAiB,EAAE,WAAW,CAAC,CAAC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,cAAc,EAAE,WAAW;AACxC,IAAI,OAAO,IAAI,CAAC;AAChB,GAAG,CAAC,CAAC;AACL;AACA,EAAE,MAAM,CAAC,EAAE,EAAE,UAAU,EAAE,WAAW;AACpC,IAAI,OAAO,oBAAoB,CAAC;AAChC,GAAG,CAAC,CAAC;AACL;AACA,EAAE,SAAS,YAAY,CAAC,IAAI,EAAE;AAC9B,IAAI,IAAI,KAAK,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC;AACpC;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE;AACnB,MAAM,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AACjC,MAAM,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;AAC/B,KAAK;AACL;AACA,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;AAChC,GAAG;AACH;AACA,EAAE,SAAS,aAAa,CAAC,KAAK,EAAE;AAChC,IAAI,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC;AACxC,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC3B,IAAI,OAAO,MAAM,CAAC,GAAG,CAAC;AACtB,IAAI,KAAK,CAAC,UAAU,GAAG,MAAM,CAAC;AAC9B,GAAG;AACH;AACA,EAAE,SAAS,OAAO,CAAC,WAAW,EAAE;AAChC;AACA;AACA;AACA,IAAI,IAAI,CAAC,UAAU,GAAG,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AAC3C,IAAI,WAAW,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;AAC5C,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;AACrB,GAAG;AACH;AACA,EAAE,OAAO,CAAC,IAAI,GAAG,SAAS,MAAM,EAAE;AAClC,IAAI,IAAI,IAAI,GAAG,EAAE,CAAC;AAClB,IAAI,KAAK,IAAI,GAAG,IAAI,MAAM,EAAE;AAC5B,MAAM,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACrB,KAAK;AACL,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC;AACnB;AACA;AACA;AACA,IAAI,OAAO,SAAS,IAAI,GAAG;AAC3B,MAAM,OAAO,IAAI,CAAC,MAAM,EAAE;AAC1B,QAAQ,IAAI,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;AAC7B,QAAQ,IAAI,GAAG,IAAI,MAAM,EAAE;AAC3B,UAAU,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;AAC3B,UAAU,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC5B,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB,MAAM,OAAO,IAAI,CAAC;AAClB,KAAK,CAAC;AACN,GAAG,CAAC;AACJ;AACA,EAAE,SAAS,MAAM,CAAC,QAAQ,EAAE;AAC5B,IAAI,IAAI,QAAQ,EAAE;AAClB,MAAM,IAAI,cAAc,GAAG,QAAQ,CAAC,cAAc,CAAC,CAAC;AACpD,MAAM,IAAI,cAAc,EAAE;AAC1B,QAAQ,OAAO,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AAC7C,OAAO;AACP;AACA,MAAM,IAAI,OAAO,QAAQ,CAAC,IAAI,KAAK,UAAU,EAAE;AAC/C,QAAQ,OAAO,QAAQ,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;AACnC,QAAQ,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,GAAG,SAAS,IAAI,GAAG;AAC3C,UAAU,OAAO,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE;AACxC,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;AAC1C,cAAc,IAAI,CAAC,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;AACvC,cAAc,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAChC,cAAc,OAAO,IAAI,CAAC;AAC1B,aAAa;AACb,WAAW;AACX;AACA,UAAU,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACjC,UAAU,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAC3B;AACA,UAAU,OAAO,IAAI,CAAC;AACtB,SAAS,CAAC;AACV;AACA,QAAQ,OAAO,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AAChC,OAAO;AACP,KAAK;AACL;AACA;AACA,IAAI,OAAO,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC;AAChC,GAAG;AACH,EAAE,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAC1B;AACA,EAAE,SAAS,UAAU,GAAG;AACxB,IAAI,OAAO,EAAE,KAAK,EAAEA,WAAS,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;AAC5C,GAAG;AACH;AACA,EAAE,OAAO,CAAC,SAAS,GAAG;AACtB,IAAI,WAAW,EAAE,OAAO;AACxB;AACA,IAAI,KAAK,EAAE,SAAS,aAAa,EAAE;AACnC,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB,MAAM,IAAI,CAAC,IAAI,GAAG,CAAC,CAAC;AACpB;AACA;AACA,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,KAAK,GAAGA,WAAS,CAAC;AACzC,MAAM,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AACxB,MAAM,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC3B,MAAM,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC3B;AACA,MAAM,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;AAC7C;AACA,MAAM,IAAI,CAAC,aAAa,EAAE;AAC1B,QAAQ,KAAK,IAAI,IAAI,IAAI,IAAI,EAAE;AAC/B;AACA,UAAU,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG;AACpC,cAAc,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC;AACrC,cAAc,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE;AACtC,YAAY,IAAI,CAAC,IAAI,CAAC,GAAGA,WAAS,CAAC;AACnC,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,IAAI,EAAE,WAAW;AACrB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;AACvB;AACA,MAAM,IAAI,SAAS,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACzC,MAAM,IAAI,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC;AAC5C,MAAM,IAAI,UAAU,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,QAAQ,MAAM,UAAU,CAAC,GAAG,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,IAAI,CAAC;AACvB,KAAK;AACL;AACA,IAAI,iBAAiB,EAAE,SAAS,SAAS,EAAE;AAC3C,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACrB,QAAQ,MAAM,SAAS,CAAC;AACxB,OAAO;AACP;AACA,MAAM,IAAI,OAAO,GAAG,IAAI,CAAC;AACzB,MAAM,SAAS,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE;AACnC,QAAQ,MAAM,CAAC,IAAI,GAAG,OAAO,CAAC;AAC9B,QAAQ,MAAM,CAAC,GAAG,GAAG,SAAS,CAAC;AAC/B,QAAQ,OAAO,CAAC,IAAI,GAAG,GAAG,CAAC;AAC3B;AACA,QAAQ,IAAI,MAAM,EAAE;AACpB;AACA;AACA,UAAU,OAAO,CAAC,MAAM,GAAG,MAAM,CAAC;AAClC,UAAU,OAAO,CAAC,GAAG,GAAGA,WAAS,CAAC;AAClC,SAAS;AACT;AACA,QAAQ,OAAO,CAAC,EAAE,MAAM,CAAC;AACzB,OAAO;AACP;AACA,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACtC;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC;AACA;AACA;AACA,UAAU,OAAO,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,SAAS;AACT;AACA,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,EAAE;AACvC,UAAU,IAAI,QAAQ,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;AACxD,UAAU,IAAI,UAAU,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;AAC5D;AACA,UAAU,IAAI,QAAQ,IAAI,UAAU,EAAE;AACtC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa,MAAM,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AACrD,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM,IAAI,QAAQ,EAAE;AAC/B,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,QAAQ,EAAE;AAC5C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;AAClD,aAAa;AACb;AACA,WAAW,MAAM,IAAI,UAAU,EAAE;AACjC,YAAY,IAAI,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC9C,cAAc,OAAO,MAAM,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;AAC9C,aAAa;AACb;AACA,WAAW,MAAM;AACjB,YAAY,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;AACtE,WAAW;AACX,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,IAAI,EAAE,GAAG,EAAE;AAChC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI;AACrC,YAAY,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,YAAY,CAAC;AAC5C,YAAY,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC,UAAU,EAAE;AAC1C,UAAU,IAAI,YAAY,GAAG,KAAK,CAAC;AACnC,UAAU,MAAM;AAChB,SAAS;AACT,OAAO;AACP;AACA,MAAM,IAAI,YAAY;AACtB,WAAW,IAAI,KAAK,OAAO;AAC3B,WAAW,IAAI,KAAK,UAAU,CAAC;AAC/B,UAAU,YAAY,CAAC,MAAM,IAAI,GAAG;AACpC,UAAU,GAAG,IAAI,YAAY,CAAC,UAAU,EAAE;AAC1C;AACA;AACA,QAAQ,YAAY,GAAG,IAAI,CAAC;AAC5B,OAAO;AACP;AACA,MAAM,IAAI,MAAM,GAAG,YAAY,GAAG,YAAY,CAAC,UAAU,GAAG,EAAE,CAAC;AAC/D,MAAM,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;AACzB,MAAM,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;AACvB;AACA,MAAM,IAAI,YAAY,EAAE;AACxB,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7B,QAAQ,IAAI,CAAC,IAAI,GAAG,YAAY,CAAC,UAAU,CAAC;AAC5C,QAAQ,OAAO,gBAAgB,CAAC;AAChC,OAAO;AACP;AACA,MAAM,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AACnC,KAAK;AACL;AACA,IAAI,QAAQ,EAAE,SAAS,MAAM,EAAE,QAAQ,EAAE;AACzC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACnC,QAAQ,MAAM,MAAM,CAAC,GAAG,CAAC;AACzB,OAAO;AACP;AACA,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO;AACjC,UAAU,MAAM,CAAC,IAAI,KAAK,UAAU,EAAE;AACtC,QAAQ,IAAI,CAAC,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC;AAC/B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,EAAE;AAC3C,QAAQ,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;AAC1C,QAAQ,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B,QAAQ,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;AAC1B,OAAO,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,QAAQ,EAAE;AACvD,QAAQ,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL;AACA,IAAI,MAAM,EAAE,SAAS,UAAU,EAAE;AACjC,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,UAAU,KAAK,UAAU,EAAE;AAC7C,UAAU,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;AAC1D,UAAU,aAAa,CAAC,KAAK,CAAC,CAAC;AAC/B,UAAU,OAAO,gBAAgB,CAAC;AAClC,SAAS;AACT,OAAO;AACP,KAAK;AACL;AACA,IAAI,OAAO,EAAE,SAAS,MAAM,EAAE;AAC9B,MAAM,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE;AAC5D,QAAQ,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;AACvC,QAAQ,IAAI,KAAK,CAAC,MAAM,KAAK,MAAM,EAAE;AACrC,UAAU,IAAI,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC;AACxC,UAAU,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,EAAE;AACvC,YAAY,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC;AACpC,YAAY,aAAa,CAAC,KAAK,CAAC,CAAC;AACjC,WAAW;AACX,UAAU,OAAO,MAAM,CAAC;AACxB,SAAS;AACT,OAAO;AACP;AACA;AACA;AACA,MAAM,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;AAC/C,KAAK;AACL;AACA,IAAI,aAAa,EAAE,SAAS,QAAQ,EAAE,UAAU,EAAE,OAAO,EAAE;AAC3D,MAAM,IAAI,CAAC,QAAQ,GAAG;AACtB,QAAQ,QAAQ,EAAE,MAAM,CAAC,QAAQ,CAAC;AAClC,QAAQ,UAAU,EAAE,UAAU;AAC9B,QAAQ,OAAO,EAAE,OAAO;AACxB,OAAO,CAAC;AACR;AACA,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,MAAM,EAAE;AAClC;AACA;AACA,QAAQ,IAAI,CAAC,GAAG,GAAGA,WAAS,CAAC;AAC7B,OAAO;AACP;AACA,MAAM,OAAO,gBAAgB,CAAC;AAC9B,KAAK;AACL,GAAG,CAAC;AACJ;AACA;AACA;AACA;AACA;AACA,EAAE,OAAO,OAAO,CAAC;AACjB;AACA,CAAC;AACD;AACA;AACA;AACA;AACA,GAA+B,MAAM,CAAC,OAAO,CAAK;AAClD,CAAC,CAAC,CAAC;AACH;AACA,IAAI;AACJ,EAAE,kBAAkB,GAAG,OAAO,CAAC;AAC/B,CAAC,CAAC,OAAO,oBAAoB,EAAE;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;AACtC,IAAI,UAAU,CAAC,kBAAkB,GAAG,OAAO,CAAC;AAC5C,GAAG,MAAM;AACT,IAAI,QAAQ,CAAC,GAAG,EAAE,wBAAwB,CAAC,CAAC,OAAO,CAAC,CAAC;AACrD,GAAG;AACH;;;ACjuBO,IAAMC,WAAW,gBAAGC,mBAAS,CAACC,IAAV,CAAe,CAAf,CAApB;AACP,AAEO,IAAMC,YAAY,GAAG,4CAArB;AACP,AAAO,IAAMC,UAAU,GAAG,IAAnB;;ACiCP,WAAYC;AACVA,EAAAA,qBAAA,eAAA;AACAA,EAAAA,sBAAA,eAAA;AACAA,EAAAA,0BAAA,eAAA;AACAA,EAAAA,uBAAA,eAAA;AACAA,EAAAA,0BAAA,eAAA;AACAA,EAAAA,2BAAA,eAAA;AACD,CAPD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;AASA,WAAYC;AACVA,EAAAA,uDAAA,YAAA;AACAA,EAAAA,uDAAA,YAAA;AACAA,EAAAA,uDAAA,YAAA;AACAA,EAAAA,sDAAA,UAAA;AACAA,EAAAA,0DAAA,YAAA;AACAA,EAAAA,oDAAA,QAAA;AACAA,EAAAA,yDAAA,YAAA;AACAA,EAAAA,iEAAA,kBAAA;AACAA,EAAAA,6DAAA,cAAA;AACAA,EAAAA,+DAAA,iBAAA;AACAA,EAAAA,6DAAA,eAAA;AACD,CAZD,EAAYA,2BAAmB,KAAnBA,2BAAmB,KAAA,CAA/B;;AAoBA,WAAYC;AACVA,EAAAA,2CAAA,YAAA;AACAA,EAAAA,2DAAA,4BAAA;AACAA,EAAAA,2DAAA,4BAAA;AACAA,EAAAA,4CAAA,aAAA;AACAA,EAAAA,2CAAA,YAAA;AACAA,EAAAA,+CAAA,gBAAA;AACAA,EAAAA,6CAAA,cAAA;AACD,CARD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;;AAUA,IAAaC,qBAAqB,GAAG;AACnC,KAAG,SADgC;AAEnC,KAAG,yBAFgC;AAGnC,KAAG,yBAHgC;AAInC,KAAG,UAJgC;AAKnC,KAAG,SALgC;AAMnC,KAAG,aANgC;AAOnC,KAAG;AAPgC,CAA9B;AA4KP;AAAA,WAAYC;AACVA,EAAAA,4DAAA,oCAAA;AACD,CAFD,EAAYA,iCAAyB,KAAzBA,iCAAyB,KAAA,CAArC;;AAIA,WAAYC;AACVA,EAAAA,4BAAA,UAAA;AACAA,EAAAA,6BAAA,WAAA;AACAA,EAAAA,8BAAA,YAAA;AACD,CAJD,EAAYA,2BAAmB,KAAnBA,2BAAmB,KAAA,CAA/B;;AA6FA,IAAaC,YAAY,GAAG;AAC1BC,EAAAA,KAAK,EAAE,CACL;AAAEC,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,IAAI,EAAE;AAA9B,GADK,EAEL;AAAED,IAAAA,IAAI,EAAE,cAAR;AAAwBC,IAAAA,IAAI,EAAE;AAA9B,GAFK,EAGL;AAAED,IAAAA,IAAI,EAAE,qBAAR;AAA+BC,IAAAA,IAAI,EAAE;AAArC,GAHK,EAIL;AAAED,IAAAA,IAAI,EAAE,eAAR;AAAyBC,IAAAA,IAAI,EAAE;AAA/B,GAJK,EAKL;AAAED,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,IAAI,EAAE;AAAlC,GALK,EAML;AAAED,IAAAA,IAAI,EAAE,kBAAR;AAA4BC,IAAAA,IAAI,EAAE;AAAlC,GANK,EAOL;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GAPK,EAQL;AAAED,IAAAA,IAAI,EAAE,UAAR;AAAoBC,IAAAA,IAAI,EAAE;AAA1B,GARK,EASL;AAAED,IAAAA,IAAI,EAAE,uBAAR;AAAiCC,IAAAA,IAAI,EAAE;AAAvC,GATK,EAUL;AAAED,IAAAA,IAAI,EAAE,MAAR;AAAgBC,IAAAA,IAAI,EAAE;AAAtB,GAVK,EAWL;AAAED,IAAAA,IAAI,EAAE,gBAAR;AAA0BC,IAAAA,IAAI,EAAE;AAAhC,GAXK,EAYL;AAAED,IAAAA,IAAI,EAAE,gBAAR;AAA0BC,IAAAA,IAAI,EAAE;AAAhC,GAZK,EAaL;AAAED,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GAbK,EAcL;AAAED,IAAAA,IAAI,EAAE,mBAAR;AAA6BC,IAAAA,IAAI,EAAE;AAAnC,GAdK;AADmB,CAArB;AAwBP;AAAA,WAAYC;AACVA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,4BAAA,kBAAA;AACAA,EAAAA,4BAAA,kBAAA;AACAA,EAAAA,6BAAA,mBAAA;AACAA,EAAAA,qCAAA,4BAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,8BAAA,qBAAA;AACAA,EAAAA,6BAAA,mBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACAA,EAAAA,oCAAA,0BAAA;AACAA,EAAAA,4BAAA,kBAAA;AACAA,EAAAA,6BAAA,mBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,oCAAA,4BAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,sCAAA,6BAAA;AACAA,EAAAA,iCAAA,uBAAA;AACAA,EAAAA,6BAAA,oBAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,0CAAA,mCAAA;AACAA,EAAAA,0CAAA,mCAAA;AACAA,EAAAA,4CAAA,qCAAA;AACAA,EAAAA,+BAAA,sBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,6BAAA,mBAAA;AACAA,EAAAA,8BAAA,oBAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,uCAAA,8BAAA;AACAA,EAAAA,gCAAA,wBAAA;AACAA,EAAAA,yCAAA,gCAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,sCAAA,+BAAA;AACAA,EAAAA,8BAAA,oBAAA;AACAA,EAAAA,qDAAA,sCAAA;AACAA,EAAAA,uDAAA,0CAAA;AACAA,EAAAA,wDAAA,2CAAA;AACAA,EAAAA,wDAAA,2CAAA;AACAA,EAAAA,iEAAA,qDAAA;AACAA,EAAAA,iEAAA,qDAAA;AACAA,EAAAA,wCAAA,+BAAA;AACAA,EAAAA,0CAAA,iCAAA;AACAA,EAAAA,qCAAA,6BAAA;AACAA,EAAAA,oCAAA,4BAAA;AACAA,EAAAA,+BAAA,sBAAA;AACAA,EAAAA,wCAAA,+BAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,oCAAA,2BAAA;AACAA,EAAAA,+BAAA,sBAAA;AACAA,EAAAA,qCAAA,4BAAA;AACAA,EAAAA,2BAAA,iBAAA;AACAA,EAAAA,8BAAA,oBAAA;AACAA,EAAAA,uCAAA,8BAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,sCAAA,6BAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,oCAAA,4BAAA;AACAA,EAAAA,oCAAA,mBAAA;AACAA,EAAAA,8BAAA,oBAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,uCAAA,uBAAA;AACAA,EAAAA,mCAAA,2BAAA;AACAA,EAAAA,gDAAA,yCAAA;AACAA,EAAAA,kCAAA,yBAAA;AACAA,EAAAA,4DAAA,yDAAA;AACAA,EAAAA,sCAAA,+BAAA;AACAA,EAAAA,wCAAA,iCAAA;AACAA,EAAAA,wCAAA,+BAAA;AACAA,EAAAA,+BAAA,qBAAA;AACAA,EAAAA,6BAAA,mBAAA;AACAA,EAAAA,wCAAA,iCAAA;AACAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,2CAAA,oCAAA;AACAA,EAAAA,qCAAA,2BAAA;AACAA,EAAAA,wCAAA,kCAAA;AACAA,EAAAA,8CAAA,yCAAA;AACAA,EAAAA,4CAAA,qCAAA;AACAA,EAAAA,gCAAA,sBAAA;AACAA,EAAAA,gCAAA,sBAAA;AACAA,EAAAA,gCAAA,uBAAA;AACAA,EAAAA,mCAAA,0BAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,sCAAA,8BAAA;AACAA,EAAAA,2CAAA,oCAAA;AACAA,EAAAA,6BAAA,oBAAA;AACAA,EAAAA,0CAAA,kCAAA;AACAA,EAAAA,mCAAA,yBAAA;AACAA,EAAAA,iCAAA,uBAAA;AACAA,EAAAA,iCAAA,wBAAA;AACAA,EAAAA,yCAAA,iCAAA;AACAA,EAAAA,wCAAA,gCAAA;AACAA,EAAAA,oCAAA,2BAAA;AACAA,EAAAA,oCAAA,4BAAA;AACD,CAxGD,EAAYA,oBAAY,KAAZA,oBAAY,KAAA,CAAxB;;ACtXO,IAAMC,yBAAyB,GACpC,4CADK;AAGP,AAAO,IAAMC,sBAAsB,gBAAGhB,mBAAS,CAACC,IAAV,CAAe,UAAf,CAA/B;AAEP,AAAO,IAAMgB,YAAY,GAAG,SAAfA,YAAe,CAC1BC,OAD0B,EAE1BC,uBAF0B;AAAA,SAGX;AACfP,IAAAA,IAAI,EAAE,aADS;AAEfQ,IAAAA,OAAO,EAAE,OAFM;AAGfF,IAAAA,OAAO,EAAEA,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAHM;AAIfC,IAAAA,iBAAiB,EAAEH;AAJJ,GAHW;AAAA,CAArB;AAUP,AAWO,IAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD;;;AAC5B,SAAO;AACLC,IAAAA,YAAY,EAAED,KAAK,CAACC,YAAN,CAAmBC,WAAnB,EADT;AAELC,IAAAA,YAAY,EAAEH,KAAK,CAACG,YAAN,CAAmBD,WAAnB,EAFT;AAGLE,IAAAA,mBAAmB,EAAEJ,KAAK,CAACI,mBAAN,CAA0BF,WAA1B,EAHhB;AAILG,IAAAA,aAAa,EAAEL,KAAK,CAACK,aAAN,CAAoBH,WAApB,EAJV;AAKLI,IAAAA,gBAAgB,EAAEN,KAAK,CAACM,gBAAN,CAAuBT,QAAvB,EALb;AAMLU,IAAAA,gBAAgB,EAAEP,KAAK,CAACO,gBAAN,CAAuBV,QAAvB,EANb;AAOLW,IAAAA,QAAQ,EAAER,KAAK,CAACQ,QAAN,CAAeX,QAAf,EAPL;AAQLY,IAAAA,QAAQ,EAAET,KAAK,CAACS,QAAN,CAAeZ,QAAf,EARL;AASLa,IAAAA,qBAAqB,EAAEV,KAAK,CAACU,qBAAN,CAA4Bb,QAA5B,EATlB;AAULc,IAAAA,IAAI,EAAEX,KAAK,CAACW,IAAN,CAAWd,QAAX,EAVD;AAWLe,IAAAA,cAAc,EAAEZ,KAAK,CAACY,cAAN,CAAqBV,WAArB,EAXX;AAYLW,IAAAA,cAAc,EAAEb,KAAK,CAACa,cAAN,CAAqBX,WAArB,EAZX;AAaLY,IAAAA,iBAAiB,EAAEd,KAAK,CAACc,iBAAN,CAAwBZ,WAAxB,EAbd;AAcLa,IAAAA,iBAAiB,EAAEf,KAAK,CAACe,iBAAN,CAAwBb,WAAxB,EAdd;AAeLc,IAAAA,SAAS,sBAAEhB,KAAK,CAACgB,SAAR,qBAAE,iBAAiBd,WAAjB;AAfN,GAAP;AAiBD,CAlBM;AAoBP,AAAO,IAAMe,2BAA2B,GAAG,SAA9BA,2BAA8B,CAACC,WAAD;AAiBzC,MACEZ,gBADF,GAcIY,WAdJ,CACEZ,gBADF;AAAA,MAEEC,gBAFF,GAcIW,WAdJ,CAEEX,gBAFF;AAAA,MAGEN,YAHF,GAcIiB,WAdJ,CAGEjB,YAHF;AAAA,MAIEW,cAJF,GAcIM,WAdJ,CAIEN,cAJF;AAAA,MAKEC,cALF,GAcIK,WAdJ,CAKEL,cALF;AAAA,MAMEV,YANF,GAcIe,WAdJ,CAMEf,YANF;AAAA,MAOEgB,UAPF,GAcID,WAdJ,CAOEC,UAPF;AAAA,MAQER,IARF,GAcIO,WAdJ,CAQEP,IARF;AAAA,MASEP,mBATF,GAcIc,WAdJ,CASEd,mBATF;AAAA,MAUEU,iBAVF,GAcII,WAdJ,CAUEJ,iBAVF;AAAA,MAWEC,iBAXF,GAcIG,WAdJ,CAWEH,iBAXF;AAAA,MAYEP,QAZF,GAcIU,WAdJ,CAYEV,QAZF;AAAA,MAaEC,QAbF,GAcIS,WAdJ,CAaET,QAbF;AAgBA,MAAMC,qBAAqB,GAAGS,UAAU,GACpC3C,mBAAS,CAACC,IAAV,CAAe2C,WAAW,CAACD,UAAD,CAA1B,CADoC,GAEpC3B,sBAFJ;AAIA,MAAMQ,KAAK,GAAgB;AACzBC,IAAAA,YAAY,EAAZA,YADyB;AAEzBK,IAAAA,gBAAgB,EAAEA,gBAAgB,CAACT,QAAjB,EAFO;AAGzBe,IAAAA,cAAc,EAAdA,cAHyB;AAIzBT,IAAAA,YAAY,EAAEA,YAAY,IAAIzB,YAJL;AAKzB6B,IAAAA,gBAAgB,EAAEA,gBAAgB,CAACV,QAAjB,EALO;AAMzBgB,IAAAA,cAAc,EAAdA,cANyB;AAOzBH,IAAAA,qBAAqB,EAAEA,qBAAqB,CAACb,QAAtB,EAPE;AAQzB;AACAQ,IAAAA,aAAa,EAAE3B,YATU;AAUzB0B,IAAAA,mBAAmB,EAAEA,mBAAF,WAAEA,mBAAF,GAAyBb,yBAVnB;AAWzBoB,IAAAA,IAAI,EAAEA,IAAF,WAAEA,IAAF,GAAUU,gBAAgB,EAXL;AAYzBP,IAAAA,iBAAiB,EAAEA,iBAAF,WAAEA,iBAAF,GAAuBnC,UAZf;AAazBoC,IAAAA,iBAAiB,EAAEA,iBAAF,WAAEA,iBAAF,GAAuBpC,UAbf;AAczB6B,IAAAA,QAAQ,EAAEA,QAAF,WAAEA,QAAF,GAAcjC,WAAW,CAACsB,QAAZ,EAdG;AAezBY,IAAAA,QAAQ,EAAEA,QAAF,WAAEA,QAAF,GAAclC,WAAW,CAACsB,QAAZ;AAfG,GAA3B;AAkBA,SAAOG,KAAP;AACD,CAxDM;AA0DP,AAAO,IAAMsB,qBAAqB,GAAG,SAAxBA,qBAAwB;AACnC,MAAMC,QAAQ,GAAGH,WAAW,CAAC,IAAII,IAAJ,EAAD,CAA5B;AACA,SAAOD,QAAQ,CAAC1B,QAAT,CAAkB,EAAlB,CAAP;AACD,CAHM;;AAKP,IAAMwB,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACI,mBAAD;AACvB,MAAIA,mBAAJ,EAAyB;AACvB,WAAOA,mBAAP;AACD;;AACD,SAAOH,qBAAqB,EAA5B;AACD,CALD;;ACxHA;AACA;IASMI;;;AAKJ;;;;AAIA,uBAAYC,OAAZ,EAA6BC,OAA7B;;;AACE,8BAAMD,OAAO,IAAI,EAAjB;;AAEA,QAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,KAAK,IAA/C,EAAqD;AACnD,UAAIA,OAAO,CAACC,IAAZ,EAAkB,MAAKA,IAAL,GAAYC,MAAM,CAACF,OAAO,CAACC,IAAT,CAAlB;AAClB,UAAID,OAAO,CAACG,QAAZ,EAAsB,MAAKA,QAAL,GAAgB,IAAhB;AACtB,UAAIH,OAAO,aAAX,EAAuB,qBAAiB,IAAjB;AACvB,UAAIA,OAAO,CAACI,KAAZ,EAAmB,MAAKA,KAAL,GAAaJ,OAAO,CAACI,KAArB;AACpB;;AAED,QAAIC,KAAK,CAACC,iBAAV,EAA6B;AAC3BD,MAAAA,KAAK,CAACC,iBAAN,gCAA8B,MAAKC,WAAnC;AACD;;;AACF;;;iCAtBuBF;;IAyBpBG;;;AACJ,oCAAYC,SAAZ;;;AACE,QAAMR,IAAI,GAAG,0BAAb;AACA,iEAA+BQ,SAA/B,WAA+BA,SAA/B,GAA4C,SAA5C,GAAyD;AACvDN,MAAAA,QAAQ,EAAE,IAD6C;AAEvDF,MAAAA,IAAI,EAAJA;AAFuD,KAAzD;AAIA,WAAKzC,IAAL,GAAYyC,IAAZ;;AACD;;;EARoCH;;IAWjCY;;;AACJ,8BAAY5C,OAAZ;;;AACE,QAAMmC,IAAI,GAAG,oBAAb;AACA,8DACwBnC,OADxB,8EAEE;AACEqC,MAAAA,QAAQ,EAAE,IADZ;AAEEF,MAAAA,IAAI,EAAJA;AAFF,KAFF;AAOA,WAAKzC,IAAL,GAAYyC,IAAZ;;AACD;;;EAX8BH;;AC5C1B,IAAMa,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,CAAD;AAC/B,SAAOhE,mBAAS,CAACC,IAAV,CAAe+D,CAAf,CAAP;AACD,CAFM;AAIP,AAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAACC,GAAD;AACnC,SAAOA,GAAG,CAACC,GAAJ,CAAQJ,iBAAR,CAAP;AACD,CAFM;;ICeMK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,YAAD;AAAA,SAClCC,eAAS,CAAC,CACRlE,oBAAY,CAACmE,KADL,EAERC,mBAAe,CAACC,MAAhB,CAAuB,CAAC,SAAD,CAAvB,EAAoC,CAACJ,YAAD,CAApC,CAFQ,CAAD,CADyB;AAAA,CAA7B;AAMP,IAAaK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCC,gBADkC;AAGlC,MAAMC,MAAM,GAAGC,mBAAa,CAACF,gBAAD,CAA5B;AACA,MAAMG,YAAY,GAAuBC,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAArD;AACA,MAAMK,IAAI,GAAGD,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,CAAzB;AACA,MAAMM,IAAI,GAAGT,mBAAe,CAACU,MAAhB,CAAuB,CAAC,SAAD,CAAvB,EAAoCF,IAApC,CAAb;AAEA,MAAMX,YAAY,GAAWY,IAAI,CAAC,CAAD,CAAjC;AACA,SAAO;AACLH,IAAAA,YAAY,EAAEA,YAAY,CAACpD,WAAb,EADT;AAEL2C,IAAAA,YAAY,EAAEA,YAAY,CAAC3C,WAAb;AAFT,GAAP;AAID,CAbM;AAeP,IAAayD,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCd,YADmC,EAEnCe,OAFmC;AAAA,SAInCd,eAAS,CAAC,CACRlE,oBAAY,CAACiF,MADL,EAERb,mBAAe,CAACC,MAAhB,CAAuB,CAAC,SAAD,EAAY,SAAZ,CAAvB,EAA+C,CAACJ,YAAD,EAAee,OAAf,CAA/C,CAFQ,CAAD,CAJ0B;AAAA,CAA9B;AASP,IAAaE,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnCX,gBADmC;AAGnC,MAAMG,YAAY,GAAuBC,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAArD;AACA,MAAMK,IAAI,GAAGD,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,CAAzB;AACA,MAAMM,IAAI,GAAGT,mBAAe,CAACU,MAAhB,CAAuB,CAAC,SAAD,EAAY,SAAZ,CAAvB,EAA+CF,IAA/C,CAAb;AAEA,MAAMX,YAAY,GAAWY,IAAI,CAAC,CAAD,CAAjC;AACA,MAAMG,OAAO,GAAcH,IAAI,CAAC,CAAD,CAA/B;AAEA,SAAO;AACLH,IAAAA,YAAY,EAAEA,YAAY,CAACpD,WAAb,EADT;AAEL2C,IAAAA,YAAY,EAAEA,YAAY,CAAC3C,WAAb,EAFT;AAGL0D,IAAAA,OAAO,EAAEA,OAAO,CAAC/D,QAAR;AAHJ,GAAP;AAKD,CAfM;AAiBP,IAAakE,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpClB,YADoC,EAEpCmB,QAFoC,EAGpCC,MAHoC,EAIpCC,YAJoC;AAAA,SAMpCpB,eAAS,CAAC,CACRlE,oBAAY,CAACuF,OADL,EAERnB,mBAAe,CAACC,MAAhB,CACE,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB,EAAsC,OAAtC,CADF,EAEE,CAACJ,YAAD,EAAemB,QAAf,EAAyBC,MAAzB,EAAiCC,YAAjC,CAFF,CAFQ,CAAD,CAN2B;AAAA,CAA/B;AAcP,IAAaE,sBAAsB,GAAG,SAAzBA,sBAAyB,CACpCjB,gBADoC;AAGpC,MAAMG,YAAY,GAAuBC,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAArD;AAEA,MAAMK,IAAI,GAAGD,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,CAAzB;AACA,MAAMM,IAAI,GAAGT,mBAAe,CAACU,MAAhB,CACX,CAAC,SAAD,EAAY,WAAZ,EAAyB,WAAzB,EAAsC,OAAtC,CADW,EAEXF,IAFW,CAAb;AAKA,MAAMX,YAAY,GAAWY,IAAI,CAAC,CAAD,CAAjC;AACA,MAAMO,QAAQ,GAAgBP,IAAI,CAAC,CAAD,CAAlC;AACA,MAAMQ,MAAM,GAAgBR,IAAI,CAAC,CAAD,CAAhC;AACA,MAAMS,YAAY,GAAWT,IAAI,CAAC,CAAD,CAAjC;AAEA,SAAO;AACLH,IAAAA,YAAY,EAAEA,YAAY,CAACpD,WAAb,EADT;AAEL2C,IAAAA,YAAY,EAAEA,YAAY,CAAC3C,WAAb,EAFT;AAGL8D,IAAAA,QAAQ,EAAEA,QAAQ,CAACrB,GAAT,CAAa,UAAC0B,EAAD;AAAA,aAAQA,EAAE,CAACxE,QAAH,EAAR;AAAA,KAAb,CAHL;AAILyE,IAAAA,WAAW,EAAEL,MAAM,CAACtB,GAAP,CAAW,UAAC4B,GAAD;AAAA,aAASA,GAAG,CAAC1E,QAAJ,EAAT;AAAA,KAAX,CAJR;AAKLqE,IAAAA,YAAY,EAAZA;AALK,GAAP;AAOD,CAvBM;AAyBP,IAAaM,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvCP,MADuC,EAEvCQ,eAFuC;AAAA,SAIvC3B,eAAS,CAAC,CACRlE,oBAAY,CAAC8F,UADL,EAER1B,mBAAe,CAACC,MAAhB,CAAuB,CAAC,WAAD,EAAc,SAAd,CAAvB,EAAiD,CAACgB,MAAD,EAASQ,eAAT,CAAjD,CAFQ,CAAD,CAJ8B;AAAA,CAAlC;AASP,IAAaE,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACxB,gBAAD;AAClC,MAAMG,YAAY,GAAuBC,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAArD;AAEA,MAAMK,IAAI,GAAGD,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,CAAzB;AACA,MAAMM,IAAI,GAAGT,mBAAe,CAACU,MAAhB,CAAuB,CAAC,WAAD,EAAc,SAAd,CAAvB,EAAiDF,IAAjD,CAAb;AAEA,MAAMS,MAAM,GAAgBR,IAAI,CAAC,CAAD,CAAhC;AACA,MAAMmB,gBAAgB,GAAanB,IAAI,CAAC,CAAD,CAAvC;AAEA,SAAO;AACLH,IAAAA,YAAY,EAAEA,YAAY,CAACpD,WAAb,EADT;AAEL2E,IAAAA,OAAO,EAAEZ,MAAM,CAACtB,GAAP,CAAW,UAAC4B,GAAD;AAAA,aAASA,GAAG,CAAC1E,QAAJ,EAAT;AAAA,KAAX,CAFJ;AAGL4E,IAAAA,eAAe,EAAEG,gBAAgB,CAACjC,GAAjB,CACf,UAAC8B,eAAD;AAAA,aACEK,eAAe,CAACL,eAAD,CADjB;AAAA,KADe;AAAA;AAHZ,GAAP;AAQD,CAjBM;AAmBP,IAAaM,eAAe,GAAG,SAAlBA,eAAkB,CAC7BC,SAD6B;AAG7B;AACA;AACAC,iCAL6B;MAK7BA;AAAAA,IAAAA,oCAA6C;;;AAE7C,UAAQD,SAAS,CAAC3F,IAAlB;AACE,SAAKJ,2BAAmB,CAAC8D,KAAzB;AACE,UAAMmC,cAAc,GAAGtC,oBAAoB,CAACoC,SAAS,CAACnC,YAAX,CAA3C;AACA,aAAOqC,cAAP;;AACF,SAAKjG,2BAAmB,CAAC4E,MAAzB;AACE,UAAMsB,eAAe,GAAGxB,qBAAqB,CAC3CqB,SAAS,CAACnC,YADiC,EAE3CrE,mBAAS,CAACC,IAAV,CAAeuG,SAAS,CAACpB,OAAzB,CAF2C,CAA7C;AAIA,aAAOuB,eAAP;;AACF,SAAKlG,2BAAmB,CAACkF,OAAzB;AACE,UAAMH,QAAQ,GAAGgB,SAAS,CAACI,MAAV,CAAiBzC,GAAjB,CAAqB,UAAC0C,CAAD;AAAA,eAAOA,CAAC,CAACzB,OAAT;AAAA,OAArB,CAAjB;AACA,UAAIU,WAAJ;;AACA,UAAIW,iCAAJ,EAAuC;AACrCX,QAAAA,WAAW,GAAGU,SAAS,CAACI,MAAV,CAAiBzC,GAAjB,CAAqB,UAAC2C,CAAD;AAAA,iBAAO,GAAP;AAAA,SAArB,CAAd;AACD,OAFD,MAEO;AACLhB,QAAAA,WAAW,GAAGU,SAAS,CAACI,MAAV,CAAiBzC,GAAjB,CAAqB,UAAC0C,CAAD;AAAA,iBAAOA,CAAC,CAACE,UAAT;AAAA,SAArB,CAAd;AACD;;AACD,UAAMC,gBAAgB,GAAGzB,sBAAsB,CAC7CiB,SAAS,CAACnC,YADmC,EAE7CJ,qBAAqB,CAACuB,QAAD,CAFwB,EAG7CvB,qBAAqB,CAAC6B,WAAD,CAHwB,EAI7C,IAJ6C;AAAA,OAA/C;AAMA,aAAOkB,gBAAP;;AACF;AACE,YAAM,IAAIvD,KAAJ,wBAA+B+C,SAA/B,oBAA+BA,SAAiB,CAAE3F,IAAlD,EAAN;AA1BJ;AA4BD,CAnCM;AAqCP,IAAayF,eAAe,GAAG,SAAlBA,eAAkB,CAC7B3B,gBAD6B;AAG7B,MAAMG,YAAY,GAAuBC,kBAAY,CAACJ,gBAAD,EAAmB,CAAnB,EAAsB,CAAtB,CAArD;;AAEA,UAAQG,YAAR;AACE,SAAK1E,oBAAY,CAACmE,KAAlB;AACE,UAAMmC,cAAc,GAAGhC,oBAAoB,CAACC,gBAAD,CAA3C;AACA,aAAO+B,cAAP;;AACF,SAAKtG,oBAAY,CAACiF,MAAlB;AACE,UAAMsB,eAAe,GAAGrB,qBAAqB,CAACX,gBAAD,CAA7C;AACA,aAAOgC,eAAP;;AACF,SAAKvG,oBAAY,CAACuF,OAAlB;AACE,UAAMqB,gBAAgB,GAAGpB,sBAAsB,CAACjB,gBAAD,CAA/C;AACA,aAAOqC,gBAAP;;AACF,SAAK5G,oBAAY,CAAC8F,UAAlB;AACE,UAAMe,cAAc,GAAGd,oBAAoB,CAACxB,gBAAD,CAA3C;AACA,aAAOsC,cAAP;;AACF;AACE,YAAM,IAAIxD,KAAJ,gCACyBqB,YADzB,oBACyBA,YAAoB,CAAEjE,IAD/C,EAAN;AAdJ;AAkBD,CAvBM;AAyBP,IAAaqG,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCV,SADgC;;;AAGhC,UAAQA,SAAS,CAAC3F,IAAlB;AACE,SAAKJ,2BAAmB,CAAC8D,KAAzB;AACE,aAAOiC,SAAS,CAACW,MAAjB;;AACF,SAAK1G,2BAAmB,CAAC4E,MAAzB;AACE,aAAO,GAAP;;AACF,SAAK5E,2BAAmB,CAACkF,OAAzB;AACE;AACA;AACA;AACA,4DAAOa,SAAS,CAACI,MAAV,CAAiB,CAAjB,CAAP,qBAAO,mBAAqBG,UAA5B,oCAA0C,GAA1C;;AACF;AACE,YAAM,IAAItD,KAAJ,wBAA+B+C,SAA/B,oBAA+BA,SAAiB,CAAE3F,IAAlD,EAAN;AAXJ;AAaD,CAhBM;AAkBP,IAAauG,4BAA4B,GAAG,SAA/BA,4BAA+B,CAC1CC,SAD0C;;;AAG1C,UAAQA,SAAS,CAACxG,IAAlB;AACE;AACA,SAAK,OAAL;AACE,aAAOwG,SAAP;AACF;;AACA,SAAK,QAAL;AACE,aAAOA,SAAP;AACF;AACA;;AACA,SAAK,SAAL;AACE,UAAMC,wBAAwB,GAAG;AAC/BjD,QAAAA,YAAY,EAAEgD,SAAS,CAAChD,YADO;AAE/BuC,QAAAA,MAAM,EAAE,CACN;AACExB,UAAAA,OAAO,EAAEiC,SAAS,CAACjC,OADrB;AAEE2B,UAAAA,UAAU,EAAEM,SAAS,CAACF,MAAV,IAAoB;AAFlC,SADM,CAFuB;AAQ/BtG,QAAAA,IAAI,EAAEJ,2BAAmB,CAACkF;AARK,OAAjC;AAUA,aAAO2B,wBAAP;;AACF;AACE,YAAM,IAAI1D,wBAAJ,oBAA8ByD,SAA9B,oBAA8BA,SAAiB,CAAExG,IAAjD,8BAAyD,SAAzD,CAAN;AAtBJ;AAwBD,CA3BM;AA6BP,IAAa0G,6BAA6B,GAAG,SAAhCA,6BAAgC,CAC3CC,MAD2C;AAG3C,SAAOA,MAAM,CAACrD,GAAP,CAAWiD,4BAAX,CAAP;AACD,CAJM;;ACpPP;AAWA,IAAMK,IAAI,GAAG,CACX;AACEC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQE+G,EAAAA,OAAO,EAAE,KARX;AASEC,EAAAA,eAAe,EAAE,YATnB;AAUEhH,EAAAA,IAAI,EAAE;AAVR,CADW,EAaX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,QAFhB;AAGE/G,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,sBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAbW,EAgCX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,qBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,CAFV;AAwCED,EAAAA,IAAI,EAAE,QAxCR;AAyCEC,EAAAA,IAAI,EAAE;AAzCR,CAhCW,EA2EX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,oBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,YAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CA3EW,EAoGX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,qBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,mBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,OAFhB;AAGE/G,IAAAA,IAAI,EAAE,mBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA3CM,EAiDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAjDM,EAuDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAvDM,EA6DN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA7DM,EAmEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnEM,EAyEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzEM,EA+EN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,iBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/EM,CAFV;AAwFED,EAAAA,IAAI,EAAE,MAxFR;AAyFEC,EAAAA,IAAI,EAAE;AAzFR,CApGW,EA+LX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,sBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CA/LW,EAkNX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,yBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,6BAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,6BAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAlNW,EAqOX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,0BAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,8BAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,uBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CArOW,EAwPX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,MAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,4BAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CAxPW,EAiRX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,iBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,CAFV;AAUED,EAAAA,IAAI,EAAE,sBAVR;AAWEC,EAAAA,IAAI,EAAE;AAXR,CAjRW,EA8RX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,qBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA9RW,EA6SX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,6BAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA7SW,EA4TX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,mBAdR;AAeEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAfX;AAsBE+G,EAAAA,OAAO,EAAE,KAtBX;AAuBEC,EAAAA,eAAe,EAAE,MAvBnB;AAwBEhH,EAAAA,IAAI,EAAE;AAxBR,CA5TW,EAsVX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,CAFV;AAiFED,EAAAA,IAAI,EAAE,mBAjFR;AAkFEqH,EAAAA,OAAO,EAAE,EAlFX;AAmFEL,EAAAA,OAAO,EAAE,IAnFX;AAoFEC,EAAAA,eAAe,EAAE,SApFnB;AAqFEhH,EAAAA,IAAI,EAAE;AArFR,CAtVW,EA6aX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,iDA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,cA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADM,EAiCN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjCM,CAFV;AAyCED,EAAAA,IAAI,EAAE,0BAzCR;AA0CEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA1CX;AAiDE+G,EAAAA,OAAO,EAAE,IAjDX;AAkDEC,EAAAA,eAAe,EAAE,SAlDnB;AAmDEhH,EAAAA,IAAI,EAAE;AAnDR,CA7aW,EAkeX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,uBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,uBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAleW,EAomBX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,uBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,iBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CApmBW,EAsuBX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,uBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,wBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAtuBW,EAw2BX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,YA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,aA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GA9EM,EA2JN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3JM,EAgKN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhKM,CAFV;AAwKED,EAAAA,IAAI,EAAE,kBAxKR;AAyKEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEA,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,MA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KADU,EAiCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,OA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KAjCU,EAiEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAjEU,EAsEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,yBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAtEU,CADd;AA6EE8G,IAAAA,YAAY,EAAE,+CA7EhB;AA8EE/G,IAAAA,IAAI,EAAE,yBA9ER;AA+EEC,IAAAA,IAAI,EAAE;AA/ER,GADO,CAzKX;AA4PE+G,EAAAA,OAAO,EAAE,IA5PX;AA6PEC,EAAAA,eAAe,EAAE,SA7PnB;AA8PEhH,EAAAA,IAAI,EAAE;AA9PR,CAx2BW,EAwmCX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,YA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,aA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GA9EM,EA2JN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3JM,EAgKN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhKM,CAFV;AAwKED,EAAAA,IAAI,EAAE,iCAxKR;AAyKEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEA,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,MA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KADU,EAiCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,qCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,OA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KAjCU,EAiEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAjEU,EAsEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,yBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAtEU,CADd;AA6EE8G,IAAAA,YAAY,EAAE,+CA7EhB;AA8EE/G,IAAAA,IAAI,EAAE,yBA9ER;AA+EEC,IAAAA,IAAI,EAAE;AA/ER,GADO,CAzKX;AA4PE+G,EAAAA,OAAO,EAAE,IA5PX;AA6PEC,EAAAA,eAAe,EAAE,SA7PnB;AA8PEhH,EAAAA,IAAI,EAAE;AA9PR,CAxmCW,EAw2CX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,CAFV;AAiFED,EAAAA,IAAI,EAAE,aAjFR;AAkFEqH,EAAAA,OAAO,EAAE,EAlFX;AAmFEL,EAAAA,OAAO,EAAE,IAnFX;AAoFEC,EAAAA,eAAe,EAAE,SApFnB;AAqFEhH,EAAAA,IAAI,EAAE;AArFR,CAx2CW,EA+7CX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,kBATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,IAXX;AAYEC,EAAAA,eAAe,EAAE,SAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA/7CW,EA88CX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,WATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CA98CW,EAm+CX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,uBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CAn+CW,EAk/CX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,4BAHR;AAIEqH,EAAAA,OAAO,EAAE,EAJX;AAKEL,EAAAA,OAAO,EAAE,KALX;AAMEC,EAAAA,eAAe,EAAE,YANnB;AAOEhH,EAAAA,IAAI,EAAE;AAPR,CAl/CW,EA2/CX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,+CA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADM,EAiCN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjCM,CAFV;AAyCED,EAAAA,IAAI,EAAE,oBAzCR;AA0CEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA1CX;AAiDE+G,EAAAA,OAAO,EAAE,IAjDX;AAkDEC,EAAAA,eAAe,EAAE,SAlDnB;AAmDEhH,EAAAA,IAAI,EAAE;AAnDR,CA3/CW,EAgjDX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,iBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAhjDW,EAkrDX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,WA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAlrDW,EAozDX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,QATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CApzDW,EAy0DX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,eATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CAz0DW,EA81DX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,CAFV;AAiFED,EAAAA,IAAI,EAAE,cAjFR;AAkFEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,6BAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,2BAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,WAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,CAlFX;AA0GE+G,EAAAA,OAAO,EAAE,KA1GX;AA2GEC,EAAAA,eAAe,EAAE,MA3GnB;AA4GEhH,EAAAA,IAAI,EAAE;AA5GR,CA91DW,EA48DX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CAFV;AAmBED,EAAAA,IAAI,EAAE,sBAnBR;AAoBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApBX;AA2BE+G,EAAAA,OAAO,EAAE,KA3BX;AA4BEC,EAAAA,eAAe,EAAE,MA5BnB;AA6BEhH,EAAAA,IAAI,EAAE;AA7BR,CA58DW,EA2+DX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,CAFV;AAsFED,EAAAA,IAAI,EAAE,uBAtFR;AAuFEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAvFX;AA8FE+G,EAAAA,OAAO,EAAE,KA9FX;AA+FEC,EAAAA,eAAe,EAAE,MA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CA3+DW,EA6kEX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,+CA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADM,EAiCN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjCM,CAFV;AAyCED,EAAAA,IAAI,EAAE,6BAzCR;AA0CEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA1CX;AAiDE+G,EAAAA,OAAO,EAAE,KAjDX;AAkDEC,EAAAA,eAAe,EAAE,MAlDnB;AAmDEhH,EAAAA,IAAI,EAAE;AAnDR,CA7kEW,EAkoEX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,2BA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAloEW,EAowEX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,wBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CApwEW,EAs4EX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,4BA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAt4EW,EAwgFX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,CAFV;AA2FED,EAAAA,IAAI,EAAE,yBA3FR;AA4FEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,CADd;AA4BE8G,IAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,IAAAA,IAAI,EAAE,aA7BR;AA8BEC,IAAAA,IAAI,EAAE;AA9BR,GADO,CA5FX;AA8HE+G,EAAAA,OAAO,EAAE,IA9HX;AA+HEC,EAAAA,eAAe,EAAE,SA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CAxgFW,EA0oFX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,WA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,YA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GA9EM,EA2JN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3JM,EAgKN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhKM,CAFV;AAwKED,EAAAA,IAAI,EAAE,aAxKR;AAyKEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEA,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,MA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KADU,EAiCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,OA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KAjCU,EAiEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAjEU,EAsEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,yBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAtEU,CADd;AA6EE8G,IAAAA,YAAY,EAAE,0CA7EhB;AA8EE/G,IAAAA,IAAI,EAAE,oBA9ER;AA+EEC,IAAAA,IAAI,EAAE;AA/ER,GADO,CAzKX;AA4PE+G,EAAAA,OAAO,EAAE,IA5PX;AA6PEC,EAAAA,eAAe,EAAE,SA7PnB;AA8PEhH,EAAAA,IAAI,EAAE;AA9PR,CA1oFW,EA04FX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,WA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,uBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,YA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GA9EM,EA2JN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3JM,EAgKN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhKM,CAFV;AAwKED,EAAAA,IAAI,EAAE,4BAxKR;AAyKEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEA,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,MA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KADU,EAiCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,wBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,EAgBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAhBU,EAqBV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OArBU,CADd;AA4BE8G,MAAAA,YAAY,EAAE,mCA5BhB;AA6BE/G,MAAAA,IAAI,EAAE,OA7BR;AA8BEC,MAAAA,IAAI,EAAE;AA9BR,KAjCU,EAiEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAjEU,EAsEV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,yBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAtEU,CADd;AA6EE8G,IAAAA,YAAY,EAAE,0CA7EhB;AA8EE/G,IAAAA,IAAI,EAAE,oBA9ER;AA+EEC,IAAAA,IAAI,EAAE;AA/ER,GADO,CAzKX;AA4PE+G,EAAAA,OAAO,EAAE,IA5PX;AA6PEC,EAAAA,eAAe,EAAE,SA7PnB;AA8PEhH,EAAAA,IAAI,EAAE;AA9PR,CA14FW,EA0oGX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,YAdR;AAeEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAfX;AAsBE+G,EAAAA,OAAO,EAAE,KAtBX;AAuBEC,EAAAA,eAAe,EAAE,MAvBnB;AAwBEhH,EAAAA,IAAI,EAAE;AAxBR,CA1oGW,EAoqGX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,OAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CApqGW,EAmrGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,SATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,IAXX;AAYEC,EAAAA,eAAe,EAAE,SAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CAnrGW,EAksGX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,WAdR;AAeEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAfX;AAsBE+G,EAAAA,OAAO,EAAE,KAtBX;AAuBEC,EAAAA,eAAe,EAAE,MAvBnB;AAwBEhH,EAAAA,IAAI,EAAE;AAxBR,CAlsGW,EA4tGX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,sBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA5tGW,EA2uGX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,uBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA3uGW,EA0vGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,oBATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA1vGW,EAywGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,6BAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,gCATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CAzwGW,EAwxGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,8BAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,0BATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CAxxGW,EAuyGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,+BAdR;AAeEqH,EAAAA,OAAO,EAAE,EAfX;AAgBEL,EAAAA,OAAO,EAAE,IAhBX;AAiBEC,EAAAA,eAAe,EAAE,SAjBnB;AAkBEhH,EAAAA,IAAI,EAAE;AAlBR,CAvyGW,EA2zGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CAFV;AAwBED,EAAAA,IAAI,EAAE,mCAxBR;AAyBEqH,EAAAA,OAAO,EAAE,EAzBX;AA0BEL,EAAAA,OAAO,EAAE,KA1BX;AA2BEC,EAAAA,eAAe,EAAE,YA3BnB;AA4BEhH,EAAAA,IAAI,EAAE;AA5BR,CA3zGW,EAy1GX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,sBATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CAz1GW,EA82GX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,mBATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA92GW,CAAb;AA+3GA,IAAasH,yBAAb;AAAA;;AAAA,4BAESC,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,IAApB,CAAP;AACD,GAJH;;AAAA,4BAKSc,OALT,GAKE,iBACEC,OADF,EAEEC,gBAFF;AAIE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,IAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAVH;;AAAA;AAAA;AACkBN,6BAAA,GAAMV,IAAN;;AC34GlB;AAWA,IAAMA,MAAI,GAAG,CACX;AACEC,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBE+G,EAAAA,OAAO,EAAE,KAlBX;AAmBEC,EAAAA,eAAe,EAAE,YAnBnB;AAoBEhH,EAAAA,IAAI,EAAE;AApBR,CADW,EAuBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,sBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAvBW,EA0CX;AACE+G,EAAAA,OAAO,EAAE,IADX;AAEEC,EAAAA,eAAe,EAAE,SAFnB;AAGEhH,EAAAA,IAAI,EAAE;AAHR,CA1CW,EA+CX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,wBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA/CW,EA8DX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,kBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA9DW,EA6EX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,sBAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA7EW,EA4FX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,wBATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA5FW,EA2GX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,qBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,EAwFN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAxFM,EA6FN;AACE8G,IAAAA,YAAY,EAAE,mBADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA7FM,CAFV;AAqGED,EAAAA,IAAI,EAAE,wBArGR;AAsGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,0BAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAtGX;AAkHE+G,EAAAA,OAAO,EAAE,IAlHX;AAmHEC,EAAAA,eAAe,EAAE,SAnHnB;AAoHEhH,EAAAA,IAAI,EAAE;AApHR,CA3GW,EAiOX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,EAwFN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAxFM,EA6FN;AACE8G,IAAAA,YAAY,EAAE,mBADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA7FM,CAFV;AAqGED,EAAAA,IAAI,EAAE,yBArGR;AAsGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,0BAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAtGX;AAkHE+G,EAAAA,OAAO,EAAE,IAlHX;AAmHEC,EAAAA,eAAe,EAAE,SAnHnB;AAoHEhH,EAAAA,IAAI,EAAE;AApHR,CAjOW,EAuVX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,yBAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,QA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,EAmFN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAnFM,EAwFN;AACE8G,IAAAA,YAAY,EAAE,mBADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAxFM,CAFV;AAgGED,EAAAA,IAAI,EAAE,yBAhGR;AAiGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,0BAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAjGX;AA6GE+G,EAAAA,OAAO,EAAE,IA7GX;AA8GEC,EAAAA,eAAe,EAAE,SA9GnB;AA+GEhH,EAAAA,IAAI,EAAE;AA/GR,CAvVW,EAwcX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,CAFV;AA6BED,EAAAA,IAAI,EAAE,wBA7BR;AA8BEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA9BX;AAqCE+G,EAAAA,OAAO,EAAE,KArCX;AAsCEC,EAAAA,eAAe,EAAE,YAtCnB;AAuCEhH,EAAAA,IAAI,EAAE;AAvCR,CAxcW,EAifX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,CAFV;AA6BED,EAAAA,IAAI,EAAE,mBA7BR;AA8BEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA9BX;AAqCE+G,EAAAA,OAAO,EAAE,KArCX;AAsCEC,EAAAA,eAAe,EAAE,YAtCnB;AAuCEhH,EAAAA,IAAI,EAAE;AAvCR,CAjfW,EA0hBX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,OAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAJX;AAWE+G,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,MAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CA1hBW,EAyiBX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,mBATR;AAUEqH,EAAAA,OAAO,EAAE,EAVX;AAWEL,EAAAA,OAAO,EAAE,KAXX;AAYEC,EAAAA,eAAe,EAAE,YAZnB;AAaEhH,EAAAA,IAAI,EAAE;AAbR,CAziBW,EAwjBX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,eAdR;AAeEqH,EAAAA,OAAO,EAAE,EAfX;AAgBEL,EAAAA,OAAO,EAAE,KAhBX;AAiBEC,EAAAA,eAAe,EAAE,YAjBnB;AAkBEhH,EAAAA,IAAI,EAAE;AAlBR,CAxjBW,CAAb;AA8kBA,IAAa8H,kBAAb;AAAA;;AAAA,qBAESP,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,MAApB,CAAP;AACD,GAJH;;AAAA,qBAKSc,OALT,GAKE,iBACEC,OADF,EAEEC,gBAFF;AAIE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,MAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAVH;;AAAA;AAAA;AACkBE,sBAAA,GAAMlB,MAAN;;AC1lBlB;AAQA,IAAMA,MAAI,GAAG,CACX;AACEK,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,uBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CADW,EAoBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,iCAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,iBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,wBAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA3CM,EAiDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,mBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAjDM,EAuDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAvDM,CAFV;AAgEED,EAAAA,IAAI,EAAE,oBAhER;AAiEEC,EAAAA,IAAI,EAAE;AAjER,CApBW,EAuFX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,iCAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBEkH,IAAAA,OAAO,EAAE,KAlBX;AAmBEJ,IAAAA,YAAY,EAAE,0BAnBhB;AAoBE/G,IAAAA,IAAI,EAAE,MApBR;AAqBEC,IAAAA,IAAI,EAAE;AArBR,GA3CM,EAkEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,wBAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAlEM,EAwEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,gBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAxEM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,6BADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaEkH,IAAAA,OAAO,EAAE,KAbX;AAcEJ,IAAAA,YAAY,EAAE,+BAdhB;AAeE/G,IAAAA,IAAI,EAAE,wBAfR;AAgBEC,IAAAA,IAAI,EAAE;AAhBR,GA9EM,EAgGN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,oBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAhGM,CAFV;AAyGED,EAAAA,IAAI,EAAE,uBAzGR;AA0GEC,EAAAA,IAAI,EAAE;AA1GR,CAvFW,EAmMX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,sBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAnMW,EAsNX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,iCAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,uBAFhB;AAGE/G,IAAAA,IAAI,EAAE,aAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA3CM,EAiDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAjDM,CAFV;AA0DED,EAAAA,IAAI,EAAE,mBA1DR;AA2DEC,EAAAA,IAAI,EAAE;AA3DR,CAtNW,EAmRX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,iCAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,SAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBEkH,IAAAA,OAAO,EAAE,KAlBX;AAmBEJ,IAAAA,YAAY,EAAE,0BAnBhB;AAoBE/G,IAAAA,IAAI,EAAE,MApBR;AAqBEC,IAAAA,IAAI,EAAE;AArBR,GA3CM,EAkEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,uBAFhB;AAGE/G,IAAAA,IAAI,EAAE,aAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAlEM,EAwEN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAxEM,EA8EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,6BADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaEkH,IAAAA,OAAO,EAAE,KAbX;AAcEJ,IAAAA,YAAY,EAAE,+BAdhB;AAeE/G,IAAAA,IAAI,EAAE,uBAfR;AAgBEC,IAAAA,IAAI,EAAE;AAhBR,GA9EM,CAFV;AAmGED,EAAAA,IAAI,EAAE,sBAnGR;AAoGEC,EAAAA,IAAI,EAAE;AApGR,CAnRW,EAyXX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA3CM,EAiDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,2BAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAjDM,EAuDN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,iBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAvDM,EA6DN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,MAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA7DM,CAFV;AAsEED,EAAAA,IAAI,EAAE,kBAtER;AAuEEC,EAAAA,IAAI,EAAE;AAvER,CAzXW,EAkcX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,yBAFhB;AAGE/G,IAAAA,IAAI,EAAE,aAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,mBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,6BAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,CAFV;AAwCED,EAAAA,IAAI,EAAE,uBAxCR;AAyCEC,EAAAA,IAAI,EAAE;AAzCR,CAlcW,EA6eX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,MAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,QAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,CAFV;AA4BED,EAAAA,IAAI,EAAE,yBA5BR;AA6BEC,EAAAA,IAAI,EAAE;AA7BR,CA7eW,EA4gBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,UAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CA5gBW,EAqiBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,gBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAriBW,EAwjBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,MAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,uBAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CAxjBW,EAilBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,CAFV;AA8CED,EAAAA,IAAI,EAAE,gBA9CR;AA+CEC,EAAAA,IAAI,EAAE;AA/CR,CAjlBW,EAkoBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,eAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,CAFV;AAgBED,EAAAA,IAAI,EAAE,sBAhBR;AAiBEC,EAAAA,IAAI,EAAE;AAjBR,CAloBW,EAqpBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,CAFV;AA4BED,EAAAA,IAAI,EAAE,0BA5BR;AA6BEC,EAAAA,IAAI,EAAE;AA7BR,CArpBW,EAorBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,cAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,CAFV;AA4BED,EAAAA,IAAI,EAAE,wBA5BR;AA6BEC,EAAAA,IAAI,EAAE;AA7BR,CAprBW,EAmtBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,QAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,sBAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CAntBW,EA4uBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,aAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,CAFV;AAUED,EAAAA,IAAI,EAAE,oBAVR;AAWEC,EAAAA,IAAI,EAAE;AAXR,CA5uBW,EAyvBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,EA+BN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA/BM,EAqCN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,wBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GArCM,EA2CN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,MAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GA3CM,CAFV;AAoDED,EAAAA,IAAI,EAAE,gBApDR;AAqDEC,EAAAA,IAAI,EAAE;AArDR,CAzvBW,EAgzBX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,WAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,MAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,wBAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CAhzBW,EAy0BX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,YAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,aAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,kBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,mBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,CAFV;AAkCED,EAAAA,IAAI,EAAE,kBAlCR;AAmCEC,EAAAA,IAAI,EAAE;AAnCR,CAz0BW,EA82BX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,qBAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,CAFV;AAUED,EAAAA,IAAI,EAAE,4BAVR;AAWEC,EAAAA,IAAI,EAAE;AAXR,CA92BW,EA23BX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,EA+FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/FM,EAoGN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GApGM,EAyGN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAzGM,CADV;AAgHED,EAAAA,IAAI,EAAE,iBAhHR;AAiHEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAjHX;AA6HEgH,EAAAA,eAAe,EAAE,SA7HnB;AA8HEhH,EAAAA,IAAI,EAAE;AA9HR,CA33BW,EA2/BX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3EM,EAgFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhFM,EAqFN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArFM,EA0FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA1FM,CADV;AAiGED,EAAAA,IAAI,EAAE,eAjGR;AAkGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAlGX;AA8GEgH,EAAAA,eAAe,EAAE,YA9GnB;AA+GEhH,EAAAA,IAAI,EAAE;AA/GR,CA3/BW,EA4mCX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,EAqFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArFM,EA0FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA1FM,EA+FN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/FM,EAoGN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GApGM,CADV;AA2GED,EAAAA,IAAI,EAAE,eA3GR;AA4GEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CA5GX;AAwHEgH,EAAAA,eAAe,EAAE,YAxHnB;AAyHEhH,EAAAA,IAAI,EAAE;AAzHR,CA5mCW,EAuuCX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,mCAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,YA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CAvuCW,EAywCX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,sBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,QADhB;AAEE/G,QAAAA,IAAI,EAAE,iBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,MAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,gDAbhB;AAcE/G,MAAAA,IAAI,EAAE,iBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KA1BU,EA2CV;AACE8G,MAAAA,YAAY,EAAE,MADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA3CU,EAgDV;AACE8G,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhDU,CADd;AAuDE8G,IAAAA,YAAY,EAAE,kDAvDhB;AAwDE/G,IAAAA,IAAI,EAAE,MAxDR;AAyDEC,IAAAA,IAAI,EAAE;AAzDR,GADM,CADV;AA8DED,EAAAA,IAAI,EAAE,iBA9DR;AA+DEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA/DX;AAsEEgH,EAAAA,eAAe,EAAE,SAtEnB;AAuEEhH,EAAAA,IAAI,EAAE;AAvER,CAzwCW,EAk1CX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,mCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,YA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAjGM,EA4HN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,qBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5HM,EAiIN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjIM,EAsIN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAtIM,CADV;AA6IED,EAAAA,IAAI,EAAE,kBA7IR;AA8IEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA9IX;AAqJEgH,EAAAA,eAAe,EAAE,SArJnB;AAsJEhH,EAAAA,IAAI,EAAE;AAtJR,CAl1CW,EA0+CX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,kCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,YAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA5FM,EAuHN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvHM,EA4HN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5HM,CADV;AAmIED,EAAAA,IAAI,EAAE,iBAnIR;AAoIEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApIX;AA2IEgH,EAAAA,eAAe,EAAE,SA3InB;AA4IEhH,EAAAA,IAAI,EAAE;AA5IR,CA1+CW,EAwnDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,0BARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAxnDW,EAqoDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,yBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAroDW,EAkpDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,oCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,QAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,CADV;AAsEED,EAAAA,IAAI,EAAE,wBAtER;AAuEEqH,EAAAA,OAAO,EAAE,EAvEX;AAwEEJ,EAAAA,eAAe,EAAE,YAxEnB;AAyEEhH,EAAAA,IAAI,EAAE;AAzER,CAlpDW,EA6tDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,4BAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CA7tDW,EAovDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,sCAvBR;AAwBEqH,EAAAA,OAAO,EAAE,EAxBX;AAyBEJ,EAAAA,eAAe,EAAE,YAzBnB;AA0BEhH,EAAAA,IAAI,EAAE;AA1BR,CApvDW,EAgxDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,0BAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CAhxDW,EAuyDX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,oCAvBR;AAwBEqH,EAAAA,OAAO,EAAE,EAxBX;AAyBEJ,EAAAA,eAAe,EAAE,YAzBnB;AA0BEhH,EAAAA,IAAI,EAAE;AA1BR,CAvyDW,EAm0DX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,kCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,QAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,sBA5DR;AA6DEqH,EAAAA,OAAO,EAAE,EA7DX;AA8DEJ,EAAAA,eAAe,EAAE,YA9DnB;AA+DEhH,EAAAA,IAAI,EAAE;AA/DR,CAn0DW,EAo4DX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,uDArDhB;AAsDE/G,IAAAA,IAAI,EAAE,MAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,CADV;AAuFED,EAAAA,IAAI,EAAE,8BAvFR;AAwFEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxFX;AA+FEgH,EAAAA,eAAe,EAAE,SA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CAp4DW,EAs+DX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,oCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,QAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,EA+FN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,uBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/FM,EAoGN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GApGM,CADV;AA2GED,EAAAA,IAAI,EAAE,sBA3GR;AA4GEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,yBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,yBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CA5GX;AAwHEgH,EAAAA,eAAe,EAAE,SAxHnB;AAyHEhH,EAAAA,IAAI,EAAE;AAzHR,CAt+DW,EAimEX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,kCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,QAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,EAqFN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,uBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArFM,EA0FN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,oBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA1FM,CADV;AAiGED,EAAAA,IAAI,EAAE,oBAjGR;AAkGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,yBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,yBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAlGX;AA8GEgH,EAAAA,eAAe,EAAE,YA9GnB;AA+GEhH,EAAAA,IAAI,EAAE;AA/GR,CAjmEW,EAktEX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,kCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,QA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,iBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,iBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA3EM,EAsGN;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAtGM,CADV;AA6GED,EAAAA,IAAI,EAAE,+BA7GR;AA8GEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA9GX;AAqHEgH,EAAAA,eAAe,EAAE,YArHnB;AAsHEhH,EAAAA,IAAI,EAAE;AAtHR,CAltEW,EA00EX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,oCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,QAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,CADV;AAiGED,EAAAA,IAAI,EAAE,kCAjGR;AAkGEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,mCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,YAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,EAuBP;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,iCAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBO,EA4BP;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BO,CAlGX;AAoIEgH,EAAAA,eAAe,EAAE,MApInB;AAqIEhH,EAAAA,IAAI,EAAE;AArIR,CA10EW,EAi9EX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,kCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,QAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,YAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,CADV;AAuFED,EAAAA,IAAI,EAAE,gCAvFR;AAwFEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,mCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,YAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,EAuBP;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,iCAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBO,EA4BP;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BO,CAxFX;AA0HEgH,EAAAA,eAAe,EAAE,MA1HnB;AA2HEhH,EAAAA,IAAI,EAAE;AA3HR,CAj9EW,EA8kFX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,kCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,YAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,kCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,WAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GA5FM,EAuLN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,qBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAvLM,EAkNN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,iCAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,oBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAlNM,CADV;AA+OED,EAAAA,IAAI,EAAE,wBA/OR;AAgPEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAhPX;AA4PEgH,EAAAA,eAAe,EAAE,YA5PnB;AA6PEhH,EAAAA,IAAI,EAAE;AA7PR,CA9kFW,EA60FX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,WA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAjGM,EA4HN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5HM,EAiIN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjIM,CADV;AAwIED,EAAAA,IAAI,EAAE,YAxIR;AAyIEqH,EAAAA,OAAO,EAAE,EAzIX;AA0IEJ,EAAAA,eAAe,EAAE,SA1InB;AA2IEhH,EAAAA,IAAI,EAAE;AA3IR,CA70FW,EA09FX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,WAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA5FM,EAuHN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvHM,CADV;AA8HED,EAAAA,IAAI,EAAE,WA9HR;AA+HEqH,EAAAA,OAAO,EAAE,EA/HX;AAgIEJ,EAAAA,eAAe,EAAE,SAhInB;AAiIEhH,EAAAA,IAAI,EAAE;AAjIR,CA19FW,EA6lGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,oBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA7lGW,EA0mGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,mBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA1mGW,EAunGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,CADV;AAsEED,EAAAA,IAAI,EAAE,kBAtER;AAuEEqH,EAAAA,OAAO,EAAE,EAvEX;AAwEEJ,EAAAA,eAAe,EAAE,YAxEnB;AAyEEhH,EAAAA,IAAI,EAAE;AAzER,CAvnGW,EAksGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,uBAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CAlsGW,EAytGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,iCAvBR;AAwBEqH,EAAAA,OAAO,EAAE,EAxBX;AAyBEJ,EAAAA,eAAe,EAAE,YAzBnB;AA0BEhH,EAAAA,IAAI,EAAE;AA1BR,CAztGW,EAqvGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,qBAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CArvGW,EA4wGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,+BAvBR;AAwBEqH,EAAAA,OAAO,EAAE,EAxBX;AAyBEJ,EAAAA,eAAe,EAAE,YAzBnB;AA0BEhH,EAAAA,IAAI,EAAE;AA1BR,CA5wGW,EAwyGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,gBA5DR;AA6DEqH,EAAAA,OAAO,EAAE,EA7DX;AA8DEJ,EAAAA,eAAe,EAAE,YA9DnB;AA+DEhH,EAAAA,IAAI,EAAE;AA/DR,CAxyGW,EAy2GX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,uBAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,uBADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAz2GW,EAs3GX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,qDArDhB;AAsDE/G,IAAAA,IAAI,EAAE,KAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,CADV;AAuFED,EAAAA,IAAI,EAAE,wBAvFR;AAwFEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxFX;AA+FEgH,EAAAA,eAAe,EAAE,SA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CAt3GW,EAw9GX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,QAbR;AAcEqH,EAAAA,OAAO,EAAE,EAdX;AAeEJ,EAAAA,eAAe,EAAE,YAfnB;AAgBEhH,EAAAA,IAAI,EAAE;AAhBR,CAx9GW,EA0+GX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,EA+FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/FM,CADV;AAsGED,EAAAA,IAAI,EAAE,gBAtGR;AAuGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAvGX;AAmHEgH,EAAAA,eAAe,EAAE,SAnHnB;AAoHEhH,EAAAA,IAAI,EAAE;AApHR,CA1+GW,EAgmHX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,EA+FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/FM,CADV;AAsGED,EAAAA,IAAI,EAAE,sBAtGR;AAuGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAvGX;AA8GEgH,EAAAA,eAAe,EAAE,SA9GnB;AA+GEhH,EAAAA,IAAI,EAAE;AA/GR,CAhmHW,EAitHX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,EAqFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArFM,CADV;AA4FED,EAAAA,IAAI,EAAE,oBA5FR;AA6FEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA7FX;AAoGEgH,EAAAA,eAAe,EAAE,YApGnB;AAqGEhH,EAAAA,IAAI,EAAE;AArGR,CAjtHW,EAwzHX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3EM,CADV;AAkFED,EAAAA,IAAI,EAAE,cAlFR;AAmFEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAnFX;AA+FEgH,EAAAA,eAAe,EAAE,YA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CAxzHW,EA05HX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3EM,CADV;AAkFED,EAAAA,IAAI,EAAE,oBAlFR;AAmFEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CAnFX;AA+FEgH,EAAAA,eAAe,EAAE,YA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CA15HW,EA4/HX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,CADV;AA6EED,EAAAA,IAAI,EAAE,qBA7ER;AA8EEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CA9EX;AA0FEgH,EAAAA,eAAe,EAAE,SA1FnB;AA2FEhH,EAAAA,IAAI,EAAE;AA3FR,CA5/HW,EAylIX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,EAqFN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArFM,CADV;AA4FED,EAAAA,IAAI,EAAE,cA5FR;AA6FEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,EAMP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,wBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANO,CA7FX;AAyGEgH,EAAAA,eAAe,EAAE,YAzGnB;AA0GEhH,EAAAA,IAAI,EAAE;AA1GR,CAzlIW,EAqsIX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA3EM,CADV;AAwGED,EAAAA,IAAI,EAAE,yBAxGR;AAyGEqH,EAAAA,OAAO,EAAE,EAzGX;AA0GEJ,EAAAA,eAAe,EAAE,YA1GnB;AA2GEhH,EAAAA,IAAI,EAAE;AA3GR,CArsIW,EAkzIX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,EAgDN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAhDM,EA2EN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,gBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA3EM,CADV;AAwGED,EAAAA,IAAI,EAAE,+BAxGR;AAyGEqH,EAAAA,OAAO,EAAE,EAzGX;AA0GEJ,EAAAA,eAAe,EAAE,YA1GnB;AA2GEhH,EAAAA,IAAI,EAAE;AA3GR,CAlzIW,EA+5IX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,OA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,CADV;AAmGED,EAAAA,IAAI,EAAE,qBAnGR;AAoGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApGX;AA2GEgH,EAAAA,eAAe,EAAE,MA3GnB;AA4GEhH,EAAAA,IAAI,EAAE;AA5GR,CA/5IW,EA6gJX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,OA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,CADV;AAmGED,EAAAA,IAAI,EAAE,qBAnGR;AAoGEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,8BADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,8BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GADO,CApGX;AAiIEgH,EAAAA,eAAe,EAAE,MAjInB;AAkIEhH,EAAAA,IAAI,EAAE;AAlIR,CA7gJW,EAipJX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,CADV;AA8FED,EAAAA,IAAI,EAAE,oBA9FR;AA+FEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA/FX;AAsGEgH,EAAAA,eAAe,EAAE,MAtGnB;AAuGEhH,EAAAA,IAAI,EAAE;AAvGR,CAjpJW,EA0vJX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,CADV;AA8FED,EAAAA,IAAI,EAAE,sBA9FR;AA+FEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,8BADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA/FX;AAsGEgH,EAAAA,eAAe,EAAE,MAtGnB;AAuGEhH,EAAAA,IAAI,EAAE;AAvGR,CA1vJW,EAm2JX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,+BAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CAn2JW,EA23JX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,CADV;AAsEED,EAAAA,IAAI,EAAE,mBAtER;AAuEEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAvEX;AA8EEgH,EAAAA,eAAe,EAAE,MA9EnB;AA+EEhH,EAAAA,IAAI,EAAE;AA/ER,CA33JW,EA48JX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,CADV;AAsEED,EAAAA,IAAI,EAAE,mBAtER;AAuEEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,iCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,WAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,CAvEX;AA+FEgH,EAAAA,eAAe,EAAE,MA/FnB;AAgGEhH,EAAAA,IAAI,EAAE;AAhGR,CA58JW,EA8iKX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,CADd;AA+DE8G,IAAAA,YAAY,EAAE,kCA/DhB;AAgEE/G,IAAAA,IAAI,EAAE,OAhER;AAiEEC,IAAAA,IAAI,EAAE;AAjER,GADM,EAoEN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GApEM,CADV;AAiGED,EAAAA,IAAI,EAAE,4BAjGR;AAkGEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,iCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,WAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,EAuBP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gCAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBO,EA4BP;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BO,CAlGX;AAoIEgH,EAAAA,eAAe,EAAE,MApInB;AAqIEhH,EAAAA,IAAI,EAAE;AArIR,CA9iKW,EAqrKX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,qDArDhB;AAsDE/G,IAAAA,IAAI,EAAE,KAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,iCA5DR;AA6DEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA7DX;AAoEEgH,EAAAA,eAAe,EAAE,MApEnB;AAqEEhH,EAAAA,IAAI,EAAE;AArER,CArrKW,EA4vKX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iBADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,qDArDhB;AAsDE/G,IAAAA,IAAI,EAAE,KAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,wBA5DR;AA6DEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA7DX;AAoEEgH,EAAAA,eAAe,EAAE,MApEnB;AAqEEhH,EAAAA,IAAI,EAAE;AArER,CA5vKW,EAm0KX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,qCARR;AASEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEgH,EAAAA,eAAe,EAAE,MAhBnB;AAiBEhH,EAAAA,IAAI,EAAE;AAjBR,CAn0KW,EAs1KX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,CADV;AAkDED,EAAAA,IAAI,EAAE,iBAlDR;AAmDEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAnDX;AA0DEgH,EAAAA,eAAe,EAAE,MA1DnB;AA2DEhH,EAAAA,IAAI,EAAE;AA3DR,CAt1KW,EAm5KX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,CADd;AA2CE8G,IAAAA,YAAY,EAAE,gCA3ChB;AA4CE/G,IAAAA,IAAI,EAAE,OA5CR;AA6CEC,IAAAA,IAAI,EAAE;AA7CR,GADM,CADV;AAkDED,EAAAA,IAAI,EAAE,iBAlDR;AAmDEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaE8G,IAAAA,YAAY,EAAE,oCAbhB;AAcE/G,IAAAA,IAAI,EAAE,WAdR;AAeEC,IAAAA,IAAI,EAAE;AAfR,GADO,CAnDX;AAsEEgH,EAAAA,eAAe,EAAE,MAtEnB;AAuEEhH,EAAAA,IAAI,EAAE;AAvER,CAn5KW,EA49KX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,0BAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,MAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA59KW,EAy+KX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,gBAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,MAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAz+KW,EAs/KX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,iBA5DR;AA6DEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA7DX;AAoEEgH,EAAAA,eAAe,EAAE,MApEnB;AAqEEhH,EAAAA,IAAI,EAAE;AArER,CAt/KW,EA6jLX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,CADV;AA4DED,EAAAA,IAAI,EAAE,iBA5DR;AA6DEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,iCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,WAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,CA7DX;AAqFEgH,EAAAA,eAAe,EAAE,MArFnB;AAsFEhH,EAAAA,IAAI,EAAE;AAtFR,CA7jLW,EAqpLX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,CADd;AAqDE8G,IAAAA,YAAY,EAAE,gCArDhB;AAsDE/G,IAAAA,IAAI,EAAE,OAtDR;AAuDEC,IAAAA,IAAI,EAAE;AAvDR,GADM,EA0DN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA1DM,CADV;AAuFED,EAAAA,IAAI,EAAE,0BAvFR;AAwFEqH,EAAAA,OAAO,EAAE,CACP;AACEC,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,wBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,iCAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,WAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GADO,EAuBP;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gCAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBO,EA4BP;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BO,CAxFX;AA0HEgH,EAAAA,eAAe,EAAE,MA1HnB;AA2HEhH,EAAAA,IAAI,EAAE;AA3HR,CArpLW,EAkxLX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,yBAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CAlxLW,EA0yLX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,mBARR;AASEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEgH,EAAAA,eAAe,EAAE,MAhBnB;AAiBEhH,EAAAA,IAAI,EAAE;AAjBR,CA1yLW,EA6zLX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,oBAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,uBADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,MAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA7zLW,EA00LX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,wBAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,MAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA10LW,EAu1LX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,oBAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CAv1LW,EA+2LX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,sBAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CA/2LW,EAu4LX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,WAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,UAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GA5FM,EAuLN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,oBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAvLM,EAkNN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,mBAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAlNM,CADV;AA+OED,EAAAA,IAAI,EAAE,mBA/OR;AAgPEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAhPX;AAuPEgH,EAAAA,eAAe,EAAE,YAvPnB;AAwPEhH,EAAAA,IAAI,EAAE;AAxPR,CAv4LW,EAioMX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,SAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CAjoMW,EAwpMX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,6CAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,OAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GANM,EA4BN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BM,CADV;AAmCED,EAAAA,IAAI,EAAE,+BAnCR;AAoCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApCX;AA2CEgH,EAAAA,eAAe,EAAE,SA3CnB;AA4CEhH,EAAAA,IAAI,EAAE;AA5CR,CAxpMW,EAssMX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,6CAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,OAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GANM,EA4BN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BM,EAiCN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjCM,CADV;AAwCED,EAAAA,IAAI,EAAE,+BAxCR;AAyCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAzCX;AAgDEgH,EAAAA,eAAe,EAAE,YAhDnB;AAiDEhH,EAAAA,IAAI,EAAE;AAjDR,CAtsMW,EAyvMX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,CADd;AAkBE8G,IAAAA,YAAY,EAAE,6CAlBhB;AAmBE/G,IAAAA,IAAI,EAAE,OAnBR;AAoBEC,IAAAA,IAAI,EAAE;AApBR,GAXM,EAiCN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjCM,EAsCN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAtCM,CADV;AA6CED,EAAAA,IAAI,EAAE,iCA7CR;AA8CEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA9CX;AAqDEgH,EAAAA,eAAe,EAAE,YArDnB;AAsDEhH,EAAAA,IAAI,EAAE;AAtDR,CAzvMW,EAizMX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaE8G,IAAAA,YAAY,EAAE,gDAbhB;AAcE/G,IAAAA,IAAI,EAAE,OAdR;AAeEC,IAAAA,IAAI,EAAE;AAfR,GANM,EAuBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBM,CADV;AA8BED,EAAAA,IAAI,EAAE,kCA9BR;AA+BEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA/BX;AAsCEgH,EAAAA,eAAe,EAAE,SAtCnB;AAuCEhH,EAAAA,IAAI,EAAE;AAvCR,CAjzMW,EA01MX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaE8G,IAAAA,YAAY,EAAE,gDAbhB;AAcE/G,IAAAA,IAAI,EAAE,OAdR;AAeEC,IAAAA,IAAI,EAAE;AAfR,GANM,EAuBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBM,EA4BN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BM,CADV;AAmCED,EAAAA,IAAI,EAAE,kCAnCR;AAoCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApCX;AA2CEgH,EAAAA,eAAe,EAAE,YA3CnB;AA4CEhH,EAAAA,IAAI,EAAE;AA5CR,CA11MW,EAw4MX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,yCADhB;AAEE/G,MAAAA,IAAI,EAAE,IAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaE8G,IAAAA,YAAY,EAAE,gDAbhB;AAcE/G,IAAAA,IAAI,EAAE,OAdR;AAeEC,IAAAA,IAAI,EAAE;AAfR,GANM,EAuBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvBM,EA4BN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5BM,CADV;AAmCED,EAAAA,IAAI,EAAE,oCAnCR;AAoCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CApCX;AA2CEgH,EAAAA,eAAe,EAAE,YA3CnB;AA4CEhH,EAAAA,IAAI,EAAE;AA5CR,CAx4MW,EAs7MX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,CADV;AA4BED,EAAAA,IAAI,EAAE,mBA5BR;AA6BEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CA7BX;AAoCEgH,EAAAA,eAAe,EAAE,YApCnB;AAqCEhH,EAAAA,IAAI,EAAE;AArCR,CAt7MW,EA69MX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,kBAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,YA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CA79MW,EA+/MX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEE9G,EAAAA,IAAI,EAAE,OAFR;AAGEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAHX;AAUEgH,EAAAA,eAAe,EAAE,MAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CA//MW,EA4gNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,OA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,CADV;AAmGED,EAAAA,IAAI,EAAE,qBAnGR;AAoGEqH,EAAAA,OAAO,EAAE,EApGX;AAqGEJ,EAAAA,eAAe,EAAE,YArGnB;AAsGEhH,EAAAA,IAAI,EAAE;AAtGR,CA5gNW,EAonNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,CADV;AA8FED,EAAAA,IAAI,EAAE,oBA9FR;AA+FEqH,EAAAA,OAAO,EAAE,EA/FX;AAgGEJ,EAAAA,eAAe,EAAE,YAhGnB;AAiGEhH,EAAAA,IAAI,EAAE;AAjGR,CApnNW,EAutNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,4BAbR;AAcEqH,EAAAA,OAAO,EAAE,EAdX;AAeEJ,EAAAA,eAAe,EAAE,YAfnB;AAgBEhH,EAAAA,IAAI,EAAE;AAhBR,CAvtNW,EAyuNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,2BAbR;AAcEqH,EAAAA,OAAO,EAAE,EAdX;AAeEJ,EAAAA,eAAe,EAAE,YAfnB;AAgBEhH,EAAAA,IAAI,EAAE;AAhBR,CAzuNW,EA2vNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,UAbR;AAcEqH,EAAAA,OAAO,EAAE,EAdX;AAeEJ,EAAAA,eAAe,EAAE,YAfnB;AAgBEhH,EAAAA,IAAI,EAAE;AAhBR,CA3vNW,EA6wNX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,UA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAjGM,EA4HN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5HM,EAiIN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjIM,EAsIN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAtIM,EA2IN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA3IM,CADV;AAkJED,EAAAA,IAAI,EAAE,aAlJR;AAmJEqH,EAAAA,OAAO,EAAE,EAnJX;AAoJEJ,EAAAA,eAAe,EAAE,YApJnB;AAqJEhH,EAAAA,IAAI,EAAE;AArJR,CA7wNW,EAo6NX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,UAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA5FM,EAuHN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAvHM,EA4HN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5HM,EAiIN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjIM,CADV;AAwIED,EAAAA,IAAI,EAAE,YAxIR;AAyIEqH,EAAAA,OAAO,EAAE,EAzIX;AA0IEJ,EAAAA,eAAe,EAAE,YA1InB;AA2IEhH,EAAAA,IAAI,EAAE;AA3IR,CAp6NW,EAijOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,4BAlBR;AAmBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAnBX;AA0BEgH,EAAAA,eAAe,EAAE,SA1BnB;AA2BEhH,EAAAA,IAAI,EAAE;AA3BR,CAjjOW,EA8kOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,6BADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,EA0BN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA1BM,EA+BN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA/BM,CADV;AAsCED,EAAAA,IAAI,EAAE,yBAtCR;AAuCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAvCX;AA8CEgH,EAAAA,eAAe,EAAE,SA9CnB;AA+CEhH,EAAAA,IAAI,EAAE;AA/CR,CA9kOW,EA+nOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,uCADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,mBAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,SA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CA/nOW,EAiqOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,2BADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,eAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,SA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CAjqOW,EAmsOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,iBADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,4BAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,YA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CAnsOW,EAquOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CADV;AAuBED,EAAAA,IAAI,EAAE,8BAvBR;AAwBEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAxBX;AA+BEgH,EAAAA,eAAe,EAAE,YA/BnB;AAgCEhH,EAAAA,IAAI,EAAE;AAhCR,CAruOW,EAuwOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,gBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAvwOW,EAoxOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,qBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,wBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CApxOW,EAiyOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,kBARR;AASEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEgH,EAAAA,eAAe,EAAE,MAhBnB;AAiBEhH,EAAAA,IAAI,EAAE;AAjBR,CAjyOW,EAozOX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,mBARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CApzOW,EAi0OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,8BARR;AASEqH,EAAAA,OAAO,EAAE,EATX;AAUEJ,EAAAA,eAAe,EAAE,YAVnB;AAWEhH,EAAAA,IAAI,EAAE;AAXR,CAj0OW,EA80OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,iBADhB;AAEE/G,IAAAA,IAAI,EAAE,iBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,yBAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CA90OW,EAq2OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,yBADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,kBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,sBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,QADhB;AAEE/G,MAAAA,IAAI,EAAE,iBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,CADd;AAaE8G,IAAAA,YAAY,EAAE,gDAbhB;AAcE/G,IAAAA,IAAI,EAAE,iBAdR;AAeEC,IAAAA,IAAI,EAAE;AAfR,GArBM,CADV;AAwCED,EAAAA,IAAI,EAAE,gBAxCR;AAyCEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,mBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAzCX;AAgDEgH,EAAAA,eAAe,EAAE,SAhDnB;AAiDEhH,EAAAA,IAAI,EAAE;AAjDR,CAr2OW,EAw5OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CADV;AAkBED,EAAAA,IAAI,EAAE,uBAlBR;AAmBEqH,EAAAA,OAAO,EAAE,EAnBX;AAoBEJ,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CAx5OW,EA+6OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,OA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,gBAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAjGM,CADV;AAwGED,EAAAA,IAAI,EAAE,gCAxGR;AAyGEqH,EAAAA,OAAO,EAAE,EAzGX;AA0GEJ,EAAAA,eAAe,EAAE,MA1GnB;AA2GEhH,EAAAA,IAAI,EAAE;AA3GR,CA/6OW,EA4hPX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,iCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,OA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAjGM,CADV;AA8HED,EAAAA,IAAI,EAAE,+BA9HR;AA+HEqH,EAAAA,OAAO,EAAE,EA/HX;AAgIEJ,EAAAA,eAAe,EAAE,MAhInB;AAiIEhH,EAAAA,IAAI,EAAE;AAjIR,CA5hPW,EA+pPX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,eAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA5FM,CADV;AAmGED,EAAAA,IAAI,EAAE,+BAnGR;AAoGEqH,EAAAA,OAAO,EAAE,EApGX;AAqGEJ,EAAAA,eAAe,EAAE,MArGnB;AAsGEhH,EAAAA,IAAI,EAAE;AAtGR,CA/pPW,EAuwPX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA5FM,CADV;AAyHED,EAAAA,IAAI,EAAE,8BAzHR;AA0HEqH,EAAAA,OAAO,EAAE,EA1HX;AA2HEJ,EAAAA,eAAe,EAAE,MA3HnB;AA4HEhH,EAAAA,IAAI,EAAE;AA5HR,CAvwPW,CAAb;AAu4PA,IAAa+H,gBAAb;AAAA;;AAAA,mBAESR,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,MAApB,CAAP;AACD,GAJH;;AAAA,mBAKSc,OALT,GAKE,iBACEC,OADF,EAEEC,gBAFF;AAIE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,MAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAVH;;AAAA;AAAA;AACkBG,oBAAA,GAAMnB,MAAN;;ACh5PlB;AAQA,IAAMA,MAAI,GAAG,CACX;AACEK,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,QAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,MAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,gBAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CADW,EA0BX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,WAFhB;AAGE/G,IAAAA,IAAI,EAAE,MAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,WAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,CAFV;AAkCED,EAAAA,IAAI,EAAE,eAlCR;AAmCEC,EAAAA,IAAI,EAAE;AAnCR,CA1BW,EA+DX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,WAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,EAmBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,KAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAnBM,EAyBN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAzBM,CAFV;AAkCED,EAAAA,IAAI,EAAE,gBAlCR;AAmCEC,EAAAA,IAAI,EAAE;AAnCR,CA/DW,EAoGX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,WAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CApGW,EA4HX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,gBAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CA5HW,EAoJX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,QAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,kBAbR;AAcEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,YAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAdX;AAqBEgH,EAAAA,eAAe,EAAE,MArBnB;AAsBEhH,EAAAA,IAAI,EAAE;AAtBR,CApJW,EA4KX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,WADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,CADV;AA4BED,EAAAA,IAAI,EAAE,uBA5BR;AA6BEqH,EAAAA,OAAO,EAAE,EA7BX;AA8BEJ,EAAAA,eAAe,EAAE,YA9BnB;AA+BEhH,EAAAA,IAAI,EAAE;AA/BR,CA5KW,EA6MX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,KAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,EAqBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GArBM,CADV;AA4BED,EAAAA,IAAI,EAAE,kBA5BR;AA6BEqH,EAAAA,OAAO,EAAE,EA7BX;AA8BEJ,EAAAA,eAAe,EAAE,YA9BnB;AA+BEhH,EAAAA,IAAI,EAAE;AA/BR,CA7MW,EA8OX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CADV;AAaED,EAAAA,IAAI,EAAE,mBAbR;AAcEqH,EAAAA,OAAO,EAAE,EAdX;AAeEJ,EAAAA,eAAe,EAAE,YAfnB;AAgBEhH,EAAAA,IAAI,EAAE;AAhBR,CA9OW,EAgQX;AACE6G,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,cAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CADV;AAQED,EAAAA,IAAI,EAAE,mBARR;AASEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CATX;AAgBEgH,EAAAA,eAAe,EAAE,MAhBnB;AAiBEhH,EAAAA,IAAI,EAAE;AAjBR,CAhQW,CAAb;AAqRA,IAAagI,gBAAb;AAAA;;AAAA,mBAEST,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,MAApB,CAAP;AACD,GAJH;;AAAA,mBAKSc,OALT,GAKE,iBACEC,OADF,EAEEC,gBAFF;AAIE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,MAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAVH;;AAAA;AAAA;AACkBI,oBAAA,GAAMpB,MAAN;;AC9RlB;AAQA,IAAMA,MAAI,GAAG,CACX;AACEO,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,MAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAJX;AAUE+G,EAAAA,OAAO,EAAE,KAVX;AAWEC,EAAAA,eAAe,EAAE,MAXnB;AAYEhH,EAAAA,IAAI,EAAE;AAZR,CADW,EAeX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACE9G,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,EAKN;AACED,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GALM,CAFV;AAYED,EAAAA,IAAI,EAAE,SAZR;AAaEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAbX;AAmBE+G,EAAAA,OAAO,EAAE,KAnBX;AAoBEC,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CAfW,EAsCX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,aAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAJX;AAUE+G,EAAAA,OAAO,EAAE,KAVX;AAWEC,EAAAA,eAAe,EAAE,MAXnB;AAYEhH,EAAAA,IAAI,EAAE;AAZR,CAtCW,EAoDX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACE9G,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,EAKN;AACED,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GALM,EASN;AACED,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GATM,CAFV;AAgBED,EAAAA,IAAI,EAAE,cAhBR;AAiBEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAjBX;AAuBE+G,EAAAA,OAAO,EAAE,KAvBX;AAwBEC,EAAAA,eAAe,EAAE,YAxBnB;AAyBEhH,EAAAA,IAAI,EAAE;AAzBR,CApDW,EA+EX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,UAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAJX;AAUE+G,EAAAA,OAAO,EAAE,KAVX;AAWEC,EAAAA,eAAe,EAAE,MAXnB;AAYEhH,EAAAA,IAAI,EAAE;AAZR,CA/EW,EA6FX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACE9G,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,CAFV;AAQED,EAAAA,IAAI,EAAE,WARR;AASEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,SADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CATX;AAeE+G,EAAAA,OAAO,EAAE,KAfX;AAgBEC,EAAAA,eAAe,EAAE,MAhBnB;AAiBEhH,EAAAA,IAAI,EAAE;AAjBR,CA7FW,EAgHX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,EAFV;AAGE9G,EAAAA,IAAI,EAAE,QAHR;AAIEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAJX;AAUE+G,EAAAA,OAAO,EAAE,KAVX;AAWEC,EAAAA,eAAe,EAAE,MAXnB;AAYEhH,EAAAA,IAAI,EAAE;AAZR,CAhHW,EA8HX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACE9G,IAAAA,IAAI,EAAE,KADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,EAKN;AACED,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GALM,CAFV;AAYED,EAAAA,IAAI,EAAE,UAZR;AAaEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAbX;AAmBE+G,EAAAA,OAAO,EAAE,KAnBX;AAoBEC,EAAAA,eAAe,EAAE,YApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CA9HW,EAqJX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACE9G,IAAAA,IAAI,EAAE,QADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADM,EAKN;AACED,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GALM,CAFV;AAYED,EAAAA,IAAI,EAAE,WAZR;AAaEqH,EAAAA,OAAO,EAAE,CACP;AACErH,IAAAA,IAAI,EAAE,EADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADO,CAbX;AAmBE+G,EAAAA,OAAO,EAAE,KAnBX;AAoBEC,EAAAA,eAAe,EAAE,MApBnB;AAqBEhH,EAAAA,IAAI,EAAE;AArBR,CArJW,EA4KX;AACE+G,EAAAA,OAAO,EAAE,IADX;AAEEC,EAAAA,eAAe,EAAE,SAFnB;AAGEhH,EAAAA,IAAI,EAAE;AAHR,CA5KW,EAiLX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEnH,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEnH,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEnH,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CAFV;AAmBED,EAAAA,IAAI,EAAE,UAnBR;AAoBEC,EAAAA,IAAI,EAAE;AApBR,CAjLW,EAuMX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEnH,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEnH,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEnH,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CAFV;AAmBED,EAAAA,IAAI,EAAE,UAnBR;AAoBEC,EAAAA,IAAI,EAAE;AApBR,CAvMW,CAAb;AA+NA,IAAaiI,cAAb;AAAA;;AAAA,iBAESV,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,MAApB,CAAP;AACD,GAJH;;AAAA,iBAKSc,OALT,GAKE,iBAAeC,OAAf,EAAgCC,gBAAhC;AACE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,MAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAPH;;AAAA;AAAA;AACkBK,kBAAA,GAAMrB,MAAN;;ACxOlB;AAQA,IAAMA,MAAI,GAAG,CACX;AACEO,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,SAdR;AAeEqH,EAAAA,OAAO,EAAE,EAfX;AAgBEL,EAAAA,OAAO,EAAE,KAhBX;AAiBEC,EAAAA,eAAe,EAAE,YAjBnB;AAkBEhH,EAAAA,IAAI,EAAE;AAlBR,CADW,EAqBX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,MAdR;AAeEqH,EAAAA,OAAO,EAAE,EAfX;AAgBEL,EAAAA,OAAO,EAAE,KAhBX;AAiBEC,EAAAA,eAAe,EAAE,YAjBnB;AAkBEhH,EAAAA,IAAI,EAAE;AAlBR,CArBW,EAyCX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CAFV;AAmBED,EAAAA,IAAI,EAAE,kBAnBR;AAoBEqH,EAAAA,OAAO,EAAE,EApBX;AAqBEL,EAAAA,OAAO,EAAE,KArBX;AAsBEC,EAAAA,eAAe,EAAE,YAtBnB;AAuBEhH,EAAAA,IAAI,EAAE;AAvBR,CAzCW,EAkEX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,EAgBN;AACE8G,IAAAA,YAAY,EAAE,OADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAhBM,CAFV;AAwBED,EAAAA,IAAI,EAAE,kBAxBR;AAyBEqH,EAAAA,OAAO,EAAE,EAzBX;AA0BEL,EAAAA,OAAO,EAAE,KA1BX;AA2BEC,EAAAA,eAAe,EAAE,YA3BnB;AA4BEhH,EAAAA,IAAI,EAAE;AA5BR,CAlEW,EAgGX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,mBAdR;AAeEqH,EAAAA,OAAO,EAAE,EAfX;AAgBEL,EAAAA,OAAO,EAAE,KAhBX;AAiBEC,EAAAA,eAAe,EAAE,YAjBnB;AAkBEhH,EAAAA,IAAI,EAAE;AAlBR,CAhGW,EAoHX;AACEmH,EAAAA,QAAQ,EAAE,KADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,MAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,IAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,EAWN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GAXM,CAFV;AAmBED,EAAAA,IAAI,EAAE,cAnBR;AAoBEqH,EAAAA,OAAO,EAAE,EApBX;AAqBEL,EAAAA,OAAO,EAAE,KArBX;AAsBEC,EAAAA,eAAe,EAAE,YAtBnB;AAuBEhH,EAAAA,IAAI,EAAE;AAvBR,CApHW,EA6IX;AACE6G,EAAAA,MAAM,EAAE,EADV;AAEEE,EAAAA,OAAO,EAAE,KAFX;AAGEC,EAAAA,eAAe,EAAE,YAHnB;AAIEhH,EAAAA,IAAI,EAAE;AAJR,CA7IW,EAmJX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,MAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,IAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,UAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CAnJW,EA4KX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,SAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,UAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CA5KW,EAqMX;AACEiH,EAAAA,SAAS,EAAE,KADb;AAEEJ,EAAAA,MAAM,EAAE,CACN;AACEK,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,OAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GADM,EAON;AACEkH,IAAAA,OAAO,EAAE,IADX;AAEEJ,IAAAA,YAAY,EAAE,SAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPM,EAaN;AACEkH,IAAAA,OAAO,EAAE,KADX;AAEEJ,IAAAA,YAAY,EAAE,MAFhB;AAGE/G,IAAAA,IAAI,EAAE,UAHR;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAbM,CAFV;AAsBED,EAAAA,IAAI,EAAE,gBAtBR;AAuBEC,EAAAA,IAAI,EAAE;AAvBR,CArMW,EA8NX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,WATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CA9NW,EAmPX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,aATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CAnPW,EAwQX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,OAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,EAMN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,UAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GANM,CAFV;AAcED,EAAAA,IAAI,EAAE,kBAdR;AAeEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAfX;AAsBE+G,EAAAA,OAAO,EAAE,KAtBX;AAuBEC,EAAAA,eAAe,EAAE,MAvBnB;AAwBEhH,EAAAA,IAAI,EAAE;AAxBR,CAxQW,EAkSX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,SAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,SATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CAlSW,EAuTX;AACEmH,EAAAA,QAAQ,EAAE,IADZ;AAEEN,EAAAA,MAAM,EAAE,CACN;AACEC,IAAAA,YAAY,EAAE,QADhB;AAEE/G,IAAAA,IAAI,EAAE,aAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADM,CAFV;AASED,EAAAA,IAAI,EAAE,mBATR;AAUEqH,EAAAA,OAAO,EAAE,CACP;AACEN,IAAAA,YAAY,EAAE,MADhB;AAEE/G,IAAAA,IAAI,EAAE,EAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GADO,CAVX;AAiBE+G,EAAAA,OAAO,EAAE,KAjBX;AAkBEC,EAAAA,eAAe,EAAE,MAlBnB;AAmBEhH,EAAAA,IAAI,EAAE;AAnBR,CAvTW,CAAb;AA8UA,IAAakI,eAAb;AAAA;;AAAA,kBAESX,eAFT,GAEE;AACE,WAAO,IAAIC,YAAK,CAACC,SAAV,CAAoBb,MAApB,CAAP;AACD,GAJH;;AAAA,kBAKSc,OALT,GAKE,iBAAeC,OAAf,EAAgCC,gBAAhC;AACE,WAAO,IAAIC,eAAJ,CAAaF,OAAb,EAAsBf,MAAtB,EAA4BgB,gBAA5B,CAAP;AACD,GAPH;;AAAA;AAAA;AACkBM,mBAAA,GAAMtB,MAAN;;ACvUX,IAAMuB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,SAAD;AACjC,MAAMC,KAAK,gBAAQD,SAAS,CAACC,KAAlB,CAAX;AAGA;;;AACA,SAAOA,KAAK,CAAC,cAAD,CAAZ;AAEA,SAAOC,sBAAiB,CAACC,IAAlB,CAAuBH,SAAS,CAACI,MAAjC,EAAyCH,KAAzC,EAAgDD,SAAS,CAAC9F,OAA1D,CAAP;AACD,CARM;;AChBA,IAAMmG,oBAAoB,GAAG,CAClC;AACE5B,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,qBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,UAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KApCU,EAyCV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,uBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAzCU,EA8CV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,MAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA9CU,EAmDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAnDU,EAwDV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAxDU,EA6DV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA7DU,EAkEV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,mBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAlEU,CADd;AAyEE8G,IAAAA,YAAY,EAAE,2BAzEhB;AA0EE/G,IAAAA,IAAI,EAAE,OA1ER;AA2EEC,IAAAA,IAAI,EAAE;AA3ER,GADM,EA8EN;AACE8G,IAAAA,YAAY,EAAE,SADhB;AAEE/G,IAAAA,IAAI,EAAE,WAFR;AAGEC,IAAAA,IAAI,EAAE;AAHR,GA9EM,CADV;AAqFED,EAAAA,IAAI,EAAE,eArFR;AAsFEqH,EAAAA,OAAO,EAAE,EAtFX;AAuFEJ,EAAAA,eAAe,EAAE,MAvFnB;AAwFEhH,EAAAA,IAAI,EAAE;AAxFR,CADkC,CAA7B;;ICmEM0I,WAAW,GAAG,SAAdA,WAAc,CACzBC,gBADyB,EAEzBhI,KAFyB;AAIzB,SAAOgI,gBAAgB,CAACD,WAAjB,CAA6B/H,KAA7B,CAAP;AACD,CALM;AAOP,IAAaiI,YAAY;AAAA,yEAAG,iBAC1BD,gBAD0B,EAE1BhI,KAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIFgI,gBAAgB,CAACC,YAAjB,CAA8BjI,KAA9B,CAJE;;AAAA;AAIpBkI,YAAAA,SAJoB;AAAA,6CAKnBA,SALmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZD,YAAY;AAAA;AAAA;AAAA,GAAlB;AAQP,IAAaE,cAAc;AAAA,0EAAG,kBAC5BH,gBAD4B,EAE5BhI,KAF4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAIJgI,gBAAgB,CAACC,YAAjB,CAA8BjI,KAA9B,CAJI;;AAAA;AAItBkI,YAAAA,SAJsB;AAAA,8CAKrBA,SAAS,CAACE,WALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAdD,cAAc;AAAA;AAAA;AAAA,GAApB;AAQP,IAAaE,YAAY,GAAG,SAAfA,YAAe,CAC1BL,gBAD0B,EAE1BM,MAF0B,EAG1BC,SAH0B;AAK1B,SAAOP,gBAAgB,CAACQ,iBAAjB,CAAmCF,MAAnC,EAA2CC,SAA3C,CAAP;AACD,CANM;AAQP,IAAaE,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCT,gBADiC,EAEjCU,mBAFiC;MAEjCA;AAAAA,IAAAA,sBAA8BpH,qBAAqB;;;AAEnD0G,EAAAA,gBAAgB,CAACW,gBAAjB,CAAkCD,mBAAlC;AACD,CALM;AAOP,IAAaE,SAAS,GAAG,SAAZA,SAAY,CACvB5I,KADuB,EAEvBN,OAFuB,EAGvBC,uBAHuB;AAKvB,MAAMkJ,aAAa,GAAGpJ,YAAY,CAACC,OAAD,EAAUC,uBAAV,CAAlC;AACA,SAAOgI,sBAAiB,CAACC,IAAlB,CAAuBiB,aAAvB,EAAsC3J,YAAtC,EAAoDc,KAApD,CAAP;AACD,CAPM;AAYP,IAAa8I,oBAAoB;AAAA,0EAAG,kBAClC9I,KADkC,EAElC+I,MAFkC,EAGlCrJ,OAHkC,EAIlCC,uBAJkC;AAAA;AAAA;AAAA;AAAA;AAAA;AAM5BkI,YAAAA,MAN4B,GAMnBpI,YAAY,CAACC,OAAD,EAAUC,uBAAV,CANO;AAO5B+H,YAAAA,KAP4B,GAOpBxI,YAPoB;AAQ5B8J,YAAAA,KAR4B,GAQpBhJ,KARoB;AAU5ByH,YAAAA,SAV4B,GAUL;AAC3BI,cAAAA,MAAM,EAANA,MAD2B;AAE3BH,cAAAA,KAAK,EAALA,KAF2B;AAG3B/F,cAAAA,OAAO,EAAEqH;AAHkB,aAVK;AAgB5BC,YAAAA,SAhB4B,GAgBhBzB,mBAAmB,CAACC,SAAD,CAhBH;AAkB5ByB,YAAAA,GAlB4B,GAkBtB,IAAIpC,aAAJ,CAAcgB,oBAAd,EAAoCqB,kBAApC,CACV,eADU,EAEV,CAACnJ,KAAD,EAAQiJ,SAAR,CAFU,CAlBsB;AAAA;AAAA,mBAuBWF,MAAM,CAACK,WAAP,CAC3CC,cAAQ,CAACH,GAAD,CADmC,CAvBX;;AAAA;AAuB5BI,YAAAA,8BAvB4B;AAAA,8CA2B3BA,8BA3B2B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBR,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AA8BP,IAAaS,sBAAsB;AAAA,0EAAG,kBACpCvJ,KADoC,EAEpC+I,MAFoC,EAGpCrJ,OAHoC,EAIpCC,uBAJoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAM9BkI,YAAAA,MAN8B,GAMrBpI,YAAY,CAACC,OAAD,EAAUC,uBAAV,CANS;AAO9B+H,YAAAA,KAP8B,GAOtBxI,YAPsB;AAQ9B8J,YAAAA,KAR8B,GAQtBhJ,KARsB;AAAA;AAAA,mBAUI+I,MAAM,CAACS,cAAP,CACtC3B,MADsC,EAEtCH,KAFsC,EAGtCsB,KAHsC,CAVJ;;AAAA;AAU9BS,YAAAA,yBAV8B;AAAA,8CAgB7BA,yBAhB6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBF,sBAAsB;AAAA;AAAA;AAAA,GAA5B;AAmBP,IAAaG,qBAAqB;AAAA,0EAAG,kBACnCC,QADmC,EAEnCC,aAFmC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAI/BC,YAAAA,gBAJ+B,GAIH,KAJG;;AAAA,iBAK/BF,QAAQ,CAACG,OALsB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAMVH,QAAQ,CAACG,OAAT,CAAiBF,aAAjB,CANU;;AAAA;AAM7BG,YAAAA,UAN6B;;AAOjC;AACA;AACA,gBAAIA,UAAU,IAAIA,UAAU,IAAI,IAAhC,EAAsC;AACpCF,cAAAA,gBAAgB,GAAG,IAAnB;AACD;;AAXgC;AAa/BG,YAAAA,UAb+B,GAalB,CAAC,CAAEL,QAAgB,CAACM,mBAbF;;AAcnC,gBAAID,UAAJ,EAAgB;AACdH,cAAAA,gBAAgB,GAAG,IAAnB;AACD,aAhBkC;;;AAkB/BK,YAAAA,aAlB+B,GAkBdP,QAAgB,CAACA,QAlBH;;AAmBnC,gBAAIO,aAAJ,YAAIA,aAAa,CAAEC,eAAnB,EAAoC;AAC5BC,cAAAA,0BAD4B,GACC,CAAC,EACjC,0BAAAF,aAAqB,CAACG,SAAtB,qEAAiCC,SAAjC,4CAA4CC,WAA5C,MAA4D,UAD3B,CADF;;AAIlC,kBAAIH,0BAAJ,EAAgC;AAC9BP,gBAAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AA1BkC,8CA4B5BA,gBA5B4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBH,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AA+BP,IAAac,SAAS;AAAA,0EAAG,kBACvBxK,KADuB,EAEvByK,aAFuB,EAGvB1B,MAHuB,EAIvBY,QAJuB,EAKvBjK,OALuB,EAMvBC,uBANuB,EAOvB+K,cAPuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUjBC,YAAAA,MAViB,GAUmB,KAVnB;;AAAA,kBAYjB,CAAAD,cAAc,QAAd,YAAAA,cAAc,CAAEE,aAAhB,MAAkC,SAZjB;AAAA;AAAA;AAAA;;AAanBD,YAAAA,MAAM,GAAG,SAAT;AAbmB;AAAA;;AAAA;AAAA,kBAcV,CAAAD,cAAc,QAAd,YAAAA,cAAc,CAAEE,aAAhB,MAAkC,KAdxB;AAAA;AAAA;AAAA;;AAenBD,YAAAA,MAAM,GAAG,KAAT;AAfmB;AAAA;;AAAA;AAAA,kBAkBf,CAAAD,cAAc,QAAd,YAAAA,cAAc,CAAEG,uBAAhB,MAA4C,KAlB7B;AAAA;AAAA;AAAA;;AAmBjBF,YAAAA,MAAM,GAAG,KAAT;AAnBiB;AAAA;;AAAA;AAAA;AAAA,mBA2BcjB,qBAAqB,CAClDC,QADkD,EAElDc,aAFkD,CA3BnC;;AAAA;AA2BXZ,YAAAA,gBA3BW;;AA+BjB,gBAAIA,gBAAJ,EAAsB;AACpBc,cAAAA,MAAM,GAAG,SAAT;AACD,aAFD,MAEO;AACLA,cAAAA,MAAM,GAAG,KAAT;AACD;;AAnCgB;AAAA,2BAuCbA,MAvCa;AAAA,8CAwCd,KAxCc,yBAiDd,SAjDc;AAAA;;AAAA;AAAA;AAAA,mBAyCgBpB,sBAAsB,CACrDvJ,KADqD,EAErD+I,MAFqD,EAGrDrJ,OAHqD,EAIrDC,uBAJqD,CAzCtC;;AAAA;AAyCXmL,YAAAA,kBAzCW;AA+CjB9J,YAAAA,SAAS,GAAG+J,kCAAkC,CAACD,kBAAD,CAA9C;AA/CiB;;AAAA;AAAA;AAAA,mBAkD8BhC,oBAAoB,CACjE9I,KADiE,EAEjE+I,MAFiE,EAGjErJ,OAHiE,EAIjEC,uBAJiE,CAlDlD;;AAAA;AAkDXqL,YAAAA,mBAlDW,GAkDYhK,SAlDZ;AAwDjBA,YAAAA,SAAS,GACPiK,uCAAuC,CAACD,mBAAD,CADzC;AAxDiB;;AAAA;AAAA,kBA4DX,IAAI/I,KAAJ,uCAA8C0I,MAA9C,CA5DW;;AAAA;AA+DfO,YAAAA,WA/De,gBAgEhBlL,KAhEgB;AAiEnBgB,cAAAA,SAAS,EAATA;AAjEmB;AAAA,8CAoEdkK,WApEc;;AAAA;AAAA;AAAA;AAsErBC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AAtEqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATZ,SAAS;AAAA;AAAA;AAAA,GAAf;AA4EP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAaO,kCAAkC,GAAG,SAArCA,kCAAqC,CAACM,YAAD;AAChD;AACA;AACA,MAAMrK,SAAS,GAAGsK,oBAAc,CAACD,YAAD,CAAhC;AACA,SAAOvI,eAAS,CAAC,CAACyI,aAAO,CAACvK,SAAS,CAACwK,CAAX,CAAR,EAAuBxK,SAAS,CAACyK,CAAjC,EAAoCzK,SAAS,CAACwB,CAA9C,EAAiD,MAAjD,CAAD,CAAhB;AACD,CALM;AAOP,IAAayI,uCAAuC,GAAG,SAA1CA,uCAA0C,CACrDI,YADqD;AAGrD;AACA;AACA;AACA,SAAOvI,eAAS,CAAC,CAACuI,YAAD,EAAe,MAAf,CAAD,CAAhB;AACD,CAPM;AASP,IAAaK,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClC1L,KADkC,EAElCgB,SAFkC,EAGlCtB,OAHkC,EAIlCC,uBAJkC;AAMlC,MAAMkJ,aAAa,GAAGpJ,YAAY,CAACC,OAAD,EAAUC,uBAAV,CAAlC;;AACA,MAAI;AACF,QAAMgM,KAAK,GAAG3L,KAAK,CAACC,YAAN,CAAmBC,WAAnB,EAAd;AACA,QAAMkD,MAAM,GAAGC,mBAAa,CAACrC,SAAD,CAA5B,CAFE;;AAIF,QAAM4K,UAAU,GAAGrI,kBAAY,CAACvC,SAAD,EAAY,CAAZ,EAAe,CAAf,CAA/B,CAJE;;AAMF,QAAM6K,SAAS,GAAGtI,kBAAY,CAACvC,SAAD,EAAY,CAAZ,EAAeoC,MAAM,GAAG,CAAxB,CAA9B;AAEA,QAAM0I,mBAAmB,GAAGhJ,eAAS,CAAC,CAAC+I,SAAD,EAAYD,UAAZ,CAAD,CAArC;AACA,QAAMG,gBAAgB,GAAGC,mBAAa,CAACF,mBAAD,CAAtC;AAEA,QAAM/C,MAAM,GAAGkD,sBAAe,CAC5BpD,aAD4B,EAE5B3J,YAF4B,EAG5Bc,KAH4B,EAI5B+L,gBAJ4B,CAA9B;AAOA,WAAOJ,KAAK,CAACzL,WAAN,OAAwB6I,MAAM,CAAC7I,WAAP,EAA/B;AACD,GAnBD,CAmBE,OAAOgM,CAAP,EAAU;AACVf,IAAAA,OAAO,CAACC,GAAR,CAAYc,CAAZ;AACA,WAAO,KAAP;AACD;AACF,CA9BM;AAgCP,IAAaC,UAAU,GAAG,SAAbA,UAAa,CACxBC,WADwB,EAExBC,WAFwB,EAGxBnL,WAHwB;;;AAKxB;AACA,MAAIZ,gBAAJ;AACA,MAAIM,cAAJ;AAEA,MAAM0L,gCAAgC,GAAGF,WAAW,CAAChJ,MAAZ,KAAuB,CAAhE;;AACA,MAAIkJ,gCAAJ,EAAsC;AACpC,QAAMC,UAAU,GAAGH,WAAW,CAAC,CAAD,CAA9B;AACA9L,IAAAA,gBAAgB,GAAG9B,mBAAS,CAACC,IAAV,CAAeiH,kBAAkB,CAAC6G,UAAD,CAAjC,CAAnB;AACA3L,IAAAA,cAAc,GAAGmE,eAAe,CAACwH,UAAD,EAAa,KAAb,CAAhC;AACD,GAJD,MAIO;AACL,QAAMC,iBAAiB,GAAGJ,WAAW,CAACzJ,GAAZ,CAAgB,UAAC8J,EAAD;AAAA,aAAQ/G,kBAAkB,CAAC+G,EAAD,CAA1B;AAAA,KAAhB,CAA1B;AACA,QAAMC,eAAe,GAAGN,WAAW,CAACzJ,GAAZ,CAAgB,UAAC8J,EAAD;AAAA,aAAQ1H,eAAe,CAAC0H,EAAD,EAAK,IAAL,CAAvB;AAAA,KAAhB,CAAxB;AACA,QAAME,eAAe,GAAGnI,yBAAyB,CAC/CgI,iBAD+C,EAE/CE,eAF+C,CAAjD;AAIA9L,IAAAA,cAAc,GAAG+L,eAAjB;AACArM,IAAAA,gBAAgB,GAAG9B,mBAAS,CAACC,IAAV,CAAe,CAAf,CAAnB,CARK;AASN;;;AAGD,MAAI8B,gBAAJ;AACA,MAAIM,cAAJ;AAEA,MAAM+L,gCAAgC,GAAGP,WAAW,CAACjJ,MAAZ,KAAuB,CAAhE;;AAEA,MAAIwJ,gCAAJ,EAAsC;AACpC,QAAMC,UAAU,GAAGR,WAAW,CAAC,CAAD,CAA9B;AACA9L,IAAAA,gBAAgB,GAAG/B,mBAAS,CAACC,IAAV,CAAeiH,kBAAkB,CAACmH,UAAD,CAAjC,CAAnB;AACAhM,IAAAA,cAAc,GAAGkE,eAAe,CAAC8H,UAAD,EAAa,KAAb,CAAhC;AACD,GAJD,MAIO;AACL,QAAMC,iBAAiB,GAAGT,WAAW,CAAC1J,GAAZ,CAAgB,UAACoK,EAAD;AAAA,aAAQrH,kBAAkB,CAACqH,EAAD,CAA1B;AAAA,KAAhB,CAA1B;AACA,QAAMC,eAAe,GAAGX,WAAW,CAAC1J,GAAZ,CAAgB,UAACoK,EAAD;AAAA,aAAQhI,eAAe,CAACgI,EAAD,EAAK,IAAL,CAAvB;AAAA,KAAhB,CAAxB;AACA,QAAME,eAAe,GAAGzI,yBAAyB,CAC/C/B,qBAAqB,CAACqK,iBAAD,CAD0B,EAE/CE,eAF+C,CAAjD;AAIAnM,IAAAA,cAAc,GAAGoM,eAAjB;AACA1M,IAAAA,gBAAgB,GAAG/B,mBAAS,CAACC,IAAV,CAAe,CAAf,CAAnB,CARK;AASN;;AAED,MAAMuB,KAAK,GAAGiB,2BAA2B;AACvCX,IAAAA,gBAAgB,EAAEA,gBADqB;AAEvCM,IAAAA,cAAc,EAAEA,cAFuB;AAGvCT,IAAAA,YAAY,2BAAEe,WAAW,CAACf,YAAd,oCAA8BzB,YAHH;AAIvC6B,IAAAA,gBAAgB,EAAEA,gBAJqB;AAKvCM,IAAAA,cAAc,EAAEA,cALuB;AAMvCqM,IAAAA,eAAe,2BAAEhM,WAAW,CAACgM,eAAd,oCAAiC;AANT,KAOpChM,WAPoC,EAAzC;AAUA,SAAOlB,KAAP;AACD,CAzDM;AA2DP,IAAamN,eAAe;AAAA,0EAAG,kBAC7BjC,WAD6B,EAE7BlD,gBAF6B,EAG7BO,SAH6B;AAAA;AAAA;AAAA;AAAA;AAAA,8CAKtBP,gBAAgB,CAACoF,eAAjB,CACLrN,cAAc,CAACmL,WAAD,CADT,EAELA,WAAW,CAAC3K,gBAFP,EAGL2K,WAAW,CAAClK,SAHP,EAILuH,SAJK,CALsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAf4E,eAAe;AAAA;AAAA;AAAA,GAArB;AAaP;;;;;;;;;AAQA,IAAaE,iBAAiB;AAAA,0EAAG,kBAC/BzD,aAD+B,EAE/B0D,4BAF+B,EAG/BC,KAH+B,EAI/B5D,QAJ+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAMvB4D,KAAK,CAAClO,IANiB;AAAA,8CAOxB,OAPwB,wBAuBxB,QAvBwB,yBA4CxB,SA5CwB;AAAA;;AAAA;AAQrBmO,YAAAA,KARqB,GAQblG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2C8G,QAA3C,CARa;AAAA;AAAA,mBASsB6D,KAAK,CAACC,SAAN,CAC/C7D,aAD+C,EAE/C0D,4BAF+C,CATtB;;AAAA;AASrBI,YAAAA,uBATqB;AAa3B;AACMC,YAAAA,wBAdqB,GAcMnP,mBAAS,CAACC,IAAV,CAC/BmP,YAAY,CAAC/N,QAAb,EAD+B,EAE/BgO,GAF+B,CAE3B,oBAF2B,CAdN;AAiBrBC,YAAAA,cAjBqB,GAiBJJ,uBAAuB,CAACK,GAAxB,CACrBJ,wBADqB,CAjBI;AAAA,8CAoBpB;AACLK,cAAAA,gBAAgB,EAAEF;AADb,aApBoB;;AAAA;AAwBrBG,YAAAA,MAxBqB,GAwBZ1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4C8G,QAA5C,CAxBY;AAyBrBuE,YAAAA,2BAzBqB,GAyBSD,MAAM,CAACE,gBAAP,CAClCvE,aADkC,EAElC0D,4BAFkC,CAzBT;AA6BrBc,YAAAA,iCA7BqB,GA6BeH,MAAM,CAACI,WAAP,CACxCd,KAAK,CAAC3J,OADkC,CA7Bf;AAAA;AAAA,mBAiCnB0K,OAAO,CAACC,GAAR,CAAY,CAChBL,2BADgB,EAEhBE,iCAFgB,CAAZ,CAjCmB;;AAAA;AAAA;AAgCpBI,YAAAA,oBAhCoB;AAgCEC,YAAAA,0BAhCF;AAqCrBC,YAAAA,eArCqB,GAsCzBD,0BAA0B,CAACvO,WAA3B,OACAoN,4BAA4B,CAACpN,WAA7B,EAvCyB;AAAA,8CAwCpB;AACL8N,cAAAA,gBAAgB,EAAEQ,oBAAF,WAAEA,oBAAF,GAA0B,KADrC;AAELE,cAAAA,eAAe,EAAEA;AAFZ,aAxCoB;;AAAA;AA6CrBC,YAAAA,OA7CqB,GA6CXtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6C8G,QAA7C,CA7CW;AAAA;AAAA,mBA8CSgF,OAAO,CAACR,gBAAR,CAClCvE,aADkC,EAElC0D,4BAFkC,CA9CT;;AAAA;AA8CrBsB,YAAAA,qBA9CqB;AAAA,8CAkDpB;AACLZ,cAAAA,gBAAgB,EAAEY,qBAAF,WAAEA,qBAAF,GAA2B;AADtC,aAlDoB;;AAAA;AAAA,kBAsDrB,IAAIxM,wBAAJ,CAA8BmL,KAAa,CAAClO,IAA5C,CAtDqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBgO,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AA2DP;;AACA,IAAaO,YAAY,gBAAGpP,mBAAS,CAACC,IAAV,CAAe,CAAf,EAAkBoQ,GAAlB,CAAsB,GAAtB,CAArB;AAEP;;;;;;;;AAOA,IAAaC,YAAY;AAAA,0EAAG,kBAC1BxB,4BAD0B,EAE1BC,KAF0B,EAG1BxE,MAH0B,EAI1BR,SAJ0B,EAK1BwG,OAL0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAI1BxG,SAJ0B;AAI1BA,cAAAA,SAJ0B,GAIQ,EAJR;AAAA;;AAAA,gBAK1BwG,OAL0B;AAK1BA,cAAAA,OAL0B,GAKP,IALO;AAAA;;AAAA,2BAOlBxB,KAAK,CAAClO,IAPY;AAAA,8CAQnB,OARmB,wBAkBnB,QAlBmB,wBA4BnB,SA5BmB;AAAA;;AAAA;AAShBmO,YAAAA,KATgB,GASRlG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2CkG,MAA3C,CATQ;AAUhBiG,YAAAA,sBAVgB,GAUSxB,KAAK,CAACuB,OAAN,CAC7BzB,4BAD6B,EAE7ByB,OAAO,GAAGnB,YAAY,CAAC/N,QAAb,EAAH,GAA6B,CAFP,eAIxB0I,SAJwB,EAVT;AAAA,8CAiBfyG,sBAjBe;;AAAA;AAmBhBf,YAAAA,MAnBgB,GAmBP1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4CkG,MAA5C,CAnBO;AAoBhBmF,YAAAA,2BApBgB,GAoBcD,MAAM,CAACgB,iBAAP,CAClC3B,4BADkC,EAElCyB,OAFkC,eAI7BxG,SAJ6B,EApBd;AAAA,8CA2Bf2F,2BA3Be;;AAAA;AA6BhBS,YAAAA,OA7BgB,GA6BNtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6CkG,MAA7C,CA7BM;AAAA;AAAA,mBA8Bc4F,OAAO,CAACM,iBAAR,CAClC3B,4BADkC,EAElCyB,OAFkC,eAI7BxG,SAJ6B,EA9Bd;;AAAA;AA8BhBqG,YAAAA,qBA9BgB;AAAA,8CAqCfA,qBArCe;;AAAA;AAAA,kBAuChB,IAAIxM,wBAAJ,CAA8BmL,KAAa,CAAClO,IAA5C,CAvCgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZyP,YAAY;AAAA;AAAA;AAAA,GAAlB;AA2CP;;;;;;;;AAOA,IAAaI,sBAAsB;AAAA,2EAAG,mBACpC5B,4BADoC,EAEpCC,KAFoC,EAGpCxE,MAHoC,EAIpCR,SAJoC,EAKpCwG,OALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKpCA,OALoC;AAKpCA,cAAAA,OALoC,GAKjB,IALiB;AAAA;;AAAA,4BAO5BxB,KAAK,CAAClO,IAPsB;AAAA,gDAQ7B,OAR6B,yBAe7B,QAf6B,yBAsB7B,SAtB6B;AAAA;;AAAA;AAS1BmO,YAAAA,KAT0B,GASlBlG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2CkG,MAA3C,CATkB;AAU1BiG,YAAAA,sBAV0B,GAUDxB,KAAK,CAAC2B,WAAN,CAAkBJ,OAAlB,CAC7BzB,4BAD6B,EAE7ByB,OAAO,GAAGnB,YAAH,GAAkB,CAFI,CAVC;AAAA,+CAczBoB,sBAdyB;;AAAA;AAgB1Bf,YAAAA,MAhB0B,GAgBjB1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4CkG,MAA5C,CAhBiB;AAiB1BmF,YAAAA,2BAjB0B,GAiBID,MAAM,CAACkB,WAAP,CAAmBF,iBAAnB,CAClC3B,4BADkC,EAElCyB,OAFkC,CAjBJ;AAAA,+CAqBzBb,2BArByB;;AAAA;AAuB1BS,YAAAA,OAvB0B,GAuBhBtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6CkG,MAA7C,CAvBgB;AAAA;AAAA,mBAwBI4F,OAAO,CAACQ,WAAR,CAAoBF,iBAApB,CAClC3B,4BADkC,EAElCyB,OAFkC,CAxBJ;;AAAA;AAwB1BH,YAAAA,qBAxB0B;AAAA,+CA4BzBA,qBA5ByB;;AAAA;AAAA,kBA8B1B,IAAIxM,wBAAJ,CAA8BmL,KAAa,CAAClO,IAA5C,CA9B0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtB6P,sBAAsB;AAAA;AAAA;AAAA,GAA5B;AAkCP,IAAaE,6BAA6B,GAAG,SAAhCA,6BAAgC,CAACpO,SAAD;AAC3C,MAAMoC,MAAM,GAAGC,mBAAa,CAACrC,SAAD,CAA5B;AACA,MAAM4J,aAAa,GAAGrH,kBAAY,CAACvC,SAAD,EAAYoC,MAAM,GAAG,CAArB,CAAlC;AACA,SAAOwH,aAAP;AACD,CAJM;AAMP,IAAayE,uBAAuB;AAAA,2EAAG,mBACrCnE,WADqC,EAErClD,gBAFqC,EAGrCsH,UAHqC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAM7BtH,gBAAgB,CAACmH,WAAjB,CAA6BI,SAA7B,CACJxP,cAAc,CAACmL,WAAD,CADV,EAEJA,WAAW,CAAC3K,gBAFR,EAGJ2K,WAAW,CAAClK,SAHR,CAN6B;;AAAA;AAK/BwO,YAAAA,2BAL+B;AAAA,+CAW9BA,2BAX8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBH,uBAAuB;AAAA;AAAA;AAAA,GAA7B;AAcP,IAAaI,yCAAyC,GAAG,SAA5CA,yCAA4C,CACvDC,gBADuD,EAEvDC,WAFuD;;;AAIvD,MAAMrM,YAAY,GAAGoM,gBAAgB,CAACpM,YAAtC;;AAEA,UAAQA,YAAR;AACE,SAAK1E,oBAAY,CAACmE,KAAlB;AACE,UAAM6M,YAAY,GAAGF,gBAArB;AACA,UAAMG,cAAc,GAAuC;AACzDxQ,QAAAA,IAAI,EAAE,OADmD;AAEzDsG,QAAAA,MAAM,EAAEgK,WAFiD;AAGzD9M,QAAAA,YAAY,EAAE+M,YAAY,CAAC/M;AAH8B,OAA3D;AAKA,aAAO,CAACgN,cAAD,CAAP;;AACF,SAAKjR,oBAAY,CAACiF,MAAlB;AACE,UAAMiM,aAAa,GAAGJ,gBAAtB;AACA,UAAMK,eAAe,GAAwC;AAC3D1Q,QAAAA,IAAI,EAAE,QADqD;AAE3DwD,QAAAA,YAAY,EAAEiN,aAAa,CAACjN,YAF+B;AAG3De,QAAAA,OAAO,EAAEkM,aAAa,CAAClM;AAHoC,OAA7D;AAKA,aAAO,CAACmM,eAAD,CAAP;;AACF,SAAKnR,oBAAY,CAACuF,OAAlB;AACE,UAAM6L,cAAc,GAAGN,gBAAvB;AACA,UAAMO,gBAAgB,GACpB;AACE5Q,QAAAA,IAAI,EAAE,SADR;AAEEwD,QAAAA,YAAY,EAAEmN,cAAc,CAACnN,YAF/B;AAGEe,QAAAA,OAAO,EAAEoM,cAAc,CAAChM,QAAf,CAAwB,CAAxB,CAHX;AAIE2B,QAAAA,MAAM,2BAAEqK,cAAc,CAAC1L,WAAf,CAA2B,CAA3B,CAAF,oCAAmC;AAJ3C,OADF;AAOA,aAAO,CAAC2L,gBAAD,CAAP;;AACF,SAAKrR,oBAAY,CAAC8F,UAAlB;AACE,UAAMwL,qBAAqB,GACzBR,gBADF;AAEA,UAAMS,YAAY,GAAGC,OAAO,CAC1BF,qBAAqB,CAACzL,eAAtB,CAAsC9B,GAAtC,CAA0C,UAAC4K,KAAD,EAAQ8C,GAAR;AAAA,eACxCZ,yCAAyC,CACvClC,KADuC,EAEvC2C,qBAAqB,CAACrL,OAAtB,CAA8BwL,GAA9B,CAFuC,CADD;AAAA,OAA1C,CAD0B,CAA5B;AAQA,UAAMC,8BAA8B,GAClCH,YAAY,CAACxN,GAAb,CAAiB,UAAC4N,WAAD,EAAcF,GAAd;AACf,YAAMG,8BAA8B,GAClCN,qBAAqB,CAACrL,OAAtB,CAA8BwL,GAA9B,CADF;;AAGA,4BACKE,WADL;AAEE5K,UAAAA,MAAM,EAAE6K;AAFV;AAID,OARD,CADF;AAUA,aAAOF,8BAAP;;AACF;AACE,YAAM,IAAIrO,KAAJ,gCACyBqB,YADzB,oBACyBA,YAAoB,CAAEjE,IAD/C,EAAN;AAlDJ;AAsDD,CA5DM;AA8DP,IAAaoR,kBAAkB,GAAG,SAArBA,kBAAqB,CAChCzQ,KADgC;AAGhC,MAAM0Q,qBAAqB,GAAG5L,eAAe,CAAC9E,KAAK,CAACY,cAAP,CAA7C;AACA,MAAM+P,qBAAqB,GAAG7L,eAAe,CAAC9E,KAAK,CAACa,cAAP,CAA7C;AAEA,MAAMuL,WAAW,GAAGqD,yCAAyC,CAC3DiB,qBAD2D,EAE3D1Q,KAAK,CAACM,gBAFqD,CAA7D;AAIA,MAAM+L,WAAW,GAAGoD,yCAAyC,CAC3DkB,qBAD2D,EAE3D3Q,KAAK,CAACO,gBAFqD,CAA7D;AAKA,SAAO;AACL6L,IAAAA,WAAW,EAAXA,WADK;AAELC,IAAAA,WAAW,EAAXA;AAFK,GAAP;AAID,CAnBM;AAsBP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3qBA,IAAMuE,0BAA0B,GAAG,SAA7BA,0BAA6B,CACjClR,OADiC,EAEjCmR,WAFiC;MAEjCA;AAAAA,IAAAA,cAA+BC;;;AAE/B,MAAMC,aAAa,GAAGrR,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAAtB;AACA,MAAMmR,sBAAsB,GAC1BH,WACD,CAACE,aAAD,CAFD;AAGA,SAAOC,sBAAP;AACD,CATD;;AAWA,AAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CACvC5O,SADuC,EAEvC3C,OAFuC,EAGvCmR,WAHuC;MAGvCA;AAAAA,IAAAA,cAA+BC;;;AAE/B,MAAMI,eAAe,GAAGN,0BAA0B,CAAClR,OAAD,EAAUmR,WAAV,CAAlD;;AACA,MAAI,CAACK,eAAL,EAAsB;AACpB,UAAM,IAAI5O,kBAAJ,CAAuB5C,OAAvB,CAAN;AACD;;AACD,UAAQ2C,SAAR;AACE,SAAK,OAAL;AACE,aAAO6O,eAAe,CAACC,UAAvB;;AACF,SAAK,QAAL;AACE,aAAOD,eAAe,CAACE,WAAvB;;AACF,SAAK,SAAL;AACE,aAAOF,eAAe,CAACG,YAAvB;;AACF;AACE,YAAM,IAAIjP,wBAAJ,CAA6BC,SAA7B,CAAN;AARJ;AAUD,CAnBM;AAqBP,AAAO,IAAMiP,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjC5R,OADiC,EAEjCmR,WAFiC;MAEjCA;AAAAA,IAAAA,cAA+BC;;;AAE/B,MAAMI,eAAe,GAAGN,0BAA0B,CAAClR,OAAD,EAAUmR,WAAV,CAAlD;;AACA,MAAI,CAACK,eAAL,EAAsB;AACpB,UAAM,IAAI5O,kBAAJ,CAAuB5C,OAAvB,CAAN;AACD;;AACD,SAAOwR,eAAe,CAACK,SAAvB;AACD,CATM;AAWP,AAAO,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CACnC9R,OADmC,EAEnCmR,WAFmC;;;MAEnCA;AAAAA,IAAAA,cAA+BC;;;AAE/B,MAAMI,eAAe,GAAGN,0BAA0B,CAAClR,OAAD,EAAUmR,WAAV,CAAlD;AACA,kCAAOK,eAAP,oBAAOA,eAAe,CAAEO,kBAAxB,oCAA8C,IAA9C;AACD,CANM;;;ACjDP,IAAMC,6BAA6B,sDAChC7S,2BAAmB,CAAC8S,OADY,IACF,GADE,wBAEhC9S,2BAAmB,CAAC+S,aAFY,IAEI,GAFJ,wBAGhC/S,2BAAmB,CAACgT,KAHY,IAGJ,GAHI,wBAAnC;;ACFO,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,CAAD;AACnB,SAAO,IAAIzD,OAAJ,CAAkB,UAAC0D,OAAD;AACvB,QAAMC,OAAO,GAAGC,UAAU,CAAC;AACzBC,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACAD,MAAAA,OAAO;AACR,KAHyB,EAGvBD,CAHuB,CAA1B;AAID,GALM,CAAP;AAMD,CAPM;;AC4EP;;;;IAGMK;AAaJ,qBACEzI,QADF,EAEEZ,MAFF,EAGErJ,OAHF,EAIE2S,gBAJF;;;;;;;;;;;;AA+EO,oBAAA;AAAA,gEAAc,iBAAOrS,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iDACZsS,WAAY,CAAC,KAAI,CAACtK,gBAAN,EAAwBhI,KAAxB,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAd;;AAAA;AAAA;AAAA;AAAA;AAIP;;;;;;;;;AAOO,wCAAA;AAAA,iEAAkC,kBACvCA,KADuC,EAEvCuS,WAFuC,EAGvCC,4BAHuC,EAIvCC,sCAJuC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEvCF,WAFuC;AAEvCA,kBAAAA,WAFuC,GAEjB,KAAK,IAFY;AAAA;;AAAA,oBAGvCC,4BAHuC;AAGvCA,kBAAAA,4BAHuC,GAGA,KAHA;AAAA;;AAAA,oBAIvCC,sCAJuC;AAIvCA,kBAAAA,sCAJuC,GAIW,KAJX;AAAA;;AAMnCC,gBAAAA,OANmC,GAMzB,KANyB;AAQjCC,gBAAAA,cARiC,GAQhBb,KAAK,CAACS,WAAD,CAAL,CAAmBK,IAAnB,CAAwB,UAACtN,CAAD;AAAA,yBAAO,IAAP;AAAA,iBAAxB,CARgB;;AAUjCuN,gBAAAA,2BAViC;AAAA,6EAWrC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,gCACUH,OADV;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAE4B,KAAI,CAACzK,YAAL,CAAkBjI,KAAlB,CAF5B;;AAAA;AAEUkI,4BAAAA,UAFV;;AAAA,kCAGQA,UAAS,CAACE,WAAV,KAA0BtJ,qBAAa,CAACgU,QAHhD;AAAA;AAAA;AAAA;;AAAA;AAAA,mCAIYhB,KAAK,CAACU,4BAAD,CAJjB;;AAAA;AAAA;;AAAA;AAAA,kCAMetK,UAAS,CAACE,WAAV,KAA0BtJ,qBAAa,CAACiU,WANvD;AAAA;AAAA;AAAA;;AAAA,8DAOa7K,UAPb;;AAAA;AAAA,iCAUUuK,sCAVV;AAAA;AAAA;AAAA;;AAAA,kCAWc,IAAIxQ,KAAJ,mCACJlD,qBAAqB,CAACmJ,UAAS,CAACE,WAAX,CADjB,oCAEFF,UAAS,CAACE,WAFR,oBAGF,gBAHE,CAXd;;AAAA;AAAA,8DAiBaF,UAjBb;;AAAA;AAAA;AAAA;;AAAA;AAAA,8DAoBS,IApBT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAXqC;;AAAA,kCAUjC2K,2BAViC;AAAA;AAAA;AAAA;;AAiCjCG,gBAAAA,mBAjCiC;AAAA,6EAiCX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAEpBlB,KAAK,CAACS,WAAW,GAAG,CAAf,CAFe;;AAAA;AAAA,8DAGnB,IAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAjCW;;AAAA,kCAiCjCS,mBAjCiC;AAAA;AAAA;AAAA;;AAuCjCC,gBAAAA,6BAvCiC,GAwCrCJ,2BAA2B,EAxCU;AA0CjCK,gBAAAA,gBA1CiC,GA0CeF,mBAAmB,EA1ClC;AAAA;AAAA,uBA4Cf1E,OAAO,CAAC6E,GAAR,CAAY,CAClCR,cADkC,EAElCM,6BAFkC,EAGlCC,gBAHkC,CAAZ,CA5Ce;;AAAA;AA4CjChL,gBAAAA,SA5CiC;AAiDvCwK,gBAAAA,OAAO,GAAG,IAAV;AAjDuC,kDAmDhCxK,SAnDgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlC;;AAAA;AAAA;AAAA;AAAA;;AAsDA,qBAAA;AAAA,iEAAe,kBAAOlI,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kDACboT,YAAa,CAAC,KAAI,CAACpL,gBAAN,EAAwBhI,KAAxB,CADA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAf;;AAAA;AAAA;AAAA;AAAA;;AAIA,uBAAA;AAAA,iEAAiB,kBAAOA,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACE,KAAI,CAACiI,YAAL,CAAkBjI,KAAlB,CADF;;AAAA;AAChBkI,gBAAAA,SADgB;AAAA,kDAEfA,SAAS,CAACE,WAFK;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjB;;AAAA;AAAA;AAAA;AAAA;;AAKA,6BAAA;AAAA,iEAAuB,kBAAOiL,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,kDACrB,KAAI,CAAC1J,QAAL,CAAc2J,kBAAd,CAAiCD,MAAjC,CADqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB;;AAAA;AAAA;AAAA;AAAA;;AAIA,kBAAA;AAAA,iEAAY,kBACjBrT,KADiB,EAEjBuT,2BAFiB,EAGjBC,cAHiB,EAIjB9I,cAJiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAMX+I,gBAAAA,YANW,GAMID,cANJ,WAMIA,cANJ,GAMsB,KAAI,CAACzK,MAN3B;;AAAA,oBAOZ0K,YAPY;AAAA;AAAA;AAAA;;AAAA,sBAQT,IAAIxR,KAAJ,CAAU,4BAAV,CARS;;AAAA;AAAA,kDAUVyR,SAAU,CACf1T,KADe,EAEfuT,2BAFe,EAGfE,YAHe,EAIf,KAAI,CAAC9J,QAJU,EAKf,KAAI,CAACjK,OALU,EAMf,KAAI,CAACsI,gBAAL,CAAsBhB,OANP,EAOf0D,cAPe,CAVA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA;;AAqBA,mBAAA,GAAa,UAClB0B,WADkB,EAElBC,WAFkB,EAGlBpM,YAHkB,EAIlB0T,UAJkB;AAMlB,UAAMC,aAAa,GAAG;AAAElU,QAAAA,OAAO,EAAE,KAAI,CAACA,OAAhB;AAAyBO,QAAAA,YAAY,EAAEA;AAAvC,OAAtB;;AACA,UAAM4T,MAAM,gBAAQD,aAAR,EAA0BD,UAA1B,CAAZ;;AACA,aAAOG,UAAW,CAChB/N,6BAA6B,CAACqG,WAAD,CADb,EAEhBrG,6BAA6B,CAACsG,WAAD,CAFb,EAGhBwH,MAHgB,CAAlB;AAKD,KAbM;;AAeA,2BAAA;AAAA,kEAAqB,kBAC1BtG,KAD0B,EAE1B3D,aAF0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAI1B;AACM0D,gBAAAA,4BALoB,GAKW2D,yBAAyB,CAC5D1D,KAAK,CAAClO,IADsD,EAE5D,KAAI,CAACK,OAFuD,CALpC;AASpBqU,gBAAAA,gBAToB,GASDnO,4BAA4B,CAAC2H,KAAD,CAT3B;AAAA,kDAUnByG,iBAAkB,CACvBpK,aADuB,EAEvB0D,4BAFuB,EAGvByG,gBAHuB,EAIvB,KAAI,CAACpK,QAJkB,CAVC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAArB;;AAAA;AAAA;AAAA;AAAA;;AA4EA,qBAAA,GAAe,UAAC3J,KAAD;AACpB,aAAOiU,SAAU,CAACjU,KAAD,EAAQ,KAAI,CAACN,OAAb,EAAsB,KAAI,CAACsI,gBAAL,CAAsBhB,OAA5C,CAAjB;AACD,KAFM;;AAIA,qBAAA,GAAe,UACpBtH,OADoB,EAEpBC,uBAFoB,EAGpBK,KAHoB;AAKpB,UAAM6H,MAAM,GAAGpI,YAAY,CAACC,OAAD,EAAUC,uBAAV,CAA3B;AACA,UAAM+H,KAAK,GAAGxI,YAAd;AACA,UAAM8J,KAAK,GAAGhJ,KAAd;AACA,aAAO;AACL6H,QAAAA,MAAM,EAANA,MADK;AAELH,QAAAA,KAAK,EAALA,KAFK;AAGLsB,QAAAA,KAAK,EAALA;AAHK,OAAP;AAKD,KAbM;AAeP;;;;;;;AAKO,2BAAA,GAAqB,UAAChJ,KAAD;AAC1B,aAAOkU,kBAAmB,CAAClU,KAAD,CAA1B;AACD,KAFM;;AAIA,+CAAA,GAAyC,UAC9CA,KAD8C,EAE9CmU,iCAF8C;;;UAE9CA;;;AAAAA,QAAAA,6DAAwD,KAAI,CACzDA,qEAAqC7V;;;AAExC,OAAA8V,OAAO,CACL,KAAI,CAACD,iCADA,EAEL,0GAFK,CAAP;AAIA,UAAMzE,gBAAgB,GAAG5K,eAAe,CAAC9E,KAAK,CAACa,cAAP,CAAxC;;AAGA,UACE6O,gBAAgB,CAACpM,YAAjB,CAA8BpD,WAA9B,OACAtB,oBAAY,CAACmE,KAAb,CAAmB7C,WAAnB,EAFF,EAGE;AACA,eAAO,KAAP;AACD;AAGD;;;AACA,UAAMmU,iBAAiB,GAAI3E,gBAA6C,CACrE7M,YADH;AAEA,OACEwR,iBADF,IAAAC,SAAS,QAEP,4DAFO,CAAT,CAAA;AAKA,aACED,iBAAiB,CAACnU,WAAlB,iCACAiU,iCADA,qBACA,sBAAmCjU,WAAnC,EADA,CADF;AAID,KAhCM;;AAkCA,wBAAA;AAAA,kEAAkB,mBACvBgL,WADuB,EAEvBqJ,aAFuB,EAGvBC,oBAHuB;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGvBA,oBAHuB;AAGvBA,kBAAAA,oBAHuB,GAG2B,EAH3B;AAAA;;AAKjBxM,gBAAAA,gBALiB,4BAMrBuM,aANqB,oBAMrBA,aAAa,CAAEvM,gBANM,oCAMc,KAAI,CAACA,gBANnB;AAOnByM,gBAAAA,iBAPmB,GAOqBnW,SAPrB;;AAQvB,oBAAI,CAAAiW,aAAa,QAAb,YAAAA,aAAa,CAAEG,uBAAf,MAA2C,IAA/C,EAAqD;AACnD;AACAD,kBAAAA,iBAAiB,GAAGnW,SAApB;AACD,iBAHD,MAGO;AACLmW,kBAAAA,iBAAiB,4BACfF,aADe,oBACfA,aAAa,CAAEG,uBADA,oCAEf,KAAI,CAACC,wBAAL,CAA8B,KAAI,CAACjV,OAAnC,CAFF;AAGD;;AAfsB,qBAiBnB+U,iBAjBmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAkBYG,uBAAwB,CACvD1J,WADuD,EAEvDlD,gBAFuD,CAlBpC;;AAAA;AAkBf6M,gBAAAA,kBAlBe;AAsBrB;AACAC,gBAAAA,mBAAmB,GAAGC,IAAI,CAACC,KAAL,CACpBH,kBAAkB,CAACI,QAAnB,KAAgCR,iBADZ,CAAtB;;AAvBqB;AA4BjBS,gBAAAA,cA5BiB;AA6BrBC,kBAAAA,QAAQ,EAAEL;AA7BW,mBA8BlBN,oBA9BkB;;AAAA,sBAiCnBD,aAjCmB,YAiCnBA,aAAa,CAAEa,6CAjCI;AAAA;AAAA;AAAA;;AAkCfC,gBAAAA,0BAlCe,GAmCnB,KAAI,CAACC,sCAAL,CAA4CpK,WAA5C,CAnCmB;AAoCrB,iBAAAkJ,OAAO,CACLiB,0BADK,4DAAP;AAIA,iBACE,KAAI,CAACE,wBADP,IAAAjB,SAAS,QAEP,oEAFO,CAAT,CAAA;AAIMkB,gBAAAA,iBA5Ce,GA4CKrO,kBAAkB,CAACJ,OAAnB,CACxB,KAAI,CAACwO,wBADmB,kBAExB,KAAI,CAACxM,MAFmB,2BAET,KAAI,CAACY,QAFI,CA5CL;AAgDf8L,gBAAAA,qBAhDe,GAgDSvK,WAAW,CAAC3K,gBAhDrB;AAAA,mDAiDdiV,iBAAiB,CAACE,sBAAlB,CACL,CAACxK,WAAD,CADK,EAELA,WAAW,CAAC5K,gBAFP,EAGL,CAAC4K,WAAW,CAAClK,SAAb,CAHK,EAIL,EAJK,EAKL,EALK;AAOHgI,kBAAAA,KAAK,EAAEyM;AAPJ,mBAQAP,cARA,EAjDc;;AAAA;AAAA,mDA8DhBS,eAAgB,CAACzK,WAAD,EAAclD,gBAAd,EAAgCkN,cAAhC,CA9DA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlB;;AAAA;AAAA;AAAA;AAAA;;AAiEC,iCAAA,GAA2B,UAACxV,OAAD;AACjC,UAAI,KAAI,CAACkW,kBAAT,EAA6B;AAC3B,eAAO,KAAI,CAACA,kBAAL,CAAwB,KAAI,CAAClW,OAA7B,CAAP;AACD;;AACD,aAAOpB,SAAP;AACD,KALO;;AAOD,uBAAA,GAAiB,UAAC0B,KAAD;AACtB,UAAM6V,eAAe,GAAGC,cAAe,CAAC9V,KAAD,CAAvC;;AACA,aAAO6V,eAAP;AACD,KAHM;;AAKA,6BAAA,GAAuB,UAAC7V,KAAD;AAC5B,UAAM6V,eAAe,GAAGC,cAAe,CAAC9V,KAAD,CAAvC;;AACA,aAAO6V,eAAP;AACD,KAHM;;AAKA,6BAAA,GAAuB,UAC5B7V,KAD4B,EAE5BgB,SAF4B,EAG5BtB,OAH4B,EAI5BC,uBAJ4B;AAM5B,aAAOoW,oBAAqB,CAC1B/V,KAD0B,EAE1BgB,SAF0B,EAG1BtB,OAH0B,EAI1BC,uBAJ0B,CAA5B;AAMD,KAZM;;AAvZL,SAAKgK,QAAL,GAAgBA,QAAhB;AACA,SAAKZ,MAAL,GAAcA,MAAd;AACA,SAAKrJ,OAAL,GACEA,OADF,WACEA,OADF,GACc,KAAKiK,QAAL,CAAcqM,QAAd,CAAuBtW,OADrC;AAGA,QAAMuW,6BAA6B,GACjCpF,SAAS,CAAC,KAAKnR,OAAN,CADX;AAGA,QAAMwW,6BAA6B,4BACjC7D,gBADiC,oBACjCA,gBAAgB,CAAE1S,uBADe,oCAEjCsW,6BAFiC,oBAEjCA,6BAA6B,CAAEE,QAFjC;AAIA,KAAA/B,OAAO,CACL6B,6BADK,oDAE2C,KAAKvW,OAFhD,gGAAP;AAKA,SAAKC,uBAAL,GAA+BuW,6BAA/B;AAEA,SAAKE,yBAAL,4BACE/D,gBADF,oBACEA,gBAAgB,CAAE+D,yBADpB,oCAEEnF,yBAAyB,CAAChS,2BAAmB,CAAC8D,KAArB,EAA4B,KAAKrD,OAAjC,CAF3B;AAGA,SAAK2W,0BAAL,6BACEhE,gBADF,oBACEA,gBAAgB,CAAEgE,0BADpB,qCAEEpF,yBAAyB,CAAChS,2BAAmB,CAAC4E,MAArB,EAA6B,KAAKnE,OAAlC,CAF3B;AAGA,SAAK4W,2BAAL,6BACEjE,gBADF,oBACEA,gBAAgB,CAAEiE,2BADpB,qCAEErF,yBAAyB,CAAChS,2BAAmB,CAACkF,OAArB,EAA8B,KAAKzE,OAAnC,CAF3B;AAGA,SAAK6V,wBAAL,sCACElD,gBADF,oBACEA,gBAAgB,CAAEkD,wBADpB,oCAEEjE,mBAAmB,CAAC,KAAK5R,OAAN,CAFrB,qBAGE,IAHF;AAIA,SAAKyU,iCAAL,sCACE9B,gBADF,oBACEA,gBAAgB,CAAE8B,iCADpB,oCAEE3C,qBAAqB,CAAC,KAAK9R,OAAN,CAFvB,qBAGE,IAHF;AAKA,KACE,KAAKC,uBADP,IAAA2U,SAAS,QAEP,wFAFO,CAAT,CAAA;AAIA,KAAAF,OAAO,CACL,KAAKgC,yBADA,EAEL,gEAFK,CAAP;AAIA,KAAAhC,OAAO,CACL,KAAKiC,0BADA,EAEL,kEAFK,CAAP;AAIA,KAAAjC,OAAO,CACL,KAAKkC,2BADA,EAEL,kEAFK,CAAP;AAIA,KAAAlC,OAAO,CACL,KAAKmB,wBADA,EAEL,sEAFK,CAAP;AAIA,KAAAnB,OAAO,CACL,KAAKD,iCADA,EAEL,wGAFK,CAAP;AAIA,KAAAC,OAAO,CAAC,KAAKrL,MAAN,EAAc,0CAAd,CAAP;;AAGA,SAAKf,gBAAL,GAAwBrB,yBAAyB,CAACI,OAA1B,CACtBmP,6BADsB,EAEtBnN,MAFsB,WAEtBA,MAFsB,GAEZY,QAFY,CAAxB;AAKA,SAAKiM,kBAAL,4BACEvD,gBADF,oBACEA,gBAAgB,CAAEuD,kBADpB,oCAC0ClE,6BAD1C;AAED;AAsID;;;;;;;;SAIa6E;;;gGAAN,mBACLhJ,KADK,EAELiJ,cAFK;AAGLC,IAAAA,4BAHK,EAILC,cAJK;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAML;AACMpJ,cAAAA,4BAPD,4BAQHoJ,cARG,oBAQHA,cAAc,CAAEC,oCARb,oCASH1F,yBAAyB,CACvB1D,KAAK,CAAClO,IADiB,EAEvB,KAAKK,OAFkB,CATtB;AAaCkX,cAAAA,WAbD,4BAaeF,cAbf,oBAaeA,cAAc,CAAE3N,MAb/B,oCAayC,KAAKA,MAb9C;;AAAA,kBAcA6N,WAdA;AAAA;AAAA;AAAA;;AAAA,oBAeG,IAAI3U,KAAJ,CAAU,sCAAV,CAfH;;AAAA;AAiBL;AAEIwS,cAAAA,iBAnBC,GAmBuCnW,SAnBvC;;AAoBL,kBAAI,CAAAoY,cAAc,QAAd,YAAAA,cAAc,CAAEhC,uBAAhB,MAA4C,IAAhD,EAAsD;AACpD;AACAD,gBAAAA,iBAAiB,GAAGnW,SAApB;AACD,eAHD,MAGO;AACLmW,gBAAAA,iBAAiB,4BACfiC,cADe,oBACfA,cAAc,CAAEhC,uBADD,oCAEf,KAAKC,wBAAL,CAA8B,KAAKjV,OAAnC,CAFF;AAGD;;AA3BI,mBA6BD+U,iBA7BC;AAAA;AAAA;AAAA;;AAAA;AAAA,qBA8B8BoC,sBAAuB,CACtDvJ,4BADsD,EAEtD1H,4BAA4B,CAAC2H,KAAD,CAF0B,EAGtDqJ,WAHsD,EAItDH,4BAJsD,WAItDA,4BAJsD,GAItB,EAJsB,2BAKtDC,cALsD,oBAKtDA,cAAc,CAAE3H,OALsC,oCAK3B,IAL2B,CA9BrD;;AAAA;AA8BG8F,cAAAA,kBA9BH;AAqCHC,cAAAA,mBAAmB,GAAGC,IAAI,CAACC,KAAL,CACpBH,kBAAkB,CAACI,QAAnB,KAAgCR,iBADZ,CAAtB;;AArCG;AAAA,iDA0CEqC,YAAa,CAClBxJ,4BADkB,EAElB1H,4BAA4B,CAAC2H,KAAD,CAFV,EAGlBqJ,WAHkB;AAKhBzB,gBAAAA,QAAQ,EAAEL;AALM,iBAMb2B,4BANa,6BAQlBC,cARkB,oBAQlBA,cAAc,CAAE3H,OARE,qCAQS,IART,CA1Cf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;ICnTIgI,wBAAwB,GAAG,CACtC;AAAE3X,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,IAAI,EAAE;AAAtB,CADsC,EAEtC;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAFsC,EAGtC;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAHsC,EAItC;AAAED,EAAAA,IAAI,EAAE,mBAAR;AAA6BC,EAAAA,IAAI,EAAE;AAAnC,CAJsC,CAAjC;AAOP,IAAa2X,uBAAuB,GAAG,aAAhC;AAEP,IAAaC,sBAAsB,GAAG,CACpC;AAAE5X,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CADoC,EAEpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAFoC,EAGpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAHoC,EAIpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAJoC,EAKpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CALoC,EAMpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CANoC,EAOpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAPoC,EAQpC;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CARoC,EASpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAToC,EAUpC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAVoC,EAWpC;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBD,EAAAA,IAAI,EAAE;AAA5B,CAXoC,CAA/B;AAcP,IAAa8X,yBAAyB,GAAG,CACvC;AAAE9X,EAAAA,IAAI,EAAE,MAAR;AAAgBC,EAAAA,IAAI,EAAE;AAAtB,CADuC,EAEvC;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAFuC,EAGvC;AAAED,EAAAA,IAAI,EAAE,SAAR;AAAmBC,EAAAA,IAAI,EAAE;AAAzB,CAHuC,EAIvC;AAAED,EAAAA,IAAI,EAAE,mBAAR;AAA6BC,EAAAA,IAAI,EAAE;AAAnC,CAJuC,CAAlC;AAOP,IAAa8X,wBAAwB,GAAG,cAAjC;AACP,IAAaC,uBAAuB,GAAG,CACrC;AAAE/X,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CADqC,EAErC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAFqC,EAGrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAHqC,EAIrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAJqC,EAKrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CALqC,EAMrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CANqC,EAOrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAPqC,EAQrC;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CARqC,EASrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CATqC,EAUrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAVqC,EAWrC;AAAEC,EAAAA,IAAI,EAAE,YAAR;AAAsBD,EAAAA,IAAI,EAAE;AAA5B,CAXqC,EAYrC;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAZqC,CAAhC;AAeP,IAAaiY,OAAO,GAAG,CACrB;AAAEhY,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CADqB,EAErB;AAAEC,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAFqB,EAGrB;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CAHqB,CAAhB;AAMP,IAAakY,YAAY,GAAG,CAC1B;AAAEjY,EAAAA,IAAI,EAAE,SAAR;AAAmBD,EAAAA,IAAI,EAAE;AAAzB,CAD0B,EAE1B;AAAEC,EAAAA,IAAI,EAAE,OAAR;AAAiBD,EAAAA,IAAI,EAAE;AAAvB,CAF0B,CAArB;AAKP,IAAamY,oBAAoB,GAC/B,4CADK;AAGP,IAAaC,6BAA6B,GACxC,4CADK;;ACdA,IAAMjO,wBAAsB;AAAA,yEAAG,iBACpCvJ,KADoC,EAEpC+I,MAFoC,EAGpCrJ,OAHoC,EAIpCC,uBAJoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,iBAM/BK,KAA4B,CAACyX,YANE;AAAA;AAAA;AAAA;;AAO5B5P,YAAAA,MAP4B,GAOnB;AACbnI,cAAAA,OAAO,EAAEA,OADI;AAEbI,cAAAA,iBAAiB,EAAEH,uBAFN;AAGbP,cAAAA,IAAI,EAAE,QAHO;AAIbQ,cAAAA,OAAO,EAAE;AAJI,aAPmB;AAa5B8H,YAAAA,KAb4B,wBAc/ByP,wBAd+B,IAcJC,uBAdI,SAehCM,GAfgC,GAe3BL,OAf2B,SAgBhCM,QAhBgC,GAgBtBL,YAhBsB;AAkB5BtO,YAAAA,KAlB4B,GAkBpBhJ,KAlBoB;AAAA;AAAA,mBAoBM+I,MAAM,CAACS,cAAP,CACtC3B,MADsC,EAEtCH,KAFsC,EAGtCsB,KAHsC,CApBN;;AAAA;AAoB5BS,YAAAA,yBApB4B;AAAA,6CA0B3BA,yBA1B2B;;AAAA;AAAA,iBA6B/BzJ,KAA2B,CAAC4X,WA7BG;AAAA;AAAA;AAAA;;AA8B5B/P,YAAAA,OA9B4B,GA8BnB;AACbnI,cAAAA,OAAO,EAAEA,OADI;AAEbI,cAAAA,iBAAiB,EAAEH,uBAFN;AAGbP,cAAAA,IAAI,EAAE,QAHO;AAIbQ,cAAAA,OAAO,EAAE;AAJI,aA9BmB;AAoC5B8H,YAAAA,OApC4B,0BAqC/BsP,uBArC+B,IAqCLC,sBArCK,UAsChCS,GAtCgC,GAsC3BL,OAtC2B,UAuChCM,QAvCgC,GAuCtBL,YAvCsB;AAyC5BtO,YAAAA,MAzC4B,GAyCpBhJ,KAzCoB;AAAA;AAAA,mBA2CM+I,MAAM,CAACS,cAAP,CACtC3B,OADsC,EAEtCH,OAFsC,EAGtCsB,MAHsC,CA3CN;;AAAA;AA2C5BS,YAAAA,0BA3C4B;AAAA,6CAiD3BA,0BAjD2B;;AAAA;AAoDpC,aAAA2K,OAAO,CAAC,CAACpU,KAAF,EAAS,oBAAT,CAAP;AApDoC,kBAqD9B,IAAIiC,KAAJ,sBArD8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBsH,sBAAsB;AAAA;AAAA;AAAA,GAA5B;AAwDP;;;;;;;;;AAQA,AAAO,IAAM8D,mBAAiB;AAAA,0EAAG,kBAC/BzD,aAD+B,EAE/B0D,4BAF+B,EAG/BC,KAH+B,EAI/B5D,QAJ+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,2BAMvB4D,KAAK,CAAClO,IANiB;AAAA,8CAOxB,OAPwB,wBA6BxB,QA7BwB,yBAkDxB,SAlDwB;AAAA;;AAAA;AAAA,kBASvBkO,KAAK,CAAC1K,YAAN,CAAmB3C,WAAnB,OAAqCqX,oBATd;AAAA;AAAA;AAAA;;AAAA,8CAUlB;AACLvJ,cAAAA,gBAAgB,EAAE;AADb,aAVkB;;AAAA;AAcrBR,YAAAA,KAdqB,GAcblG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2C8G,QAA3C,CAda;AAAA;AAAA,mBAesB6D,KAAK,CAACC,SAAN,CAC/C7D,aAD+C,EAE/C0D,4BAF+C,CAftB;;AAAA;AAerBI,YAAAA,uBAfqB;AAmB3B;AACMC,YAAAA,wBApBqB,GAoBMnP,mBAAS,CAACC,IAAV,CAC/BmP,cAAY,CAAC/N,QAAb,EAD+B,EAE/BgO,GAF+B,CAE3B,oBAF2B,CApBN;AAuBrBC,YAAAA,cAvBqB,GAuBJJ,uBAAuB,CAACK,GAAxB,CACrBJ,wBADqB,CAvBI;AAAA,8CA0BpB;AACLK,cAAAA,gBAAgB,EAAEF;AADb,aA1BoB;;AAAA;AA8BrBG,YAAAA,MA9BqB,GA8BZ1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4C8G,QAA5C,CA9BY;AA+BrBuE,YAAAA,2BA/BqB,GA+BSD,MAAM,CAACE,gBAAP,CAClCvE,aADkC,EAElC0D,4BAFkC,CA/BT;AAmCrBc,YAAAA,iCAnCqB,GAmCeH,MAAM,CAACI,WAAP,CACxCd,KAAK,CAAC3J,OADkC,CAnCf;AAAA;AAAA,mBAuCnB0K,OAAO,CAACC,GAAR,CAAY,CAChBL,2BADgB,EAEhBE,iCAFgB,CAAZ,CAvCmB;;AAAA;AAAA;AAsCpBI,YAAAA,oBAtCoB;AAsCEC,YAAAA,0BAtCF;AA2CrBC,YAAAA,eA3CqB,GA4CzBD,0BAA0B,CAACvO,WAA3B,OACAoN,4BAA4B,CAACpN,WAA7B,EA7CyB;AAAA,8CA8CpB;AACL8N,cAAAA,gBAAgB,EAAEQ,oBAAF,WAAEA,oBAAF,GAA0B,KADrC;AAELE,cAAAA,eAAe,EAAEA;AAFZ,aA9CoB;;AAAA;AAmDrBC,YAAAA,OAnDqB,GAmDXtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6C8G,QAA7C,CAnDW;AAAA;AAAA,mBAoDSgF,OAAO,CAACR,gBAAR,CAClCvE,aADkC,EAElC0D,4BAFkC,CApDT;;AAAA;AAoDrBsB,YAAAA,qBApDqB;AAAA,8CAwDpB;AACLZ,cAAAA,gBAAgB,EAAEY,qBAAF,WAAEA,qBAAF,GAA2B;AADtC,aAxDoB;;AAAA;AAAA,kBA4DrB,IAAIxM,wBAAJ,CAA8BmL,KAAa,CAAClO,IAA5C,CA5DqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBgO,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAiEP;;AACA,AAAO,IAAMO,cAAY,gBAAGpP,mBAAS,CAACC,IAAV,CAAe,CAAf,EAAkBoQ,GAAlB,CAAsB,GAAtB,CAArB;AAEP;;;;;;;;AAOA,AAAO,IAAMC,cAAY;AAAA,0EAAG,kBAC1BxB,4BAD0B,EAE1BC,KAF0B,EAG1BxE,MAH0B,EAI1B8O,WAJ0B,EAK1BC,kBAL0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAI1BD,WAJ0B;AAI1BA,cAAAA,WAJ0B,GAImB,EAJnB;AAAA;;AAOpB9I,YAAAA,OAPoB,4BAOV+I,kBAPU,oBAOVA,kBAAkB,CAAE/I,OAPV,oCAOqB,IAPrB;AAAA,2BASlBxB,KAAK,CAAClO,IATY;AAAA,8CAUnB,OAVmB,wBAoBnB,QApBmB,wBA0CnB,SA1CmB;AAAA;;AAAA;AAWhBmO,YAAAA,KAXgB,GAWRlG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2CkG,MAA3C,CAXQ;AAYhBiG,YAAAA,sBAZgB,GAYSxB,KAAK,CAACuB,OAAN,CAC7BzB,4BAD6B,EAE7ByB,OAAO,GAAGnB,cAAY,CAAC/N,QAAb,EAAH,GAA6B,CAFP,eAIxBgY,WAJwB,EAZT;AAAA,8CAmBf7I,sBAnBe;;AAAA;AAqBhBf,YAAAA,MArBgB,GAqBP1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4CkG,MAA5C,CArBO;;AAAA,kBAuBlB+O,kBAvBkB,YAuBlBA,kBAAkB,CAAEC,2BAvBF;AAAA;AAAA;AAAA;;AAwBdC,YAAAA,4BAxBc,GAwBiB/J,MAAM,CAACc,OAAP,CACnCzB,4BADmC,EAEnCC,KAAK,CAAC3J,OAF6B,eAI9BiU,WAJ8B,EAxBjB;AAAA,8CA+BbG,4BA/Ba;;AAAA;AAiCtB;AACM9J,YAAAA,2BAlCgB,GAkCcD,MAAM,CAACgB,iBAAP,CAClC3B,4BADkC,EAElCyB,OAFkC,eAI7B8I,WAJ6B,EAlCd;AAAA,8CAyCf3J,2BAzCe;;AAAA;AA2ChBS,YAAAA,OA3CgB,GA2CNtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6CkG,MAA7C,CA3CM;;AAAA;AAAA,mBA6Cc4F,OAAO,CAACM,iBAAR,CAClC3B,4BADkC,EAElCyB,OAFkC,eAI7B8I,WAJ6B,EA7Cd;;AAAA;AA6ChBjJ,YAAAA,qBA7CgB;AAAA,8CAoDfA,qBApDe;;AAAA;AAAA,kBAsDhB,IAAIxM,wBAAJ,CAA8BmL,KAAa,CAAClO,IAA5C,CAtDgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZyP,YAAY;AAAA;AAAA;AAAA,GAAlB;;AA2DP,SAAgBmJ,kBAAkB5M;AAChC,MAAM6M,OAAO,GAAG7U,mBAAa,CAACgI,YAAD,CAA7B;AAEA;AACA;;AACA,MAAI6M,OAAO,KAAK,EAAhB,EAAoB;AAClB,UAAM,IAAIjW,KAAJ,iDAC0CiW,OAD1C,4BACuE7M,YADvE,QAAN;AAGD;;;AAED,MAAM8M,cAAc,GAAG,CAAC,CAAD,EAAI,CAAJ,EAAO,EAAP,EAAW,EAAX,CAAvB;AAEA;AACA;;AACA,MAAI3M,CAAC,GAAG4M,QAAQ,CAAC/M,YAAY,CAACgN,KAAb,CAAmB,CAAC,CAApB,CAAD,EAAyB,EAAzB,CAAhB;;AAEA,MAAIF,cAAc,CAACG,QAAf,CAAwB9M,CAAxB,CAAJ,EAAgC;AAC9B;AACAA,IAAAA,CAAC,GAAGA,CAAC,IAAI,EAAL,GAAUA,CAAV,GAAcA,CAAC,GAAG,EAAtB;AACA,WAAO;AACL;AACA;AACAC,MAAAA,CAAC,EAAElI,kBAAY,CAAC8H,YAAD,EAAe,CAAf,EAAkB,EAAlB,CAHV;AAIL7I,MAAAA,CAAC,EAAEe,kBAAY,CAAC8H,YAAD,EAAe,EAAf,EAAmB,EAAnB,CAJV;AAKLG,MAAAA,CAAC,EAADA;AALK,KAAP;AAOD;AAED;;;AACAA,EAAAA,CAAC,GAAG4M,QAAQ,CAAC/M,YAAY,CAACgN,KAAb,CAAmB,CAAnB,EAAsB,CAAtB,CAAD,EAA2B,EAA3B,CAAZ;;AACA,MAAI,CAACF,cAAc,CAACG,QAAf,CAAwB9M,CAAxB,CAAL,EAAiC;AAC/B,UAAM,IAAIvJ,KAAJ,4DACoDoJ,YADpD,QAAN;AAGD;;AACDG,EAAAA,CAAC,GAAGA,CAAC,IAAI,EAAL,GAAUA,CAAV,GAAcA,CAAC,GAAG,EAAtB;AACA,SAAO;AACLA,IAAAA,CAAC,EAADA,CADK;AAELC,IAAAA,CAAC,EAAElI,kBAAY,CAAC8H,YAAD,EAAe,CAAf,EAAkB,EAAlB,CAFV;AAGL7I,IAAAA,CAAC,EAAEe,kBAAY,CAAC8H,YAAD,EAAe,EAAf,EAAmB,EAAnB;AAHV,GAAP;AAKD;AAED,AAAO,IAAMkN,iCAAiC,gBAAG/Z,mBAAS,CAACC,IAAV,CAAe,UAAf,CAA1C;AAEP,AAAO,IAAM+Z,mBAAmB,GAAG,SAAtBA,mBAAsB,CACjCC,GADiC,EAEjCjL,KAFiC,EAGjCkL,SAHiC;;;AAKjC,MAAIC,MAAM,GAAGJ,iCAAiC,CAAC1Y,QAAlC,EAAb;;AACA,MAAI6Y,SAAS,CAACC,MAAd,EAAsB;AACpB;AACA,QAAI,OAAOD,SAAS,CAACC,MAAjB,KAA4B,QAAhC,EAA0C;AACxCA,MAAAA,MAAM,GAAGD,SAAS,CAACC,MAAV,CAAiB9Y,QAAjB,EAAT;AACD,KAFD,MAEO;AACL;AACA8Y,MAAAA,MAAM,GAAGvX,WAAW,CAACsX,SAAS,CAACC,MAAX,CAAX,CAA8B9Y,QAA9B,EAAT;AACD;AACF;;AACD,MAAM+Y,WAAW,GAAgC;AAC/ChB,IAAAA,WAAW,EAAEa,GAAG,CAAC5V,YAAJ,CAAiB3C,WAAjB,EADkC;AAE/C2Y,IAAAA,aAAa,EAAEJ,GAAG,CAAC7U,OAF4B;AAG/CkV,IAAAA,SAAS,EAAEV,QAAQ,CAACM,SAAS,CAACI,SAAV,CAAoBjZ,QAApB,EAAD,CAH4B;AAI/CkZ,IAAAA,UAAU,EAAEvL,KAAK,CAAC3K,YAAN,CAAmB3C,WAAnB,EAJmC;AAK/C8Y,IAAAA,gBAAgB,EAAExL,KAAK,CAAC7H,MALuB;AAM/CgG,IAAAA,KAAK,EAAE+M,SAAS,CAAC/M,KAAV,CAAgBzL,WAAhB,EANwC;AAO/C;AACA+Y,IAAAA,qBAAqB,qDACnBP,SAAS,CAACQ,eADS,qBACnB,uBAA2BvW,GAA3B,CAA+B,UAACwW,QAAD;AAAA,aAAe;AAC5CC,QAAAA,YAAY,EAAED,QAAQ,CAACC,YADqB;AAE5CC,QAAAA,iBAAiB,EAAEF,QAAQ,CAACE;AAFgB,OAAf;AAAA,KAA/B,CADmB,oCAIZ,EAZsC;AAa/CC,IAAAA,IAAI,4CACFZ,SAAS,CAACY,IADR,qBACF,gBAAgB3W,GAAhB,CAAoB,UAAC0C,CAAD;;;AAClB,aAAO;AACLM,QAAAA,MAAM,EAAEN,CAAC,CAACM,MAAF,CAAS9F,QAAT,EADH;AAEL0Z,QAAAA,SAAS,EAAElU,CAAC,CAACkU,SAAF,CAAYrZ,WAAZ,EAFN;AAGLsZ,QAAAA,OAAO,uCAAEnU,CAAC,CAACmU,OAAJ,qBAAE,WAAW3Z,QAAX,EAAF,kCAA2B;AAH7B,OAAP;AAKD,KAND,CADE,kCAOI,EApBuC;AAqB/C8Y,IAAAA,MAAM,EAAEA,MArBuC;AAsB/Cc,IAAAA,KAAK,+CACHf,SAAS,CAACe,KADP,qBACH,iBAAiB5Z,QAAjB,EADG,oCAEH6Z,0BAA0B,CAAChB,SAAS,CAACiB,KAAX,CAxBmB;AAyB/CC,IAAAA,KAAK,+CAAElB,SAAS,CAACkB,KAAZ,qBAAE,iBAAiB1Z,WAAjB,EAAF,oCAAoCxB;AAzBM,GAAjD;AA4BA,SAAOka,WAAP;AACD,CA5CM;AA8CP,AAAO,IAAMiB,oBAAoB,GAAG,SAAvBA,oBAAuB,CAClCpB,GADkC,EAElCjL,KAFkC,EAGlCkL,SAHkC;;;AAKlC,MAAIC,MAAM,GAAGJ,iCAAiC,CAAC1Y,QAAlC,EAAb;;AACA,MAAI6Y,SAAS,CAACC,MAAd,EAAsB;AACpB;AACA,QAAI,OAAOD,SAAS,CAACC,MAAjB,KAA4B,QAAhC,EAA0C;AACxCA,MAAAA,MAAM,GAAGD,SAAS,CAACC,MAAV,CAAiB9Y,QAAjB,EAAT;AACD,KAFD,MAEO;AACL;AACA8Y,MAAAA,MAAM,GAAGvX,WAAW,CAACsX,SAAS,CAACC,MAAX,CAAX,CAA8B9Y,QAA9B,EAAT;AACD;AACF;;AACD,MAAMia,YAAY,GAAiC;AACjDrC,IAAAA,YAAY,EAAEgB,GAAG,CAAC5V,YAAJ,CAAiB3C,WAAjB,EADmC;AAEjD6Z,IAAAA,cAAc,EAAEtB,GAAG,CAAC7U,OAF6B;AAGjDoW,IAAAA,kBAAkB,iBAAEvB,GAAG,CAAC9S,MAAN,0BAAgB,GAHe;AAIjDmT,IAAAA,SAAS,EAAEV,QAAQ,CAACM,SAAS,CAACI,SAAV,CAAoBjZ,QAApB,CAA6B,EAA7B,CAAD,CAJ8B;AAKjDkZ,IAAAA,UAAU,EAAEvL,KAAK,CAAC3K,YAAN,CAAmB3C,WAAnB,EALqC;AAMjD8Y,IAAAA,gBAAgB,EAAExL,KAAK,CAAC7H,MANyB;AAOjDgG,IAAAA,KAAK,EAAE+M,SAAS,CAAC/M,KAAV,CAAgBzL,WAAhB,EAP0C;AAQjD;AACA+Z,IAAAA,sBAAsB,sDACpBvB,SAAS,CAACQ,eADU,qBACpB,uBAA2BvW,GAA3B,CAA+B,UAACwW,QAAD;AAAA,aAAe;AAC5CC,QAAAA,YAAY,EAAED,QAAQ,CAACC,YAAT,CAAsBvZ,QAAtB,EAD8B;AAE5CwZ,QAAAA,iBAAiB,EAAEF,QAAQ,CAACE;AAFgB,OAAf;AAAA,KAA/B,CADoB,qCAIb,EAbwC;AAcjDC,IAAAA,IAAI,8CACFZ,SAAS,CAACY,IADR,qBACF,iBAAgB3W,GAAhB,CAAoB,UAACuX,GAAD;;;AAClB,aAAO;AACLvU,QAAAA,MAAM,EAAEuU,GAAG,CAACvU,MAAJ,CAAW9F,QAAX,EADH;AAEL0Z,QAAAA,SAAS,EAAEW,GAAG,CAACX,SAAJ,CAAcrZ,WAAd,EAFN;AAGLsZ,QAAAA,OAAO,2CAAEU,GAAG,CAACV,OAAN,qBAAE,aAAa3Z,QAAb,EAAF,oCAA6B;AAH/B,OAAP;AAKD,KAND,CADE,mCAOI,EArByC;AAsBjD8Y,IAAAA,MAAM,EAAEA,MAtByC;AAuBjDc,IAAAA,KAAK,iDACHf,SAAS,CAACe,KADP,qBACH,kBAAiB5Z,QAAjB,EADG,qCAEH6Z,0BAA0B,CAAChB,SAAS,CAACiB,KAAX,CAzBqB;AA0BjDC,IAAAA,KAAK,iDAAElB,SAAS,CAACkB,KAAZ,qBAAE,kBAAiB1Z,WAAjB,EAAF,qCAAoCxB;AA1BQ,GAAnD;AA6BA,SAAOob,YAAP;AACD,CA7CM;AAgDP;;AACA,AAAO,IAAMK,2BAA2B,GAAG,EAApC;AAGP;;AACA,AAAO,IAAMC,wBAAwB,GAAG,EAAjC;;AAEP,IAAMC,gCAAgC,GAAG,SAAnCA,gCAAmC,CAAC9V,GAAD;AACvC,MAAM+V,WAAW,GAAG,QAAQC,IAAR,CAAahW,GAAb,CAApB;AACA,SAAO+V,WAAP;AACD,CAHD;;AAKA,AAAO,IAAME,sBAAsB,GAAG,MAA/B;AACP,IAAMC,6BAA6B,GAAGD,sBAAsB,CAACpX,MAA7D;AAEA,AAAO,IAAMsX,cAAc,GAAG,QAAvB;AAEP,AAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAChB,KAAD;AAChC,MAAMiB,eAAe,GACnBjB,KAAK,CAACvW,MAAN,IAAgB+W,2BAA2B,GAAGM,6BADhD;AAEA,MAAMI,cAAc,GAAGR,gCAAgC,CAACV,KAAD,CAAvD;AACA,GAAUiB,eAAV,IAAAtG,SAAS,QAAkB,iCAAlB,CAAT,CAAA;AACA,GACEuG,cADF,IAAAvG,SAAS,QAEP,2EAFO,CAAT,CAAA;AAID,CATM;AAWP;;;;;;;;AAOA,AAAO,IAAMoF,0BAA0B,GAAG,SAA7BA,0BAA6B,CACxCC,KADwC;MACxCA;AAAAA,IAAAA,QAAgBe;;;AAEhB,MAAIf,KAAJ,EAAW;AACTgB,IAAAA,kBAAkB,CAAChB,KAAD,CAAlB;AACD;;AACD,MAAMmB,QAAQ,GAAGC,QAAQ,CACvBC,0BAA0B,EADH,EAEvBb,2BAFuB,EAGvB,GAHuB,CAAzB;AAKA,MAAMc,QAAQ,GAAGC,MAAM,MAClBV,sBADkB,GACOb,KADP,EAErBQ,2BAFqB,EAGrB,GAHqB,CAAvB;AAKA,MAAMgB,gBAAgB,QAAMF,QAAN,GAAiBH,QAAvC;AACA,IACEK,gBAAgB,CAAC/X,MAAjB,IAA2BgX,wBAD7B,KAAA9F,SAAS,QAEP,oBAFO,CAAT,CAAA;AAIA,SAAO6G,gBAAP;AACD,CAtBM;;AAyBP,AAAO,IAAMH,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACI,IAAD;MAACA;AAAAA,IAAAA,OAAO;;;AAChD,MAAMC,GAAG,GAAG,OAAOC,OAAE,GAAGC,OAAL,CAAa,IAAb,EAAmB,EAAnB,CAAnB;AACA,MAAMvS,KAAK,GAAGwS,MAAM,CAACH,GAAD,CAApB;AACA,MAAMI,iBAAiB,GAAGzS,KAAK,CAACnJ,QAAN,CAAeub,IAAf,CAA1B;;AACA,SAAOK,iBAAP;AACD,CALM;AAOP,AAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAC/BxQ,WAD+B;AAG/B,MAAI,iBAAiBA,WAArB,EAAkC;AAChC,wBACKA,WADL;AAEE4N,MAAAA,SAAS,EAAEV,QAAQ,CAAClN,WAAW,CAAC4N,SAAZ,CAAsBjZ,QAAtB,EAAD,CAFrB;AAGE8Y,MAAAA,MAAM,EAAEzN,WAAW,CAACyN,MAAZ,CAAmB9Y,QAAnB,EAHV;AAIE4Z,MAAAA,KAAK,EAAEvO,WAAW,CAACuO,KAAZ,CAAkB5Z,QAAlB,EAJT;AAKEmZ,MAAAA,gBAAgB,EAAE9N,WAAW,CAAC8N,gBAAZ,CAA6BnZ,QAA7B,EALpB;AAMEyZ,MAAAA,IAAI,EAAEpO,WAAW,CAACoO,IAAZ,CAAiB3W,GAAjB,CAAqB,UAACuX,GAAD;AAAA,4BACtBA,GADsB;AAEzBvU,UAAAA,MAAM,EAAEuU,GAAG,CAACvU,MAAJ,CAAW9F,QAAX,EAFiB;AAGzB2Z,UAAAA,OAAO,EAAEU,GAAG,CAACV,OAAJ,CAAY3Z,QAAZ;AAHgB;AAAA,OAArB,CANR;AAWEgZ,MAAAA,aAAa,EAAE3N,WAAW,CAAC2N,aAAZ,CAA0BhZ,QAA1B;AAXjB;AAaD,GAdD,MAcO,IAAI,kBAAkBqL,WAAtB,EAAmC;AACxC,wBACKA,WADL;AAEE4N,MAAAA,SAAS,EAAEV,QAAQ,CAAClN,WAAW,CAAC4N,SAAZ,CAAsBjZ,QAAtB,EAAD,CAFrB;AAGE8Y,MAAAA,MAAM,EAAEzN,WAAW,CAACyN,MAAZ,CAAmB9Y,QAAnB,EAHV;AAIE4Z,MAAAA,KAAK,EAAEvO,WAAW,CAACuO,KAAZ,CAAkB5Z,QAAlB,EAJT;AAKEmZ,MAAAA,gBAAgB,EAAE9N,WAAW,CAAC8N,gBAAZ,CAA6BnZ,QAA7B,EALpB;AAMEyZ,MAAAA,IAAI,EAAEpO,WAAW,CAACoO,IAAZ,CAAiB3W,GAAjB,CAAqB,UAACuX,GAAD;AAAA,4BACtBA,GADsB;AAEzBvU,UAAAA,MAAM,EAAEuU,GAAG,CAACvU,MAAJ,CAAW9F,QAAX,EAFiB;AAGzB2Z,UAAAA,OAAO,EAAEU,GAAG,CAACV,OAAJ,CAAY3Z,QAAZ;AAHgB;AAAA,OAArB,CANR;AAWEma,MAAAA,kBAAkB,EAAE9O,WAAW,CAAC8O,kBAAZ,CAA+Bna,QAA/B,EAXtB;AAYEka,MAAAA,cAAc,EAAE7O,WAAW,CAAC6O,cAAZ,CAA2Bla,QAA3B;AAZlB;AAcD,GAfM,MAeA;AACLsL,IAAAA,OAAO,CAACC,GAAR,CACE,uDADF,EAEEF,WAFF;AAIA,UAAM,IAAIjJ,KAAJ,CAAU,oBAAV,CAAN;AACD;AACF,CAvCM;;ACncA,IAAM0Z,yBAAyB,GAAG,CACvC;AACEzV,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,uBADhB;AAEE/G,MAAAA,IAAI,EAAE,aAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,uBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,CADd;AAuFE8G,IAAAA,YAAY,EAAE,gCAvFhB;AAwFE/G,IAAAA,IAAI,EAAE,OAxFR;AAyFEC,IAAAA,IAAI,EAAE;AAzFR,GADM,EA4FN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GA5FM,EAuHN;AACED,IAAAA,IAAI,EAAE,mBADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GAvHM,CADV;AA6HED,EAAAA,IAAI,EAAE,4BA7HR;AA8HEqH,EAAAA,OAAO,EAAE,EA9HX;AA+HEJ,EAAAA,eAAe,EAAE,MA/HnB;AAgIEhH,EAAAA,IAAI,EAAE;AAhIR,CADuC,CAAlC;AAqIP,AAAO,IAAMuc,0BAA0B,GAAG,CACxC;AACE1V,EAAAA,MAAM,EAAE,CACN;AACEQ,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,WAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,QAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,EAqBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,OAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArBU,EA0BV;AACE8G,MAAAA,YAAY,EAAE,yBADhB;AAEE/G,MAAAA,IAAI,EAAE,YAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1BU,EA+BV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,kBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/BU,EAoCV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,WAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,SADhB;AAEE/G,QAAAA,IAAI,EAAE,QAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,EAWV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,SAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OAXU,CADd;AAkBE8G,MAAAA,YAAY,EAAE,0BAlBhB;AAmBE/G,MAAAA,IAAI,EAAE,MAnBR;AAoBEC,MAAAA,IAAI,EAAE;AApBR,KApCU,EA0DV;AACE8G,MAAAA,YAAY,EAAE,wBADhB;AAEE/G,MAAAA,IAAI,EAAE,cAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA1DU,EA+DV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,gBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KA/DU,EAoEV;AACEqH,MAAAA,UAAU,EAAE,CACV;AACEP,QAAAA,YAAY,EAAE,6BADhB;AAEE/G,QAAAA,IAAI,EAAE,mBAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OADU,EAMV;AACE8G,QAAAA,YAAY,EAAE,OADhB;AAEE/G,QAAAA,IAAI,EAAE,cAFR;AAGEC,QAAAA,IAAI,EAAE;AAHR,OANU,CADd;AAaE8G,MAAAA,YAAY,EAAE,+BAbhB;AAcE/G,MAAAA,IAAI,EAAE,wBAdR;AAeEC,MAAAA,IAAI,EAAE;AAfR,KApEU,EAqFV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,oBAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KArFU,CADd;AA4FE8G,IAAAA,YAAY,EAAE,mCA5FhB;AA6FE/G,IAAAA,IAAI,EAAE,YA7FR;AA8FEC,IAAAA,IAAI,EAAE;AA9FR,GADM,EAiGN;AACEqH,IAAAA,UAAU,EAAE,CACV;AACEP,MAAAA,YAAY,EAAE,iCADhB;AAEE/G,MAAAA,IAAI,EAAE,eAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KADU,EAMV;AACE8G,MAAAA,YAAY,EAAE,OADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KANU,EAWV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAXU,EAgBV;AACE8G,MAAAA,YAAY,EAAE,SADhB;AAEE/G,MAAAA,IAAI,EAAE,GAFR;AAGEC,MAAAA,IAAI,EAAE;AAHR,KAhBU,CADd;AAuBE8G,IAAAA,YAAY,EAAE,+BAvBhB;AAwBE/G,IAAAA,IAAI,EAAE,WAxBR;AAyBEC,IAAAA,IAAI,EAAE;AAzBR,GAjGM,EA4HN;AACED,IAAAA,IAAI,EAAE,mBADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GA5HM,CADV;AAkIED,EAAAA,IAAI,EAAE,6BAlIR;AAmIEqH,EAAAA,OAAO,EAAE,EAnIX;AAoIEJ,EAAAA,eAAe,EAAE,MApInB;AAqIEhH,EAAAA,IAAI,EAAE;AArIR,CADwC,CAAnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChIA,IAAMwc,iCAAiC,GAAG,wBAA1C;;AA6BP,IAAMC,oBAAoB;AAAA,yEAAG,kBAC3B5Q,WAD2B,EAE3BxL,OAF2B,EAG3Bqc,QAH2B,EAI3BC,cAJ2B,EAK3BC,OAL2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAG3BF,QAH2B;AAG3BA,cAAAA,QAH2B,GAGQ,EAHR;AAAA;;AAAA,gBAK3BE,OAL2B;AAK3BA,cAAAA,OAL2B,GAKDC,OALC;AAAA;;AAOrBC,YAAAA,OAPqB,GAOc;AACvCnc,cAAAA,KAAK,EAAE0b,iBAAiB,CAACxQ,WAAD,CADe;AAEvCxL,cAAAA,OAAO,EAAEA,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAF8B;AAGvCkc,cAAAA,QAAQ,EAARA;AAHuC,aAPd;AAavBK,YAAAA,OAbuB,4BAabJ,cAba,oBAabA,cAAc,CAAEI,OAbH,oCAacP,iCAbd;AAAA;AAAA,mBAe6BI,OAAO,CAC1DG,OAD0D,uBAE7D;AACEzR,cAAAA,MAAM,EAAE,MADV;AAEE0R,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFX;AAKEC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,OAAf;AALR,aAF6D,CAAP,CAUrDvJ,IAVqD;AAAA,yEAUhD,iBAAO6J,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,4BACCA,GAAG,CAACC,EADL;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEUD,GAAG,CAACE,IAAJ,EAFV;;AAAA;AAAA;;AAAA;AAAA,8BAIAF,GAAG,CAACG,MAAJ,IAAc,GAJd;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKUH,GAAG,CAACE,IAAJ,EALV;;AAAA;AAAA;;AAAA;AAAA,yDAOGF,GAAG,CAACE,IAAJ,EAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAVgD;;AAAA;AAAA;AAAA;AAAA,0BAmB/C,UAACE,GAAD;AACL;AACA,oBAAMA,GAAN;AACD,aAtBqD,CAf7B;;AAAA;AAerBC,YAAAA,eAfqB;AAAA,8CAuCpBA,eAvCoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAApBhB,oBAAoB;AAAA;AAAA;AAAA,GAA1B;AAgEA;;;;;;;;;AAOA,IAAMiB,eAAe;AAAA,0EAAG,kBACtBC,OADsB,EAEtBhB,cAFsB,EAGtBC,OAHsB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAGtBA,OAHsB;AAGtBA,cAAAA,OAHsB,GAGIC,OAHJ;AAAA;;AAKtB;AACMe,YAAAA,sBANgB,GAMST,qBAAS,CAACQ,OAAD,WAACA,OAAD,GAAY,EAAZ,EAAgB;AACtDE,cAAAA,WAAW,EAAE;AADyC,aAAhB,CANlB;AAUlBd,YAAAA,OAVkB,6BAURJ,cAVQ,oBAURA,cAAc,CAAEI,OAVR,qCAUmBP,iCAVnB;AAAA;AAAA,mBAYSI,OAAO,CACjCG,OADiC,0BACLa,sBADK,CAAP,CAG5BrK,IAH4B;AAAA,yEAGvB,kBAAO6J,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA,4BACCA,GAAG,CAACC,EADL;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAEUD,GAAG,CAACE,IAAJ,EAFV;;AAAA;AAAA;;AAAA;AAAA,8BAIAF,GAAG,CAACG,MAAJ,IAAc,GAJd;AAAA;AAAA;AAAA;;AAAA;AAAA,+BAKUH,GAAG,CAACE,IAAJ,EALV;;AAAA;AAAA;;AAAA;AAAA,0DAOGF,GAAG,CAACE,IAAJ,EAPH;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHuB;;AAAA;AAAA;AAAA;AAAA,0BAYtB,UAACE,GAAD;AACL;AACA,oBAAMA,GAAN;AACD,aAf4B,CAZT;;AAAA;AAYhBM,YAAAA,gBAZgB;AAAA,8CA6BfA,gBA7Be;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfJ,eAAe;AAAA;AAAA;AAAA,GAArB;;ACtGO,IAAMvL,uBAAqB,GAAG,SAAxBA,qBAAwB,CACnC9R,OADmC;;;AAGnC,MAAMqR,aAAa,GAAGrR,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAAtB;AACA,MAAMqR,eAAe,GAGnBJ,WAAgB,CAACC,aAAD,CAHlB;AAIA,kCAAOG,eAAP,oBAAOA,eAAe,CAAEO,kBAAxB,oCAA8C,IAA9C;AACD,CATM;;;;ACHP,WAAY2L;AACV;;;AAGAA,EAAAA,6CAAA,YAAA;AACA;;;;AAGAA,EAAAA,4CAAA,WAAA;AACD,CATD,EAAYA,sBAAc,KAAdA,sBAAc,KAAA,CAA1B;;AAWA,WAAYC;AACVA,EAAAA,2CAAA,YAAA;AACAA,EAAAA,4CAAA,aAAA;AACAA,EAAAA,8CAAA,eAAA;AACAA,EAAAA,2CAAA,YAAA;AACD,CALD,EAAYA,qBAAa,KAAbA,qBAAa,KAAA,CAAzB;AAWA;;;;;;AAIA,IAAaC,iBAAiB,gDAC3BF,sBAAc,CAACG,MADY,IACH,KADG,qBAE3BH,sBAAc,CAACI,OAFY,IAEF,MAFE,qBAAvB;;ACvBP;;;;;AAIA,AAAO,IAAMC,wBAAwB,GAAmB;AACtDpE,EAAAA,iBAAiB,EAAE3a,YADmC;AAEtD0a,EAAAA,YAAY,EAAE;AAFwC,CAAjD;;ACiEP,WAAYsE;AACVA,EAAAA,uDAAA,YAAA;AACAA,EAAAA,uDAAA,YAAA;AACAA,EAAAA,oDAAA,SAAA;AACAA,EAAAA,0DAAA,YAAA;AACAA,EAAAA,yDAAA,YAAA;AACAA,EAAAA,iEAAA,kBAAA;AACAA,EAAAA,oDAAA,QAAA;AACAA,EAAAA,yDAAA,aAAA;AACAA,EAAAA,wDAAA,WAAA;AACAA,EAAAA,wDAAA,SAAA;AACAA,EAAAA,4DAAA,aAAA;AACAA,EAAAA,+DAAA,iBAAA;AACAA,EAAAA,6DAAA,eAAA;AACD,CAdD,EAAYA,2BAAmB,KAAnBA,2BAAmB,KAAA,CAA/B;;AAgBA,IAAaC,6CAA6C,GAAG,CAC3DD,2BAAmB,CAACE,OADuC,EAE3DF,2BAAmB,CAAC/L,OAFuC,EAG3D+L,2BAAmB,CAAC9L,aAHuC,EAI3D8L,2BAAmB,CAACG,OAJuC,EAK3DH,2BAAmB,CAACI,QALuC,CAAtD;;IAuFDC;AAoBJ,qBACEpU,QADF,EAEEZ,MAFF,EAGErJ,OAHF,EAIE2S,gBAJF;;;;;;AAsCA;;;;;;;;AAQA,2BAAA,GAAqB,UACnB9E,KADmB,EAEnB3D,aAFmB,EAGnBoU,iBAHmB;;;AAKnB;AACA,aAAO3Q,mBAAiB,CACtBzD,aADsB,2BAEtBoU,iBAFsB,oBAEtBA,iBAAiB,CAAEre,uBAFG,oCAEwB,KAAI,CAACse,aAAL,CAAmBjX,OAF3C,EAGtBuG,KAHsB,EAItB,KAAI,CAAC5D,QAJiB,CAAxB;AAMD,KAZD;AAcA;;;;;;;;AAMA,6BAAA;AAAA,gEAAuB,iBAAO0J,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA,iDACd,KAAI,CAAC1J,QAAL,CAAc2J,kBAAd,CAAiCD,MAAjC,CADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB;;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;AAOA,oBAAA,GAAc,UACZoG,KADY,EAEZyE,SAFY;AAIZ,UAAIA,SAAS,KAAK,QAAlB,EAA4B;AAC1B,eAAO,KAAI,CAACD,aAAL,CAAmBE,iBAAnB,CAAqC1E,KAArC,CAAP;AACD;;AACD,UAAIyE,SAAS,KAAK,SAAlB,EAA6B;AAC3B,eAAO,KAAI,CAACD,aAAL,CAAmBG,kBAAnB,CAAsC3E,KAAtC,CAAP;AACD;;AACDtO,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiC8S,SAAjC;AACA,YAAM,IAAIjc,KAAJ,CAAU,iBAAV,CAAN;AACD,KAZD;AAcA;;;;;;;;;;;;AAUA,qBAAA,GAAe,UACboc,YADa,EAEbC,kBAFa,EAGb9J,oBAHa;UAEb8J;AAAAA,QAAAA,qBAA8B;;;AAG9B,UAAMC,aAAa,GAAGF,YAAY,CAACG,KAAb,CAAmB,UAACtT,WAAD;AACvC,YAAIA,WAAW,CAAC4N,SAAZ,KAA0B,CAA9B,EAAiC;AAC/B,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALqB,CAAtB;AAOA,OACEyF,aADF,IAAAjK,SAAS,qFAAT,CAAA;AAKA,UAAMmK,SAAS,GAAGJ,YAAY,CAACG,KAAb,CAAmB,UAACtT,WAAD;AACnC,YAAI,iBAAiBA,WAArB,EAAkC;AAChC,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALiB,CAAlB;AAOA,UAAMwT,UAAU,GAAGL,YAAY,CAACG,KAAb,CAAmB,UAACtT,WAAD;AACpC,YAAI,kBAAkBA,WAAtB,EAAmC;AACjC,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD,OALkB,CAAnB;AAOA,UAAMyT,8BAA8B,GAAGF,SAAS,IAAIC,UAApD;AAEA,OACEC,8BADF,IAAArK,SAAS,uEAAT,CAAA;;AAKA,UAAImK,SAAJ,EAAe;AACb,YAAMG,kBAAkB,GACtBP,YADF;AAEA,eAAO,KAAI,CAACJ,aAAL,CAAmBY,eAAnB,CACLD,kBADK,EAELA,kBAAkB,CAACjc,GAAnB,CAAuB,UAACmc,EAAD;AAAA,iBAAQA,EAAE,CAAC9d,SAAX;AAAA,SAAvB,CAFK,EAGL4d,kBAAkB,CAACjc,GAAnB,CAAuB,UAAC2C,CAAD;AAAA,iBAAO,IAAP;AAAA,SAAvB,CAHK,EAILgZ,kBAJK,eAMA9J,oBANA,EAAP;AASD,OAZD,MAYO,IAAIkK,UAAJ,EAAgB;AACrB,YAAMK,mBAAmB,GACvBV,YADF;AAEA,eAAO,KAAI,CAACJ,aAAL,CAAmBe,gBAAnB,CACLD,mBADK,EAELA,mBAAmB,CAACpc,GAApB,CAAwB,UAACmc,EAAD;AAAA,iBAAQA,EAAE,CAAC9d,SAAX;AAAA,SAAxB,CAFK,EAGL+d,mBAAmB,CAACpc,GAApB,CAAwB,UAACmc,EAAD;AAAA,iBAAQA,EAAE,CAAC9E,kBAAX;AAAA,SAAxB,CAHK,EAIL+E,mBAAmB,CAACpc,GAApB,CAAwB,UAAC2C,CAAD;AAAA,iBAAO,IAAP;AAAA,SAAxB,CAJK,EAKLgZ,kBALK,eAOA9J,oBAPA,EAAP;AAUD,OAbM,MAaA;AACL,cAAMvS,KAAK,CAAC,kCAAD,CAAX;AACD;AACF,KAlED;AAoEA;;;;;;;AAKA,qBAAA,GAAe,UAACjC,KAAD;AACb,UAAI,iBAAiBA,KAArB,EAA4B;AAC1B,eAAO,KAAI,CAACie,aAAL,CAAmBgB,kBAAnB,CAAsCjf,KAAtC,CAAP;AACD;;AACD,UAAI,kBAAkBA,KAAtB,EAA6B;AAC3B,eAAO,KAAI,CAACie,aAAL,CAAmBiB,mBAAnB,CAAuClf,KAAvC,CAAP;AACD;;AACD,YAAM,IAAIiC,KAAJ,CAAU,iBAAV,CAAN;AACD,KARD;AAUA;;;;;;;;;;;;;AAWA,uBAAA;AAAA,iEAAiB,kBAAOjC,KAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,sBACX,iBAAiBA,KADN;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAEmB,KAAI,CAACie,aAAL,CAAmBkB,oBAAnB,CAC9Bnf,KAD8B,CAFnB;;AAAA;AAEPof,gBAAAA,iBAFO;AAAA,kDAKNA,iBALM;;AAAA;AAAA,sBAOX,kBAAkBpf,KAPP;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAaH,KAAI,CAACie,aAAL,CAAmBoB,mBAAnB,CAAuCrf,KAAvC,CAbG;;AAAA;AAAA;AASXsf,AACAC,gBAAAA,kBAVW;AAWXC,AAXW,kDAcND,kBAdM;;AAAA;AAgBfpU,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCpL,KAAjC;AAhBe,sBAiBT,IAAIiC,KAAJ,CAAU,iBAAV,CAjBS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjB;;AAAA;AAAA;AAAA;AAAA;AAoBA;;;;;;;;;;AAQA,iCAAA,GAA2B,UACzBsL,KADyB,EAEzBiJ,cAFyB;AAGzBC,IAAAA,4BAHyB,EAIzBC,cAJyB;;;AAMzB,UAAM+I,WAAW,4BAAG/I,cAAH,oBAAGA,cAAc,CAAE3N,MAAnB,oCAA6B,KAAI,CAACA,MAAnD;;AACA,UAAI,CAAC0W,WAAL,EAAkB;AAChB,cAAM,IAAIxd,KAAJ,CAAU,oBAAV,CAAN;AACD;;AACD,aAAO6M,cAAY,CACjB,KAAI,CAACmP,aAAL,CAAmBjX,OADF,EAEjBuG,KAFiB,EAGjBkS,WAHiB,eAKZhJ,4BALY,GAOjBC,cAPiB,CAAnB;AASD,KAnBD;;AAwGA,+BAAA,GAAyB,UAAChX,OAAD;AACvB,aAAO8R,uBAAqB,CAAC9R,OAAD,CAA5B;AACD,KAFD;;AAIA,kCAAA,GAA4B,UAC1BggB,WAD0B,EAE1BC,kBAF0B,EAM1B1f,YAN0B;AAQ1B,aAAO,KAAI,CAAC2f,qBAAL,cAEAD,kBAFA;AAGH;AACA/b,QAAAA,OAAO,EAAE;AAJN,UAML8b,WANK,EAOL,KAPK,EAQLzf,YARK,EASL;AACE;AACAiZ,QAAAA,eAAe,EAAE,CAACuE,wBAAD;AAFnB,OATK,CAAP;AAcD,KAtBD;;AAwBA,8BAAA,GAAwB,UACtBhF,GADsB,EAEtBjL,KAFsB,EAGtBqS,YAHsB,EAItB5f,YAJsB,EAKtB0T,UALsB;;;UAGtBkM;AAAAA,QAAAA,eAA+B;;;AAI/B,UAAMjM,aAAa,GAAG;AACpBlU,QAAAA,OAAO,EAAE,KAAI,CAACA,OADM;AAEpBO,QAAAA,YAAY,EAAEA,YAFM;AAGpB0Z,QAAAA,KAAK,EAAE,KAAI,CAACA;AAHQ,OAAtB;;AAKA,UAAM9F,MAAM,gBAAQD,aAAR,EAA0BD,UAA1B,CAAZ;;AAEA,UAAMmF,SAAS,GACb+G,YAAY,KAAK,MAAjB,GAA0BzC,sBAAc,CAACI,OAAzC,GAAmDJ,sBAAc,CAACG,MADpE;;AAIA,UAAIzE,SAAS,KAAKsE,sBAAc,CAACG,MAAjC,EAAyC;AACvC,YAAI/P,KAAK,CAAC3K,YAAN,CAAmB3C,WAAnB,OAAqCqX,oBAAzC,EAA+D;AAC7D,gBAAM,IAAItV,KAAJ,CACJ,kGADI,CAAN;AAGD;AACF;;AAED,cAAQwW,GAAG,CAACpZ,IAAZ;AACE;AACA,aAAK,QAAL;AACE,cAAMuZ,WAAW,GAAGJ,mBAAmB,CAACC,GAAD,EAAMjL,KAAN;AACrCsL,YAAAA,SAAS,EAATA,SADqC;AAErCnN,YAAAA,KAAK,EAAE1L;AAF8B,aAGlC4T,MAHkC,EAAvC;AAKA,iBAAO+E,WAAP;AACF;;AACA,aAAK,SAAL;AACE,cAAMkB,YAAY,GAAGD,oBAAoB,CAACpB,GAAD,EAAMjL,KAAN;AACvCsL,YAAAA,SAAS,EAATA,SADuC;AAEvCnN,YAAAA,KAAK,EAAE1L;AAFgC,aAGpC4T,MAHoC,EAAzC;AAKA,iBAAOiG,YAAP;;AACF;AACE,gBAAM,IAAI1X,wBAAJ,cAA8BqW,GAAW,CAACpZ,IAA1C,wBAAkD,SAAlD,CAAN;AAlBJ;AAoBD,KA9CD;AAgDA;;;;;;;;;AAOA,kBAAA;AAAA,iEAAY,kBAAOW,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACL,KAAI,CAAC+I,MADA;AAAA;AAAA;AAAA;;AAAA,sBAEF,IAAI9G,KAAJ,CAAU,oBAAV,CAFE;;AAAA;AAAA;AAAA,uBAKiBsH,wBAAsB,CAC/CvJ,KAD+C,EAE/C,KAAI,CAAC+I,MAF0C,EAG/C,KAAI,CAACrJ,OAH0C,EAI/C,KAAI,CAACue,aAAL,CAAmBjX,OAJ4B,CALvC;;AAAA;AAKJqE,gBAAAA,YALI;AAYJyU,gBAAAA,WAZI,GAYU7H,iBAAiB,CAAC5M,YAAD,CAZ3B;AAcJH,gBAAAA,WAdI,gBAeLlL,KAfK;AAgBRgB,kBAAAA,SAAS,EAAE;AACT4J,oBAAAA,aAAa,EAAE,CADN;AAETa,oBAAAA,CAAC,EAAEqU,WAAW,CAACrU,CAFN;AAGTjJ,oBAAAA,CAAC,EAAEsd,WAAW,CAACtd,CAHN;AAITgJ,oBAAAA,CAAC,EAAEsU,WAAW,CAACtU;AAJN;AAhBH;AAAA,kDAuBHN,WAvBG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA;AA0BA;;;;;;;;;;;AASA,uCAAA;AAAA,iEAAiC,kBAC/BA,WAD+B,EAE/BtH,OAF+B,EAG/Bmc,kBAH+B,EAI/BvL,oBAJ+B;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,oBAM1B,KAAI,CAACzL,MANqB;AAAA;AAAA;AAAA;;AAAA,sBAOvB,IAAI9G,KAAJ,CACJ,yDADI,CAPuB;;AAAA;AAAA,sBAW3BiJ,WAAW,CAAC4N,SAAZ,KAA0BsE,sBAAc,CAACG,MAXd;AAAA;AAAA;AAAA;;AAAA,sBAYvB,IAAItb,KAAJ,CACJ,2EADI,CAZuB;;AAAA;AAAA;AAAA,uBAiBH,KAAI,CAAC8G,MAAL,CAAYiX,UAAZ,EAjBG;;AAAA;AAiBzBvV,gBAAAA,aAjByB;AAkBzBwV,gBAAAA,UAlByB,4BAmB7BF,kBAnB6B,oBAmB7BA,kBAAkB,CAAE3K,6CAnBS,oCAoB7B,KApB6B;;AAAA,sBAuB3B,iBAAiBlK,WAvBU;AAAA;AAAA;AAAA;;AAwBvBgV,gBAAAA,cAxBuB,GAwBN3Y,eAAe,CAACR,OAAhB,CACrBmE,WAAW,CAAC0M,WADS,EAErB,KAAI,CAAC7O,MAFgB,CAxBM;AA6BvBoX,gBAAAA,aA7BuB,GA6BP,IAAIrZ,aAAJ,CAAc6U,yBAAd,CA7BO;AA+BvByE,gBAAAA,QA/BuB,GA+BZD,aAAa,CAACE,WAAd,CAA0B,4BAA1B,CA/BY;AAgCvB5c,gBAAAA,IAhCuB,GAgChB0c,aAAa,CAACG,aAAd,CAA4BF,QAAQ,CAACla,MAArC,EAA6C,CACxDgF,WADwD,EAExDA,WAAW,CAAClK,SAF4C,EAGxDif,UAHwD,CAA7C,CAhCgB;AAAA;AAAA,uBAsCAC,cAAc,CACzC,iDADyC,CAAd,CAG3BzV,aAH2B,EAI3B,KAAI,CAACwT,aAAL,CAAmBjX,OAJQ,2BAK3B+Y,kBAL2B,oBAK3BA,kBAAkB,CAAEQ,+BALO,oCAK4B3c,OAL5B,EAM3BH,IAN2B,EAO3B+Q,oBAP2B,WAO3BA,oBAP2B,GAOH,EAPG,CAtCA;;AAAA;AAsCvBgM,gBAAAA,cAtCuB;AAAA,kDA+CtBA,cA/CsB;;AAAA;AAAA,sBAmD3B,kBAAkBtV,WAnDS;AAAA;AAAA;AAAA;;AAoDvBuV,gBAAAA,eApDuB,GAoDLpZ,gBAAgB,CAACN,OAAjB,CACtBmE,WAAW,CAACuM,YADU,EAEtB,KAAI,CAAC1O,MAFiB,CApDK;AAwDvBoX,gBAAAA,cAxDuB,GAwDP,IAAIrZ,aAAJ,CAAc8U,0BAAd,CAxDO;AA0DvBwE,gBAAAA,SA1DuB,GA0DZD,cAAa,CAACE,WAAd,CAA0B,6BAA1B,CA1DY;AA2DvB5c,gBAAAA,KA3DuB,GA2DhB0c,cAAa,CAACG,aAAd,CAA4BF,SAAQ,CAACla,MAArC,EAA6C,CACxDgF,WADwD,EAExDA,WAAW,CAAClK,SAF4C,EAGxDif,UAHwD,CAA7C,CA3DgB;AAAA;AAAA,uBAiEAQ,eAAe,CAACC,gBAAhB,CAC3BjW,aAD2B,EAE3B,KAAI,CAACwT,aAAL,CAAmBjX,OAFQ,4BAG3B+Y,kBAH2B,oBAG3BA,kBAAkB,CAAEQ,+BAHO,qCAG4B3c,OAH5B,2BAI3BsH,WAAW,CAAC8O,kBAJe,oCAIO,GAJP,EAK3BvW,KAL2B,EAM3B+Q,oBAN2B,WAM3BA,oBAN2B,GAMH,EANG,CAjEA;;AAAA;AAiEvBgM,gBAAAA,eAjEuB;AAAA,kDAyEtBA,eAzEsB;;AAAA;AAAA,sBA6EzB,IAAIve,KAAJ,CAAU,oBAAV,CA7EyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA;AAgFA;;;;;;;;;;AAQA,kCAAA;AAAA,iEAA4B,kBAC1BiJ,WAD0B,EAE1BtH,OAF0B,EAG1Bmc,kBAH0B,EAI1BvL,oBAJ0B;AAAA;AAAA;AAAA;AAAA;AAAA,kDAMnB,KAAI,CAACrH,eAAL,CACLjC,WADK;AAGHqV,kBAAAA,+BAA+B,EAAE3c;AAH9B,mBAIAmc,kBAJA,gBAOAvL,oBAPA,EANmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA5B;;AAAA;AAAA;AAAA;AAAA;;AAkBA,2BAAA,GAAqB,UAACxU,KAAD;AACnB,aAAOA,KAAK,CAAC+Y,UAAN,CAAiB7Y,WAAjB,OAAmCqX,oBAA1C;AACD,KAFD;AAIA;;;;;;;;;AAOA,wBAAA;AAAA,iEAAkB,kBAChBrM,WADgB,EAEhB6U,kBAFgB,EAGhBvL,oBAHgB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAKhB;AACMmM,gBAAAA,mCANU,GAOdzV,WAAW,CAAC4N,SAAZ,KAA0BsE,sBAAc,CAACI,OAP3B;;AASVoD,gBAAAA,aATU,GASM,KAAI,CAACC,kBAAL,CAAwB3V,WAAxB,CATN;AAUV4V,gBAAAA,gBAVU,GAWdF,aAAa,IAAID,mCAXH;AAYVI,gBAAAA,gBAZU,GAYS,KAAI,CAACC,0BAAL,CAAgC9V,WAAhC,CAZT;;AAAA,sBAeZ,kBAAkBA,WAfN;AAAA;AAAA;AAAA;;AAAA,sBAiBVA,WAAW,CAAC4N,SAAZ,KAA0BsE,sBAAc,CAACI,OAjB/B;AAAA;AAAA;AAAA;;AAAA,kDAkBL,KAAI,CAACS,aAAL,CAAmBgD,UAAnB,CACL/V,WADK,EAELA,WAAW,CAAClK,SAFP,EAGLkK,WAAW,CAAC8O,kBAHP,EAIL,IAJK;AAMH;AACAhR,kBAAAA,KAAK,EAAE8X,gBAAgB,GAAGC,gBAAH,GAAsBziB;AAP1C,mBAQAkW,oBARA,EAlBK;;AAAA;AA8BZ;AACI0M,gBAAAA,iBA/BQ,6BAgCVnB,kBAhCU,oBAgCVA,kBAAkB,CAAE3K,6CAhCV,qCAiCV,KAjCU;;AAAA,sBAmCRlK,WAAW,CAAC+O,sBAAZ,CAAmC7W,MAAnC,GAA4C,CAnCpC;AAAA;AAAA;AAAA;;AAAA,sBAsCR,CAAA2c,kBAAkB,QAAlB,YAAAA,kBAAkB,CAAEQ,+BAApB,MAAwDjiB,SAtChD;AAAA;AAAA;AAAA;;AAAA,sBAwCF,IAAI2D,KAAJ,CACJ,kHADI,CAxCE;;AAAA;AAAA,kDA+CL,KAAI,CAACgc,aAAL,CAAmBkD,WAAnB,CACLjW,WADK,EAELA,WAAW,CAAClK,SAFP,4BAGL+e,kBAHK,oBAGLA,kBAAkB,CAAEQ,+BAHf,qCAIHrV,WAAW,CAAC6O,cAJT,EAKL7O,WAAW,CAAC8O,kBALP,EAMLkH,iBANK,EAOL,IAPK,eASA1M,oBATA,EA/CK;;AAAA;AAAA;AAAA;;AAAA;AAAA,sBA4DL,iBAAiBtJ,WA5DZ;AAAA;AAAA;AAAA;;AAAA,sBA8DVA,WAAW,CAAC4N,SAAZ,KAA0BsE,sBAAc,CAACI,OA9D/B;AAAA;AAAA;AAAA;;AAAA,kDA+DL,KAAI,CAACS,aAAL,CAAmBmD,SAAnB,CACLlW,WADK,EAELA,WAAW,CAAClK,SAFP,EAGL,IAHK;AAKH;AACAgI,kBAAAA,KAAK,EAAE8X,gBAAgB,GAAGC,gBAAH,GAAsBziB;AAN1C,mBAOAkW,oBAPA,EA/DK;;AAAA;AA0EZ;AACI0M,gBAAAA,kBA3EQ,6BA4EVnB,kBA5EU,oBA4EVA,kBAAkB,CAAE3K,6CA5EV,qCA6EV,KA7EU;;AAAA,sBA+ERlK,WAAW,CAAC+N,qBAAZ,CAAkC7V,MAAlC,GAA2C,CA/EnC;AAAA;AAAA;AAAA;;AAAA,sBAkFR,CAAA2c,kBAAkB,QAAlB,YAAAA,kBAAkB,CAAEQ,+BAApB,MAAwDjiB,SAlFhD;AAAA;AAAA;AAAA;;AAAA,sBAoFF,IAAI2D,KAAJ,CACJ,kHADI,CApFE;;AAAA;AAAA,kDA2FL,KAAI,CAACgc,aAAL,CAAmBoD,UAAnB,CACLnW,WADK,EAELA,WAAW,CAAClK,SAFP,4BAGL+e,kBAHK,oBAGLA,kBAAkB,CAAEQ,+BAHf,qCAIHrV,WAAW,CAAC2N,aAJT,EAKLqI,kBALK,EAML,IANK,eAQA1M,oBARA,EA3FK;;AAAA;AAwGhBrJ,gBAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,WAAjC;AAxGgB,sBAyGV,IAAIjJ,KAAJ,CAAU,4BAAV,CAzGU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlB;;AAAA;AAAA;AAAA;AAAA;AA4GA;;;;;;;;;;;AASA,kBAAA,GAAY,UACViJ,WADU,EAEVxL,OAFU,EAGVqc,QAHU;AAKV,UAAMuF,aAAa,GAAGlJ,QAAQ,CAAC1Y,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAAD,EAAuB,EAAvB,CAA9B;AACA,UAAM0hB,kBAAkB,GACtB5D,6CAA6C,CAACrF,QAA9C,CAAuDgJ,aAAvD,CADF;AAEA,OAAAlN,OAAO,CACLmN,kBADK,aAEI7hB,OAFJ,iLAAP;AAIA,aAAOoc,oBAAoB,CAAC5Q,WAAD,EAAcoW,aAAd,EAA6BvF,QAA7B,EAAuC;AAChEK,QAAAA,OAAO,EAAE,KAAI,CAACoF;AADkD,OAAvC,CAA3B;AAGD,KAfD;AAiBA;;;;;;;;AAMA,kBAAA;AAAA,iEAAY,kBACVxE,OADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAGWD,eAAe,CAACC,OAAD,EAAU;AAC5CZ,kBAAAA,OAAO,EAAE,KAAI,CAACoF;AAD8B,iBAAV,CAH1B;;AAAA;AAGJlZ,gBAAAA,MAHI;AAAA,kDAMHA,MANG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAZ;;AAAA;AAAA;AAAA;AAAA;AASA;;;;;;;;;AAOA,oBAAA;AAAA,iEAAc;AAEZmZ,MAAAA,SAFY,EAGZC,QAHY,EAIZlN,oBAJY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMR,iBAAiBiN,SAAjB,IAA8B,iBAAiBC,QANvC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAQe,KAAI,CAACzD,aAAL,CAAmB0D,iBAAnB,CACvBF,SADuB,EAEvBC,QAFuB,EAGvBD,SAAS,CAACzgB,SAHa,EAIvB0gB,QAAQ,CAAC1gB,SAJc,EAKvBwT,oBALuB,WAKvBA,oBALuB,GAKC,EALD,CARf;;AAAA;AAQJoN,gBAAAA,UARI;AAAA,kDAeHA,UAfG;;AAAA;AAAA,sBAkBN,IAAI3f,KAAJ,CACJ,0HADI,CAlBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAd;;AAAA;AAAA;AAAA;AAAA;;AAuBA,sBAAA,GAAgB,UAACjC,KAAD;AACd;AACA,UAAIA,KAAK,CAAC8Y,SAAN,CAAgBjZ,QAAhB,CAAyB,EAAzB,MAAiCud,sBAAc,CAACG,MAAf,CAAsB1d,QAAtB,EAArC,EAAuE;AACrE,eAAO;AACLgD,UAAAA,YAAY,EAAE7C,KAAK,CAAC+Y,UADf;AAELpT,UAAAA,MAAM,EAAE3F,KAAK,CAACgZ,gBAAN,CAAuBnZ,QAAvB,CAAgC,EAAhC,CAFH;AAGLR,UAAAA,IAAI,EAAE;AAHD,SAAP;AAKD,OAND,MAMO,IACLW,KAAK,CAAC8Y,SAAN,CAAgBjZ,QAAhB,CAAyB,EAAzB,MAAiCud,sBAAc,CAACI,OAAf,CAAuB3d,QAAvB,EAD5B,EAEL;AACA;AACA,YAAI,iBAAiBG,KAArB,EAA4B;AAC1B,iBAAO;AACL6C,YAAAA,YAAY,EAAE7C,KAAK,CAAC4X,WADf;AAELhU,YAAAA,OAAO,EAAE5D,KAAK,CAAC6Y,aAAN,CAAoBhZ,QAApB,CAA6B,EAA7B,CAFJ;AAGLR,YAAAA,IAAI,EAAE;AAHD,WAAP;AAKD,SAND,MAMO,IAAI,kBAAkBW,KAAtB,EAA6B;AAClC,iBAAO;AACL6C,YAAAA,YAAY,EAAE7C,KAAK,CAACyX,YADf;AAEL7T,YAAAA,OAAO,EAAE5D,KAAK,CAAC+Z,cAAN,CAAqBla,QAArB,CAA8B,EAA9B,CAFJ;AAGL8F,YAAAA,MAAM,EAAE3F,KAAK,CAACga,kBAAN,CAAyBna,QAAzB,CAAkC,EAAlC,CAHH;AAILR,YAAAA,IAAI,EAAE;AAJD,WAAP;AAMD;AACF;;AACD,YAAM,IAAI4C,KAAJ,8BAAqCjC,KAAK,CAAC8Y,SAA3C,CAAN;AACD,KA5BD;;AA8BA,sBAAA,GAAgB,UAAC9Y,KAAD;AACd;AACA,UAAIA,KAAK,CAAC8Y,SAAN,CAAgBjZ,QAAhB,CAAyB,EAAzB,MAAiCud,sBAAc,CAACG,MAAf,CAAsB1d,QAAtB,EAArC,EAAuE;AACrE,YAAI,iBAAiBG,KAArB,EAA4B;AAC1B,iBAAO;AACL6C,YAAAA,YAAY,EAAE7C,KAAK,CAAC4X,WADf;AAELhU,YAAAA,OAAO,EAAE5D,KAAK,CAAC6Y,aAAN,CAAoBhZ,QAApB,CAA6B,EAA7B,CAFJ;AAGLR,YAAAA,IAAI,EAAE;AAHD,WAAP;AAKD,SAND,MAMO,IAAI,kBAAkBW,KAAtB,EAA6B;AAClC,iBAAO;AACL6C,YAAAA,YAAY,EAAE7C,KAAK,CAACyX,YADf;AAEL7T,YAAAA,OAAO,EAAE5D,KAAK,CAAC+Z,cAAN,CAAqBla,QAArB,CAA8B,EAA9B,CAFJ;AAGL8F,YAAAA,MAAM,EAAE3F,KAAK,CAACga,kBAAN,CAAyBna,QAAzB,CAAkC,EAAlC,CAHH;AAILR,YAAAA,IAAI,EAAE;AAJD,WAAP;AAMD;AACF,OAfD,MAeO,IACLW,KAAK,CAAC8Y,SAAN,CAAgBjZ,QAAhB,CAAyB,EAAzB,MAAiCud,sBAAc,CAACI,OAAf,CAAuB3d,QAAvB,EAD5B,EAEL;AACA;AACA,eAAO;AACLgD,UAAAA,YAAY,EAAE7C,KAAK,CAAC+Y,UADf;AAELpT,UAAAA,MAAM,EAAE3F,KAAK,CAACgZ,gBAAN,CAAuBnZ,QAAvB,CAAgC,EAAhC,CAFH;AAGLR,UAAAA,IAAI,EAAE;AAHD,SAAP;AAKD;;AACD,YAAM,IAAI4C,KAAJ,8BAAqCjC,KAAK,CAAC8Y,SAA3C,CAAN;AACD,KA5BD;AA8BA;;;;;;;;AAMA,0BAAA;AAAA,iEAAoB,kBAClB5N,WADkB;AAAA;AAAA;AAAA;AAAA;AAAA,sBAGd,iBAAiBA,WAHH;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAKV,KAAI,CAAC+S,aAAL,CAAmB4D,4BAAnB,CACJ3W,WADI,EAEJA,WAAW,CAAClK,SAFR,CALU;;AAAA;AAAA,kDAST,IATS;;AAAA;AAAA,sBAUP,kBAAkBkK,WAVX;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAYV,KAAI,CAAC+S,aAAL,CAAmB6D,6BAAnB,CACJ5W,WADI,EAEJA,WAAW,CAAClK,SAFR,CAZU;;AAAA;AAAA,kDAgBT,IAhBS;;AAAA;AAAA,sBAkBV,IAAIiB,KAAJ,CAAU,4CAAV,CAlBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApB;;AAAA;AAAA;AAAA;AAAA;AAsBA;;;;;;;;;AAOA,6BAAA;AAAA,kEAAuB,mBACrBsL,KADqB,EAErB3D,aAFqB,EAGrBD,QAHqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAGrBA,QAHqB;AAGrBA,kBAAAA,QAHqB,GAGI,KAAI,CAACA,QAHT;AAAA;;AAAA,gCAKb4D,KAAK,CAAClO,IALO;AAAA,oDAMd,OANc,yBASd,QATc,yBAgBd,SAhBc;AAAA;;AAAA;AAOXmO,gBAAAA,KAPW,GAOHlG,cAAc,CAACP,OAAf,CAAuBwG,KAAK,CAAC1K,YAA7B,EAA2C8G,QAA3C,CAPG;AAAA,mDAQV6D,KAAK,CAACuU,SAAN,CAAgBnY,aAAhB,CARU;;AAAA;AAUXqE,gBAAAA,MAVW,GAUF1G,eAAe,CAACR,OAAhB,CAAwBwG,KAAK,CAAC1K,YAA9B,EAA4C8G,QAA5C,CAVE;AAAA;AAAA,uBAWGsE,MAAM,CAAC+T,OAAP,CAAezU,KAAK,CAAC3J,OAArB,CAXH;;AAAA;AAWXqe,gBAAAA,KAXW;;AAAA,sBAYbA,KAAK,CAAC/hB,WAAN,OAAwB0J,aAAa,CAAC1J,WAAd,EAZX;AAAA;AAAA;AAAA;;AAAA,mDAaR1B,gBAAS,CAACC,IAAV,CAAe,CAAf,CAbQ;;AAAA;AAAA,mDAeVD,gBAAS,CAACC,IAAV,CAAe,CAAf,CAfU;;AAAA;AAiBXkQ,gBAAAA,OAjBW,GAiBDtH,gBAAgB,CAACN,OAAjB,CAAyBwG,KAAK,CAAC1K,YAA/B,EAA6C8G,QAA7C,CAjBC;AAAA,mDAkBVgF,OAAO,CAACoT,SAAR,CAAkBnY,aAAlB,EAAiC2D,KAAK,CAAC3J,OAAvC,CAlBU;;AAAA;AAAA,sBAoBX,IAAI3B,KAAJ,yBAAiCsL,KAAa,CAAClO,IAA/C,CApBW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAvB;;AAAA;AAAA;AAAA;AAAA;;;AAyBA,uCAAA;AAAA,kEAAiC,mBAC/BW,KAD+B,EAE/BkiB,kBAF+B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIzBrV,gBAAAA,UAJyB,GAIZ,KAAI,CAACsV,aAAL,CAAmBniB,KAAnB,CAJY;AAAA;AAAA,uBAKG,KAAI,CAACoiB,kBAAL,CAChCvV,UADgC,EAEhCqV,kBAFgC,CALH;;AAAA;AAKzBG,gBAAAA,mBALyB;AAAA;AAAA,uBASJ,KAAI,CAACC,oBAAL,CACzB,KAAI,CAACH,aAAL,CAAmBniB,KAAnB,CADyB,EAEzBkiB,kBAFyB,CATI;;AAAA;AASzBK,gBAAAA,YATyB;AAczBC,gBAAAA,UAdyB,GAcHD,YAAY,CAACxU,GAAb,uBACzBlB,UAAmD,CAAClH,MAD3B,iCACqC,CADrC,CAdG;AAkBzB8c,gBAAAA,UAlByB,GAmB7BJ,mBAAmB,CAACrU,gBAApB,IACAqU,mBAAmB,CAAC3T,eADpB,IAEA,KArB6B;AAuBzBgU,gBAAAA,gBAvByB,GAuBGF,UAAU,IAAIC,UAvBjB;AAAA,mDAyBxB;AACLE,kBAAAA,cAAc,EAAEN,mBADX;AAELO,kBAAAA,OAAO,EAAEL,YAAY,CAAC1iB,QAAb,EAFJ;AAGL4iB,kBAAAA,UAAU,EAAVA,UAHK;AAILD,kBAAAA,UAAU,EAAVA,UAJK;AAKLE,kBAAAA,gBAAgB,EAAhBA;AALK,iBAzBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA;;AAkCA,uCAAA;AAAA,kEAAiC,mBAC/B1iB,KAD+B;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAIzBC,gBAAAA,YAJyB,GAIVD,KAAK,CAAC2L,KAJI;AAKzBY,gBAAAA,UALyB,GAKZ,KAAI,CAACsW,aAAL,CAAmB7iB,KAAnB,CALY;AAAA;AAAA,uBAMG,KAAI,CAACoiB,kBAAL,CAChC7V,UADgC,EAEhCtM,YAFgC,CANH;;AAAA;AAMzB6iB,gBAAAA,mBANyB;AAAA;AAAA,uBAUJ,KAAI,CAACR,oBAAL,CACzB,KAAI,CAACO,aAAL,CAAmB7iB,KAAnB,CADyB,EAEzBC,YAFyB,CAVI;;AAAA;AAUzB8iB,gBAAAA,YAVyB;AAezBP,gBAAAA,UAfyB,GAeHO,YAAY,CAAChV,GAAb,uBACzBxB,UAAmD,CAAC5G,MAD3B,iCACqC,CADrC,CAfG;AAkBzB8c,gBAAAA,UAlByB,GAmB7BK,mBAAmB,CAACpU,eAApB,IACAoU,mBAAmB,CAAC9U,gBADpB,IAEA,KArB6B;AAsBzB0U,gBAAAA,gBAtByB,GAsBGF,UAAU,IAAIC,UAtBjB;AAAA,mDAwBxB;AACLE,kBAAAA,cAAc,EAAEG,mBADX;AAELF,kBAAAA,OAAO,EAAEG,YAAY,CAACljB,QAAb,EAFJ;AAGL4iB,kBAAAA,UAAU,EAAVA,UAHK;AAILD,kBAAAA,UAAU,EAAVA,UAJK;AAKLE,kBAAAA,gBAAgB,EAAhBA;AALK,iBAxBwB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjC;;AAAA;AAAA;AAAA;AAAA;AAiCA;;;;;;;AAKA,qBAAA,GAAe,UAAC1iB,KAAD;AACb,UAAMsZ,IAAI,GAAGtZ,KAAK,CAACsZ,IAAnB;;AAEA,UAAI0J,SAAS,GAAGzkB,WAAhB;AACA+a,MAAAA,IAAI,CAAC2J,OAAL,CAAa,UAAC/I,GAAD;AACX8I,QAAAA,SAAS,GAAGA,SAAS,CAACE,GAAV,CAAc1kB,gBAAS,CAACC,IAAV,CAAeyb,GAAG,CAACvU,MAAnB,CAAd,CAAZ;AACD,OAFD;AAGA,aAAOqd,SAAP;AACD,KARD;AAUA;;;;;;;;AAMA,mCAAA,GAA6B,UAAChjB,KAAD;AAC3B;AAEA,UAAIgjB,SAAS,GAAG,KAAI,CAACG,YAAL,CAAkBnjB,KAAlB,CAAhB;;AACA,UAAMojB,cAAc,GAAG5kB,gBAAS,CAACC,IAAV,CAAeuB,KAAK,CAACgZ,gBAArB,EAAuCkK,GAAvC,CACrBF,SADqB,CAAvB;AAGA,aAAOI,cAAP;AACD,KARD;;AA/6BE,SAAKzZ,QAAL,GAAgBA,QAAhB;AACA,SAAKZ,MAAL,GAAcA,MAAd;AACA,SAAKrJ,OAAL,GAAeA,OAAO,GAClB0Y,QAAQ,CAAC1Y,OAAO,CAACG,QAAR,CAAiB,EAAjB,CAAD,EAAuB,EAAvB,CADU,GAEjB,KAAK8J,QAAL,CAAcqM,QAAd,CAAuBtW,OAF5B;AAIA,QAAM2jB,wBAAwB,GAC5BxS,WAAS,CAAC,KAAKnR,OAAN,CADX;AAGA,QAAMwW,6BAA6B,4BACjC7D,gBADiC,oBACjCA,gBAAgB,CAAEiR,kCADe,oCAEjCD,wBAFiC,oBAEjCA,wBAAwB,CAAElN,QAF5B;AAIA,KACED,6BADF,IAAA5B,SAAS,QAEP,wFAFO,CAAT,CAAA;AAKA,SAAKiP,4BAAL,GAAoCrN,6BAApC;AAEA,SAAKsL,gBAAL,4BACEnP,gBADF,oBACEA,gBAAgB,CAAEmP,gBADpB,oCACwC3F,iCADxC;AAGA,SAAKlC,KAAL,4BAAatH,gBAAb,oBAAaA,gBAAgB,CAAEsH,KAA/B,oCAAwCe,cAAxC;AACAC,IAAAA,kBAAkB,CAAC,KAAKhB,KAAN,CAAlB;AAEA,SAAKsE,aAAL,GAAqB7W,gBAAgB,CAACL,OAAjB,CACnBmP,6BADmB,EAEnBnN,MAFmB,WAEnBA,MAFmB,GAETY,QAFS,CAArB;AAID;;;;SAmPDwC,aAAA,oBACEI,UADF,EAEEM,UAFF,EAGE5M,YAHF,EAIEiB,WAJF;AAME;AACA,QACE,CAAC2L,UAAU,CAACxN,IAAX,KAAoB,SAApB,IAAiCwN,UAAU,CAACxN,IAAX,KAAoB,QAAtD,MACCkN,UAAU,CAAClN,IAAX,KAAoB,SAApB,IAAiCkN,UAAU,CAAClN,IAAX,KAAoB,QADtD,CADF,EAGE;AACA,YAAM,IAAI4C,KAAJ,CACJ,8HADI,CAAN;AAGD;;AACD,QAAIsK,UAAU,CAAClN,IAAX,KAAoB,OAApB,IAA+BwN,UAAU,CAACxN,IAAX,KAAoB,OAAvD,EAAgE;AAC9D,YAAM,IAAI4C,KAAJ,CACJ,8HADI,CAAN;AAGD;;;AAGD,QAAI6W,SAAS,GAAmBsE,sBAAc,CAACI,OAA/C;;AACA,QAAI3Q,UAAU,CAACxN,IAAX,KAAoB,OAAxB,EAAiC;AAC/B;AACAyZ,MAAAA,SAAS,GAAGsE,sBAAc,CAACI,OAA3B;AACD;;AACD,QAAIjR,UAAU,CAAClN,IAAX,KAAoB,OAAxB,EAAiC;AAC/B;AACAyZ,MAAAA,SAAS,GAAGsE,sBAAc,CAACG,MAA3B;AACD;;AAED,QAAM9E,GAAG,GACPK,SAAS,KAAKsE,sBAAc,CAACG,MAA7B,GAAsC1Q,UAAtC,GAAmDN,UADrD;AAGA,QAAMiB,KAAK,GACTsL,SAAS,KAAKsE,sBAAc,CAACG,MAA7B,GAAsChR,UAAtC,GAAmDM,UADrD;AAIA,WAAO,KAAK+S,qBAAL,CACLnH,GADK,EAELjL,KAFK,EAGL8P,iBAAiB,CAACxE,SAAD,CAHZ,EAIL7Y,YAJK,EAKLiB,WALK,CAAP;AAOD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}