{"version":3,"file":"nft-swap-sdk.cjs.production.min.js","sources":["../src/sdk/v3/types.ts","../node_modules/regenerator-runtime/runtime.js","../src/utils/eth.ts","../src/utils/v3/order.ts","../src/sdk/error.ts","../src/utils/bn/convert.ts","../src/utils/v3/asset-data.ts","../src/contracts/factories/ZeroEx/v3/ExchangeContract__factory.ts","../src/contracts/factories/ZeroEx/v3/Forwarder__factory.ts","../src/contracts/factories/ZeroEx/v4/IZeroEx__factory.ts","../src/contracts/factories/ERC1155__factory.ts","../src/contracts/factories/ERC20__factory.ts","../src/contracts/factories/ERC721__factory.ts","../src/utils/typed-data.ts","../src/utils/v3/eip1271.ts","../src/sdk/v3/pure.ts","../src/utils/v3/default-addresses.ts","../src/utils/v3/gas-buffer.ts","../src/utils/sleep.ts","../src/sdk/v3/NftSwapV3.ts","../src/sdk/v4/constants.ts","../src/sdk/v4/pure.ts","../src/sdk/v4/enums.ts","../src/sdk/v4/nft-safe-transfer-from-data.ts","../src/sdk/v4/orderbook.ts","../src/sdk/v4/NftSwapV4.ts","../src/sdk/v4/properties.ts","../src/utils/addresses.ts"],"sourcesContent":["import type { BigNumber } from '@ethersproject/bignumber';\r\nimport type { Bytes } from '@ethersproject/bytes';\r\n\r\nexport type BigNumberish = BigNumber | Bytes | bigint | string | number;\r\n\r\nexport interface AddressesForChainV3 {\r\n  exchange: string;\r\n  erc20Proxy: string;\r\n  erc721Proxy: string;\r\n  multiAssetProxy: string;\r\n  erc1155Proxy: string;\r\n  forwarder: string;\r\n  wrappedNativeToken?: string | null;\r\n}\r\n\r\nexport type ContractAddresses = {\r\n  [chainId: string]: AddressesForChainV3;\r\n};\r\n\r\nexport interface Order {\r\n  makerAddress: string;\r\n  takerAddress: string;\r\n  feeRecipientAddress: string;\r\n  senderAddress: string;\r\n  makerAssetAmount: string;\r\n  takerAssetAmount: string;\r\n  makerFee: string;\r\n  takerFee: string;\r\n  expirationTimeSeconds: string;\r\n  salt: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerFeeAssetData: string;\r\n  takerFeeAssetData: string;\r\n  signature?: string;\r\n}\r\n\r\nexport interface SignedOrder extends Order {\r\n  signature: string;\r\n}\r\n\r\nexport declare enum SignatureType {\r\n  Illegal = 0,\r\n  Invalid = 1,\r\n  EIP712 = 2,\r\n  EthSign = 3,\r\n  Wallet = 4,\r\n  Validator = 5,\r\n  PreSigned = 6,\r\n  EIP1271Wallet = 7,\r\n  NSignatureTypes = 8,\r\n}\r\n\r\nexport enum AssetProxyId {\r\n  ERC20 = '0xf47261b0',\r\n  ERC721 = '0x02571792',\r\n  MultiAsset = '0x94cfcdd7',\r\n  ERC1155 = '0xa7cb5fb7',\r\n  StaticCall = '0xc339d10a',\r\n  ERC20Bridge = '0xdc1600f3',\r\n}\r\n\r\nexport enum SupportedChainIdsV3 {\r\n  Mainnet = 1,\r\n  Ropsten = 3,\r\n  Rinkeby = 4,\r\n  Kovan = 42,\r\n  Ganache = 1337,\r\n  BSC = 56,\r\n  Polygon = 137,\r\n  PolygonMumbai = 80001,\r\n  Avalanche = 43114,\r\n  GaussMainnet = 1777,\r\n  GILTestnet = 1452,\r\n}\r\n\r\nexport interface OrderInfoV3 {\r\n  orderStatus: OrderStatusV3;\r\n  orderHash: string;\r\n  orderTakerAssetFilledAmount: BigNumber;\r\n}\r\n\r\nexport enum OrderStatusV3 {\r\n  Invalid = 0,\r\n  InvalidMakerAssetAmount,\r\n  InvalidTakerAssetAmount,\r\n  Fillable,\r\n  Expired,\r\n  FullyFilled,\r\n  Cancelled,\r\n}\r\n\r\nexport const OrderStatusCodeLookup = {\r\n  0: 'Invalid',\r\n  1: 'InvalidMakerAssetAmount',\r\n  2: 'InvalidTakerAssetAmount',\r\n  3: 'Fillable',\r\n  4: 'Expired',\r\n  5: 'FullyFilled',\r\n  6: 'Cancelled',\r\n};\r\n\r\nexport interface ERC20AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n}\r\n\r\nexport interface ERC20BridgeAssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  bridgeAddress: string;\r\n  bridgeData: string;\r\n}\r\n\r\nexport interface ERC721AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenId: BigNumber;\r\n}\r\n\r\nexport interface ERC1155AssetData {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenIds: BigNumber[];\r\n  tokenValues: BigNumber[];\r\n  callbackData: string;\r\n}\r\n\r\nexport interface StaticCallAssetData {\r\n  assetProxyId: string;\r\n  callTarget: string;\r\n  staticCallData: string;\r\n  callResultHash: string;\r\n}\r\n\r\nexport interface ERC1155AssetDataNoProxyId {\r\n  tokenAddress: string;\r\n  tokenValues: BigNumber[];\r\n  tokenIds: BigNumber[];\r\n  callbackData: string;\r\n}\r\n\r\nexport declare type SingleAssetData =\r\n  | ERC20AssetData\r\n  | ERC20BridgeAssetData\r\n  | ERC721AssetData\r\n  | ERC1155AssetData\r\n  | StaticCallAssetData;\r\n\r\nexport interface MultiAssetData {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: string[];\r\n}\r\n\r\nexport interface MultiAssetDataWithRecursiveDecoding {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: SingleAssetData[];\r\n}\r\n\r\nexport interface MultiAssetDataWithRecursiveDecoding {\r\n  assetProxyId: string;\r\n  amounts: BigNumber[];\r\n  nestedAssetData: SingleAssetData[];\r\n}\r\n\r\nexport interface DutchAuctionData {\r\n  assetData: AssetData;\r\n  beginTimeSeconds: BigNumber;\r\n  beginAmount: BigNumber;\r\n}\r\n\r\nexport declare type AssetData =\r\n  | SingleAssetData\r\n  | MultiAssetData\r\n  | MultiAssetDataWithRecursiveDecoding;\r\n\r\nexport type AvailableSingleAssetDataTypes =\r\n  | ERC20AssetData\r\n  | ERC721AssetData\r\n  | ERC1155AssetData;\r\n\r\nexport type AvailableAssetDataTypes =\r\n  | AvailableSingleAssetDataTypes\r\n  | MultiAssetData;\r\n\r\nexport interface MultiAssetDataSerialized {\r\n  assetProxyId: string;\r\n  amounts: string[];\r\n  nestedAssetData: string[];\r\n}\r\n\r\n// User facing\r\nexport interface UserFacingERC20AssetDataSerialized {\r\n  tokenAddress: string;\r\n  type: 'ERC20';\r\n  amount: string;\r\n}\r\n\r\nexport interface UserFacingERC721AssetDataSerialized {\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n  type: 'ERC721';\r\n}\r\n\r\nexport interface UserFacingERC1155AssetDataSerialized {\r\n  tokenAddress: string;\r\n  tokens: Array<{ tokenId: string; tokenValue: string }>;\r\n  type: 'ERC1155';\r\n}\r\n\r\n/**\r\n * Mimic the erc721 duck type\r\n */\r\nexport interface UserFacingERC1155AssetDataSerializedNormalizedSingle {\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n  type: 'ERC1155';\r\n  amount?: string; // Will default to '1'\r\n}\r\n\r\nexport type UserFacingSerializedSingleAssetDataTypes =\r\n  | UserFacingERC20AssetDataSerialized\r\n  | UserFacingERC721AssetDataSerialized\r\n  | UserFacingERC1155AssetDataSerialized;\r\n\r\nexport interface ERC20AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n}\r\n\r\nexport interface ERC721AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenId: string;\r\n}\r\nexport interface ERC1155AssetDataSerialized {\r\n  assetProxyId: string;\r\n  tokenAddress: string;\r\n  tokenIds: string[];\r\n  tokenValues: string[];\r\n  callbackData: string;\r\n}\r\n\r\nexport type SerializedSingleAssetDataTypes =\r\n  | ERC20AssetDataSerialized\r\n  | ERC721AssetDataSerialized\r\n  | ERC1155AssetDataSerialized;\r\n\r\nexport type SerializedAvailableAssetDataTypes =\r\n  | SerializedSingleAssetDataTypes\r\n  | MultiAssetDataSerialized;\r\n\r\nexport interface MultiAssetDataSerializedRecursivelyDecoded {\r\n  assetProxyId: string;\r\n  amounts: string[];\r\n  nestedAssetData: SerializedSingleAssetDataTypes[];\r\n}\r\n\r\nexport type SerializedAvailableAssetDataTypesDecoded =\r\n  | SerializedSingleAssetDataTypes\r\n  | MultiAssetDataSerializedRecursivelyDecoded;\r\n\r\nexport enum ORDER_BUILDER_ERROR_CODES {\r\n  MISSING_CONTRACT_WRAPPERS_ERROR = 'MISSING_CONTRACT_WRAPPERS_ERROR',\r\n}\r\n\r\nexport enum SupportedTokenTypes {\r\n  ERC20 = 'ERC20',\r\n  ERC721 = 'ERC721',\r\n  ERC1155 = 'ERC1155',\r\n}\r\n\r\nexport type SupportedTokenTypesType =\r\n  | SupportedTokenTypes.ERC20\r\n  | SupportedTokenTypes.ERC721\r\n  | SupportedTokenTypes.ERC1155;\r\n\r\nexport interface TradeableAssetItem<TMetadata = any> {\r\n  amount: string;\r\n  userInputtedAmount?: string;\r\n  assetData: SerializedSingleAssetDataTypes;\r\n  type: SupportedTokenTypesType;\r\n  id: string; // unique id\r\n  metadata?: TMetadata;\r\n}\r\n\r\n// Convenience type wrappers\r\nexport interface Erc20TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC20AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC20;\r\n}\r\n\r\nexport interface Erc721TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC721AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC721;\r\n}\r\n\r\nexport interface Erc1155TradeableAsset extends TradeableAssetItem {\r\n  assetData: ERC1155AssetDataSerialized;\r\n  type: SupportedTokenTypes.ERC1155;\r\n}\r\n\r\nexport type AvailableTradeableAssets =\r\n  | Erc20TradeableAsset\r\n  | Erc721TradeableAsset\r\n  | Erc1155TradeableAsset;\r\n\r\nexport interface AdditionalOrderConfig {\r\n  makerAddress: string; // only field required\r\n  chainId?: number;\r\n  takerAddress?: string;\r\n  expiration?: Date | number;\r\n  exchangeAddress?: string;\r\n  salt?: string;\r\n  feeRecipientAddress?: string;\r\n  makerFeeAssetData?: string;\r\n  takerFeeAssetData?: string;\r\n  makerFee?: string;\r\n}\r\n\r\nexport interface ZeroExOrder {\r\n  makerAddress: string;\r\n  takerAddress: string;\r\n  feeRecipientAddress: string;\r\n  senderAddress: string;\r\n  makerAssetAmount: string;\r\n  takerAssetAmount: string;\r\n  makerFee: string;\r\n  takerFee: string;\r\n  expirationTimeSeconds: string;\r\n  salt: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerFeeAssetData: string;\r\n  takerFeeAssetData: string;\r\n}\r\n\r\nexport interface ZeroExSignedOrder extends ZeroExOrder {\r\n  signature: string;\r\n}\r\n\r\nexport interface EipDomain {\r\n  name: string;\r\n  version: string;\r\n  chainId: string;\r\n  verifyingContract: string;\r\n}\r\n\r\nexport interface TypedData {\r\n  domain: EipDomain;\r\n  types: {\r\n    Order: {\r\n      name: string;\r\n      type: string;\r\n    }[];\r\n  };\r\n  value: Order;\r\n}\r\n\r\nexport const EIP712_TYPES = {\r\n  Order: [\r\n    { name: 'makerAddress', type: 'address' },\r\n    { name: 'takerAddress', type: 'address' },\r\n    { name: 'feeRecipientAddress', type: 'address' },\r\n    { name: 'senderAddress', type: 'address' },\r\n    { name: 'makerAssetAmount', type: 'uint256' },\r\n    { name: 'takerAssetAmount', type: 'uint256' },\r\n    { name: 'makerFee', type: 'uint256' },\r\n    { name: 'takerFee', type: 'uint256' },\r\n    { name: 'expirationTimeSeconds', type: 'uint256' },\r\n    { name: 'salt', type: 'uint256' },\r\n    { name: 'makerAssetData', type: 'bytes' },\r\n    { name: 'takerAssetData', type: 'bytes' },\r\n    { name: 'makerFeeAssetData', type: 'bytes' },\r\n    { name: 'takerFeeAssetData', type: 'bytes' },\r\n  ],\r\n};\r\n\r\nexport type SwappableAsset =\r\n  | UserFacingERC20AssetDataSerialized\r\n  | UserFacingERC721AssetDataSerialized\r\n  | UserFacingERC1155AssetDataSerializedNormalizedSingle;\r\n\r\nexport enum RevertReason {\r\n  OrderUnfillable = 'ORDER_UNFILLABLE',\r\n  InvalidMaker = 'INVALID_MAKER',\r\n  InvalidTaker = 'INVALID_TAKER',\r\n  InvalidSender = 'INVALID_SENDER',\r\n  InvalidOrderSignature = 'INVALID_ORDER_SIGNATURE',\r\n  InvalidTakerAmount = 'INVALID_TAKER_AMOUNT',\r\n  DivisionByZero = 'DIVISION_BY_ZERO',\r\n  RoundingError = 'ROUNDING_ERROR',\r\n  InvalidSignature = 'INVALID_SIGNATURE',\r\n  SignatureIllegal = 'SIGNATURE_ILLEGAL',\r\n  SignatureInvalid = 'SIGNATURE_INVALID',\r\n  SignatureUnsupported = 'SIGNATURE_UNSUPPORTED',\r\n  TakerOverpay = 'TAKER_OVERPAY',\r\n  OrderOverfill = 'ORDER_OVERFILL',\r\n  InvalidFillPrice = 'INVALID_FILL_PRICE',\r\n  InvalidNewOrderEpoch = 'INVALID_NEW_ORDER_EPOCH',\r\n  CompleteFillFailed = 'COMPLETE_FILL_FAILED',\r\n  NegativeSpreadRequired = 'NEGATIVE_SPREAD_REQUIRED',\r\n  ReentrancyIllegal = 'REENTRANCY_ILLEGAL',\r\n  InvalidTxHash = 'INVALID_TX_HASH',\r\n  InvalidTxSignature = 'INVALID_TX_SIGNATURE',\r\n  FailedExecution = 'FAILED_EXECUTION',\r\n  LengthGreaterThan0Required = 'LENGTH_GREATER_THAN_0_REQUIRED',\r\n  LengthGreaterThan3Required = 'LENGTH_GREATER_THAN_3_REQUIRED',\r\n  LengthGreaterThan131Required = 'LENGTH_GREATER_THAN_131_REQUIRED',\r\n  Length0Required = 'LENGTH_0_REQUIRED',\r\n  Length65Required = 'LENGTH_65_REQUIRED',\r\n  InvalidAmount = 'INVALID_AMOUNT',\r\n  TransferFailed = 'TRANSFER_FAILED',\r\n  SenderNotAuthorized = 'SENDER_NOT_AUTHORIZED',\r\n  TargetNotAuthorized = 'TARGET_NOT_AUTHORIZED',\r\n  TargetAlreadyAuthorized = 'TARGET_ALREADY_AUTHORIZED',\r\n  IndexOutOfBounds = 'INDEX_OUT_OF_BOUNDS',\r\n  AuthorizedAddressMismatch = 'AUTHORIZED_ADDRESS_MISMATCH',\r\n  OnlyContractOwner = 'ONLY_CONTRACT_OWNER',\r\n  MakerNotWhitelisted = 'MAKER_NOT_WHITELISTED',\r\n  TakerNotWhitelisted = 'TAKER_NOT_WHITELISTED',\r\n  AssetProxyDoesNotExist = 'ASSET_PROXY_DOES_NOT_EXIST',\r\n  LengthMismatch = 'LENGTH_MISMATCH',\r\n  LibBytesGreaterThanZeroLengthRequired = 'GREATER_THAN_ZERO_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo4LengthRequired = 'GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo20LengthRequired = 'GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualTo32LengthRequired = 'GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualToNestedBytesLengthRequired = 'GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED',\r\n  LibBytesGreaterOrEqualToSourceBytesLengthRequired = 'GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED',\r\n  Erc20InsufficientBalance = 'ERC20_INSUFFICIENT_BALANCE',\r\n  Erc20InsufficientAllowance = 'ERC20_INSUFFICIENT_ALLOWANCE',\r\n  FeePercentageTooLarge = 'FEE_PERCENTAGE_TOO_LARGE',\r\n  ValueGreaterThanZero = 'VALUE_GREATER_THAN_ZERO',\r\n  InvalidMsgValue = 'INVALID_MSG_VALUE',\r\n  InsufficientEthRemaining = 'INSUFFICIENT_ETH_REMAINING',\r\n  Uint256Overflow = 'UINT256_OVERFLOW',\r\n  Erc721ZeroToAddress = 'ERC721_ZERO_TO_ADDRESS',\r\n  Erc721OwnerMismatch = 'ERC721_OWNER_MISMATCH',\r\n  Erc721InvalidSpender = 'ERC721_INVALID_SPENDER',\r\n  Erc721ZeroOwner = 'ERC721_ZERO_OWNER',\r\n  Erc721InvalidSelector = 'ERC721_INVALID_SELECTOR',\r\n  WalletError = 'WALLET_ERROR',\r\n  ValidatorError = 'VALIDATOR_ERROR',\r\n  InvalidFunctionSelector = 'INVALID_FUNCTION_SELECTOR',\r\n  InvalidAssetData = 'INVALID_ASSET_DATA',\r\n  InvalidAssetProxy = 'INVALID_ASSET_PROXY',\r\n  UnregisteredAssetProxy = 'UNREGISTERED_ASSET_PROXY',\r\n  TxFullyConfirmed = 'TX_FULLY_CONFIRMED',\r\n  TxNotFullyConfirmed = 'TX_NOT_FULLY_CONFIRMED',\r\n  TimeLockIncomplete = 'TIME_LOCK_INCOMPLETE',\r\n  InvalidFreeMemoryPtr = 'INVALID_FREE_MEMORY_PTR',\r\n  AuctionInvalidAmount = 'INVALID_AMOUNT',\r\n  AuctionExpired = 'AUCTION_EXPIRED',\r\n  AuctionNotStarted = 'AUCTION_NOT_STARTED',\r\n  AuctionInvalidBeginTime = 'INVALID_BEGIN_TIME',\r\n  InvalidAssetDataEnd = 'INVALID_ASSET_DATA_END',\r\n  InvalidOrBlockedExchangeSelector = 'INVALID_OR_BLOCKED_EXCHANGE_SELECTOR',\r\n  BalanceQueryFailed = 'BALANCE_QUERY_FAILED',\r\n  AtLeastOneAddressDoesNotMeetBalanceThreshold = 'AT_LEAST_ONE_ADDRESS_DOES_NOT_MEET_BALANCE_THRESHOLD',\r\n  FromLessThanToRequired = 'FROM_LESS_THAN_TO_REQUIRED',\r\n  ToLessThanLengthRequired = 'TO_LESS_THAN_LENGTH_REQUIRED',\r\n  InvalidApprovalSignature = 'INVALID_APPROVAL_SIGNATURE',\r\n  ApprovalExpired = 'APPROVAL_EXPIRED',\r\n  InvalidOrigin = 'INVALID_ORIGIN',\r\n  AmountEqualToOneRequired = 'AMOUNT_EQUAL_TO_ONE_REQUIRED',\r\n  BadReceiverReturnValue = 'BAD_RECEIVER_RETURN_VALUE',\r\n  CannotTransferToAddressZero = 'CANNOT_TRANSFER_TO_ADDRESS_ZERO',\r\n  InsufficientAllowance = 'INSUFFICIENT_ALLOWANCE',\r\n  NFTNotOwnedByFromAddress = 'NFT_NOT_OWNED_BY_FROM_ADDRESS',\r\n  OwnersAndIdsMustHaveSameLength = 'OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH',\r\n  TokenAndValuesLengthMismatch = 'TOKEN_AND_VALUES_LENGTH_MISMATCH',\r\n  TransferRejected = 'TRANSFER_REJECTED',\r\n  Uint256Underflow = 'UINT256_UNDERFLOW',\r\n  InvalidIdsOffset = 'INVALID_IDS_OFFSET',\r\n  InvalidValuesOffset = 'INVALID_VALUES_OFFSET',\r\n  InvalidDataOffset = 'INVALID_DATA_OFFSET',\r\n  InvalidAssetDataLength = 'INVALID_ASSET_DATA_LENGTH',\r\n  InvalidStaticCallDataOffset = 'INVALID_STATIC_CALL_DATA_OFFSET',\r\n  TargetNotEven = 'TARGET_NOT_EVEN',\r\n  UnexpectedStaticCallResult = 'UNEXPECTED_STATIC_CALL_RESULT',\r\n  TransfersSuccessful = 'TRANSFERS_SUCCESSFUL',\r\n  InsufficientFunds = 'INSUFFICIENT_FUNDS',\r\n  TxAlreadyExecuted = 'TX_ALREADY_EXECUTED',\r\n  DefaultTimeLockIncomplete = 'DEFAULT_TIME_LOCK_INCOMPLETE',\r\n  CustomTimeLockIncomplete = 'CUSTOM_TIME_LOCK_INCOMPLETE',\r\n  EqualLengthsRequired = 'EQUAL_LENGTHS_REQUIRED',\r\n  OnlyCallableByWallet = 'ONLY_CALLABLE_BY_WALLET',\r\n}\r\n\r\nexport type AvailableSignatureTypesV3 = 'eoa' | 'eip1271';\r\n\r\nexport interface SigningOptionsV3 {\r\n  signatureType: AvailableSignatureTypesV3; // | 'autodetect' ? and remove autodetectSignatureType maybe?\r\n  autodetectSignatureType: boolean;\r\n}\r\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  define(IteratorPrototype, iteratorSymbol, function () {\n    return this;\n  });\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = GeneratorFunctionPrototype;\n  define(Gp, \"constructor\", GeneratorFunctionPrototype);\n  define(GeneratorFunctionPrototype, \"constructor\", GeneratorFunction);\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {\n    return this;\n  });\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  define(Gp, iteratorSymbol, function() {\n    return this;\n  });\n\n  define(Gp, \"toString\", function() {\n    return \"[object Generator]\";\n  });\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, in modern engines\n  // we can explicitly access globalThis. In older engines we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  if (typeof globalThis === \"object\") {\n    globalThis.regeneratorRuntime = runtime;\n  } else {\n    Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n  }\n}\n","// import startsWith from 'lodash/startsWith';\r\nimport { isHexString } from '@ethersproject/bytes';\r\nimport { getAddress } from '@ethersproject/address';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\n\r\nexport const CRYPTO_KITTIES_CONTRACT_ADDRESS =\r\n  '0x06012c8cf97bead5deae237070f9587f8e7a266d';\r\n\r\nexport const ETH_GAS_STATION_API_BASE_URL = 'https://ethgasstation.info';\r\nexport const ETH_GAS_STATION_GAS_ENDPOINT = `${ETH_GAS_STATION_API_BASE_URL}/json/ethgasAPI.json`;\r\n\r\nexport const MAX_UINT256 = BigNumber.from(2).pow(128).sub(1);\r\nexport const UNLIMITED_ALLOWANCE_IN_BASE_UNITS = MAX_UINT256;\r\nexport const GWEI_IN_WEI = BigNumber.from(1000000000);\r\nexport const GWEI_IN_ETH = BigNumber.from(1000000000);\r\n\r\nexport const ZERO_AMOUNT = BigNumber.from(0);\r\nexport const ONE_AMOUNT = BigNumber.from(1);\r\n\r\nexport const NULL_ADDRESS = '0x0000000000000000000000000000000000000000';\r\nexport const NULL_BYTES = '0x';\r\nexport const BASE_TEN = 10;\r\n\r\nexport const ONE_NFT_UNIT = ONE_AMOUNT;\r\nexport const ZERO_NFT_UNIT = ZERO_AMOUNT;\r\nexport const DEFAULT_ERC20_TOKEN_DECIMALS = BigNumber.from(18);\r\n\r\nexport type Numberish = BigNumber | number | string;\r\n\r\nconst isENSAddressFormat = (address: string) => !!address.match(/.+\\..+/g);\r\n\r\n// const isHexStringIgnorePrefix = (value: string) => {\r\n//   const trimmedValue = value.trim();\r\n//   const updatedValue = addHexPrefix(trimmedValue);\r\n//   return isHexString(updatedValue);\r\n// };\r\n\r\n// const addHexPrefix = (value: string) =>\r\n//   startsWith(value, '0x') ? value : `0x${value}`;\r\n\r\n// const convertRawAmountToDecimalFormat = (\r\n//   value: BigNumber,\r\n//   decimals: Numberish = new BigNumber(18),\r\n//   maxFormattedDecimals = 4\r\n// ): string =>\r\n//    BigNumber.from(value)\r\n//     .dividedBy(new BigNumber(10).pow(decimals))\r\n//     .decimalPlaces(maxFormattedDecimals)\r\n//     .toFormat(maxFormattedDecimals)\r\n//     .toString();\r\n\r\nconst getEthPriceInUsd = async (): Promise<number | undefined> => {\r\n  const res = await fetch(\r\n    'https://api.coingecko.com/api/v3/simple/price?ids=ethereum&vs_currencies=usd'\r\n  );\r\n  const json = await res.json();\r\n  return json?.ethereum?.usd;\r\n};\r\n\r\n// const convertGweiToEth = (gweiAmount: BigNumber) => {\r\n//   const BASE_TEN = 10;\r\n//   const unit = new BigNumber(BASE_TEN).pow(-9);\r\n//   const gweiInEth = unit.times(gweiAmount);\r\n//   return gweiInEth;\r\n// };\r\n\r\n/**\r\n *\r\n * @returns gas price in wei (base unit), need to convert to eth\r\n */\r\n// const getGasPrice = async (): Promise<BigNumber> => {\r\n//   try {\r\n//     const res = await fetch(ETH_GAS_STATION_GAS_ENDPOINT);\r\n//     const gasInfo = await res.json();\r\n//     // Eth Gas Station result is gwei * 10\r\n//     const BASE_TEN = 10;\r\n//     const gasPriceGwei = new BigNumber(gasInfo.fast / BASE_TEN);\r\n//     const unit = new BigNumber(BASE_TEN).pow(9);\r\n//     const gasPriceWei = unit.times(gasPriceGwei);\r\n//     return gasPriceWei;\r\n//   } catch (e) {\r\n//     throw new Error(e as any);\r\n//   }\r\n// };\r\n\r\n// const toBaseUnitAmount = (amount: Numberish, decimals: number): BigNumber => {\r\n//   const unit = new BigNumber(BASE_TEN).pow(decimals)\r\n//   const baseUnitAmount = unit.times(amount)\r\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0\r\n//   if (hasDecimals) {\r\n//     throw new Error(`Invalid unit amount: ${amount.toString(BASE_TEN)} - Too many decimal places`)\r\n//   }\r\n//   return baseUnitAmount\r\n// }\r\n\r\nexport interface ObjectMap<T> {\r\n  [key: string]: T;\r\n}\r\n\r\nconst arrayToMapWithId = <T extends object>(\r\n  array: T[],\r\n  idKey: keyof T\r\n): ObjectMap<T> => {\r\n  const initialMap: ObjectMap<T> = {};\r\n  return array.reduce((acc, val) => {\r\n    const id = val[idKey] as any;\r\n    acc[id] = val;\r\n    return acc;\r\n  }, initialMap);\r\n};\r\n\r\n// const convertAmountToBigNumber = (value: BigNumberIsh): BigNumber => {\r\n//   const num = value || 0;\r\n//   const isBigNumber = BigNumber.isBigNumber(num);\r\n//   if (isBigNumber) {\r\n//     return num as BigNumber;\r\n//   }\r\n\r\n//   if (isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) {\r\n//     return new BigNumber(num.replace('0x', ''), 16);\r\n//   }\r\n\r\n//   const baseTen = 10;\r\n//   return BigNumber.from((num as number).toString(baseTen));\r\n// };\r\n\r\n// const encodeAmountAsHexString = (value: BigNumberIsh): string => {\r\n//   const valueBigNumber = convertAmountToBigNumber(value);\r\n//   const hexBase = 16;\r\n//   const valueHex = valueBigNumber.toString(hexBase);\r\n\r\n//   return valueBigNumber.isLessThan(0)\r\n//     ? `-0x${valueHex.substr(1)}`\r\n//     : `0x${valueHex}`;\r\n// };\r\n\r\nconst isHexAddressFormat = (address: string): boolean => {\r\n  if (!isHexString(address)) return false;\r\n  if (!/^(0x)?[0-9a-f]{40}$/i.test(address)) {\r\n    return false;\r\n  }\r\n  if (\r\n    /^(0x)?[0-9a-f]{40}$/.test(address) ||\r\n    /^(0x)?[0-9A-F]{40}$/.test(address)\r\n  ) {\r\n    return true;\r\n  }\r\n  return true;\r\n};\r\n\r\nexport function getUrlForFallbackTokenIcon(address: string) {\r\n  let checksummedAddress: string;\r\n  try {\r\n    checksummedAddress = getAddress(address);\r\n  } catch {\r\n    return null;\r\n  }\r\n  return `https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/${checksummedAddress}/logo.png`;\r\n}\r\n\r\n// const getErrorMessageFromErrorCode = (\r\n//   errorCode?: ERC20_BALANCE_ERROR_CODES | TOKEN_CONTRACT_ERROR_CODES\r\n// ) => {\r\n//   if (isNil(errorCode)) {\r\n//     return;\r\n//   }\r\n//   switch (errorCode) {\r\n//     case TOKEN_CONTRACT_ERROR_CODES.MISSING_CONTRACT_ADDRESS_ERROR:\r\n//       return 'Token contract address missing';\r\n//     case TOKEN_CONTRACT_ERROR_CODES.INVALID_CONTRACT_ADDRESS_ERROR:\r\n//     case VALIDATION_ERROR_CODES.INVALID_CONTRACT_ADDRESS:\r\n//       return 'Invalid token contract address';\r\n//     case TOKEN_CONTRACT_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\r\n//     case BALANCE_CHECK_ERROR_CODES.LOADING_CONTRACT_ADDRESS_ERROR:\r\n//       return 'Error loading contract address';\r\n//     case VALIDATION_ERROR_CODES.INVALID_ADDRESS_FORMAT:\r\n//       return 'Incorrect wallet address';\r\n//     case VALIDATION_ERROR_CODES.INVALID_ENS:\r\n//       return 'Incorrect ENS name';\r\n//     case VALIDATION_ERROR_CODES.INVALID_HEX_ADDRESS:\r\n//       return 'Invalid hex address';\r\n//     case BALANCE_CHECK_ERROR_CODES.BALANCE_LOOKUP_ERROR:\r\n//       return 'Error looking up token balance';\r\n//     default:\r\n//       throw new Error(`Unhandled error code ${errorCode}`);\r\n//   }\r\n// };\r\n\r\nconst getShortenedAddress = (\r\n  address: string,\r\n  start: number = 6,\r\n  end: number = 4\r\n) => {\r\n  const shortenedAddress = `${address.slice(0, start)}...${address.slice(\r\n    -1 * end\r\n  )}`;\r\n  return shortenedAddress;\r\n};\r\n\r\nexport const toUnitAmount = (amount: BigNumber, decimals: number) => {\r\n  const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n\r\n  const unitAmount = amount.div(unit);\r\n  // const hasDecimals = unit.() !== 0;\r\n  // if (hasDecimals) {\r\n  //   throw new Error(\r\n  //     `Invalid unit amount: ${amount.toString()}, incorrect decimals ${decimals}`\r\n  //   );\r\n  // }\r\n  return unitAmount;\r\n};\r\n\r\n// export const toBaseUnitAmount = (\r\n//   amount: Numberish,\r\n//   decimals: number\r\n// ): BigNumber => {\r\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n//   const baseUnitAmount = unit.mul(amount);\r\n//   const hasDecimals = baseUnitAmount.decimalPlaces() !== 0;\r\n//   if (hasDecimals) {\r\n//     throw new Error(\r\n//       `Invalid unit amount: ${amount.toString()} - Too many decimal places`\r\n//     );\r\n//   }\r\n//   return baseUnitAmount;\r\n// };\r\n\r\n// export const toNearestBaseUnitAmount = (\r\n//   amount: BigNumber,\r\n//   decimals: number\r\n// ): BigNumber => {\r\n//   const unit = BigNumber.from(BASE_TEN).pow(decimals);\r\n//   const baseUnitAmount = unit.mul(amount);\r\n//   const nearestBaseUnitAmount = baseUnitAmount.decimalPlaces(0);\r\n//   return nearestBaseUnitAmount;\r\n// };\r\n\r\n// export const toBaseUnitAmountSafe = (\r\n//   amount?: BigNumber | string | number,\r\n//   decimals?: BigNumber | string | number\r\n// ): BigNumber | undefined => {\r\n//   if (amount === undefined) {\r\n//     return undefined;\r\n//   }\r\n//   if (decimals === undefined) {\r\n//     return undefined;\r\n//   }\r\n//   return toBaseUnitAmount(\r\n//     new BigNumber(amount),\r\n//     new BigNumber(decimals).toNumber()\r\n//   );\r\n// };\r\n\r\nconst getEtherscanRootUrlForChain = (chainId: number) => {\r\n  if (chainId === 4) {\r\n    return 'https://rinkeby.etherscan.io';\r\n  }\r\n  return 'https://etherscan.io';\r\n};\r\n\r\nexport const getEtherscanLinkFromTxHash = (txHash: string, chainId: number) => {\r\n  if (!txHash) {\r\n    return undefined;\r\n  }\r\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\r\n  const normalizedHash = txHash.replace(/-.*/g, '');\r\n  const etherscanLink = `${etherscanRoot}/tx/${normalizedHash}`;\r\n  return etherscanLink;\r\n};\r\n\r\nexport const getEtherscanLinkForAccount = (\r\n  account: string,\r\n  chainId: number\r\n) => {\r\n  if (!account) {\r\n    return undefined;\r\n  }\r\n  const etherscanRoot = getEtherscanRootUrlForChain(chainId);\r\n  const normalizedAccount = account.replace(/-.*/g, '');\r\n  const etherscanLink = `${etherscanRoot}/address/${normalizedAccount}`;\r\n  return etherscanLink;\r\n};\r\n\r\n// export const convertGweiToWei = (numInGwei: BigNumber) => {\r\n//   const numInWei = numInGwei.mul(GWEI_IN_WEI)\r\n//   return numInWei;\r\n// };\r\n\r\n// export const convertWeiToGwei = (numInWei: BigNumber) => {\r\n//   const numInGwei = numInWei.div(GWEI_IN_WEI).toFixed(0);\r\n//   return numInGwei;\r\n// };\r\n\r\nexport {\r\n  isENSAddressFormat,\r\n  isHexAddressFormat,\r\n  // isHexStringIgnorePrefix,\r\n  // getGasPrice,\r\n  getEthPriceInUsd,\r\n  // encodeAmountAsHexString,\r\n  // convertAmountToBigNumber,\r\n  arrayToMapWithId,\r\n  getShortenedAddress,\r\n  // convertGweiToEth,\r\n};\r\n","import getUnixTime from 'date-fns/getUnixTime';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\nimport { NULL_ADDRESS, NULL_BYTES, ZERO_AMOUNT } from '../eth';\r\nimport {\r\n  Order,\r\n  EipDomain,\r\n  EIP712_TYPES,\r\n  ZeroExOrder,\r\n} from '../../sdk/v3/types';\r\n\r\nexport const TRADER_ADDRESS_IDENTIFIER =\r\n  '0xBCC02a155c374263321155555Ccf41070017649e';\r\n\r\nexport const INFINITE_TIMESTAMP_SEC = BigNumber.from(2524604400);\r\n\r\nexport const getEipDomain = (\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): EipDomain => ({\r\n  name: '0x Protocol',\r\n  version: '3.0.0',\r\n  chainId: chainId.toString(10),\r\n  verifyingContract: exchangeContractAddress,\r\n});\r\n\r\nexport const hashOrder = (\r\n  order: Order,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): string =>\r\n  _TypedDataEncoder.hash(\r\n    getEipDomain(chainId, exchangeContractAddress),\r\n    EIP712_TYPES,\r\n    order\r\n  );\r\n\r\nexport const normalizeOrder = (order: Order): Order => {\r\n  return {\r\n    makerAddress: order.makerAddress.toLowerCase(),\r\n    takerAddress: order.takerAddress.toLowerCase(),\r\n    feeRecipientAddress: order.feeRecipientAddress.toLowerCase(),\r\n    senderAddress: order.senderAddress.toLowerCase(),\r\n    makerAssetAmount: order.makerAssetAmount.toString(),\r\n    takerAssetAmount: order.takerAssetAmount.toString(),\r\n    makerFee: order.makerFee.toString(),\r\n    takerFee: order.takerFee.toString(),\r\n    expirationTimeSeconds: order.expirationTimeSeconds.toString(),\r\n    salt: order.salt.toString(),\r\n    makerAssetData: order.makerAssetData.toLowerCase(),\r\n    takerAssetData: order.takerAssetData.toLowerCase(),\r\n    makerFeeAssetData: order.makerFeeAssetData.toLowerCase(),\r\n    takerFeeAssetData: order.takerFeeAssetData.toLowerCase(),\r\n    signature: order.signature?.toLowerCase(),\r\n  };\r\n};\r\n\r\nexport const generateOrderFromAssetDatas = (orderConfig: {\r\n  makerAddress: string;\r\n  makerAssetData: string;\r\n  takerAssetData: string;\r\n  makerAssetAmount: BigNumber;\r\n  takerAssetAmount: BigNumber;\r\n  exchangeAddress: string;\r\n  // Rest of params optional\r\n  takerAddress?: string;\r\n  expiration?: Date | number;\r\n  salt?: string;\r\n  feeRecipientAddress?: string;\r\n  makerFeeAssetData?: string;\r\n  takerFeeAssetData?: string;\r\n  makerFee?: string;\r\n  takerFee?: string;\r\n}): Order => {\r\n  const {\r\n    makerAssetAmount,\r\n    takerAssetAmount,\r\n    makerAddress,\r\n    makerAssetData,\r\n    takerAssetData,\r\n    takerAddress,\r\n    expiration,\r\n    salt,\r\n    feeRecipientAddress,\r\n    makerFeeAssetData,\r\n    takerFeeAssetData,\r\n    makerFee,\r\n    takerFee,\r\n  } = orderConfig;\r\n\r\n  const expirationTimeSeconds = expiration\r\n    ? BigNumber.from(getUnixTime(expiration))\r\n    : INFINITE_TIMESTAMP_SEC;\r\n\r\n  const order: ZeroExOrder = {\r\n    makerAddress,\r\n    makerAssetAmount: makerAssetAmount.toString(),\r\n    makerAssetData,\r\n    takerAddress: takerAddress || NULL_ADDRESS,\r\n    takerAssetAmount: takerAssetAmount.toString(),\r\n    takerAssetData,\r\n    expirationTimeSeconds: expirationTimeSeconds.toString(),\r\n    // Stuff that doesn't really matter but is required\r\n    senderAddress: NULL_ADDRESS,\r\n    feeRecipientAddress: feeRecipientAddress ?? TRADER_ADDRESS_IDENTIFIER,\r\n    salt: salt ?? generateSaltHash(),\r\n    makerFeeAssetData: makerFeeAssetData ?? NULL_BYTES,\r\n    takerFeeAssetData: takerFeeAssetData ?? NULL_BYTES,\r\n    makerFee: makerFee ?? ZERO_AMOUNT.toString(),\r\n    takerFee: takerFee ?? ZERO_AMOUNT.toString(),\r\n  };\r\n\r\n  return order;\r\n};\r\n\r\nexport const generateTimeBasedSalt = () => {\r\n  const unixTime = getUnixTime(new Date());\r\n  return unixTime.toString(10);\r\n};\r\n\r\nconst generateSaltHash = (manualSaltHashToUse?: string): string => {\r\n  if (manualSaltHashToUse) {\r\n    return manualSaltHashToUse;\r\n  }\r\n  return generateTimeBasedSalt();\r\n};\r\n","// Better error objects with codes\r\n// Sourced from https://github.com/vweevers/module-error\r\n\r\ninterface ErrorOptions {\r\n  code?: string;\r\n  cause?: Error;\r\n  expected?: boolean;\r\n  transient?: boolean;\r\n}\r\n\r\nclass ModuleError extends Error {\r\n  code: string | undefined;\r\n  expected: boolean | undefined;\r\n  transient: boolean | undefined;\r\n  cause: Error | undefined;\r\n  /**\r\n   * @param {string} message Error message\r\n   * @param {{ code?: string, cause?: Error, expected?: boolean, transient?: boolean }} [options]\r\n   */\r\n  constructor(message: string, options: ErrorOptions) {\r\n    super(message || '');\r\n\r\n    if (typeof options === 'object' && options !== null) {\r\n      if (options.code) this.code = String(options.code);\r\n      if (options.expected) this.expected = true;\r\n      if (options.transient) this.transient = true;\r\n      if (options.cause) this.cause = options.cause;\r\n    }\r\n\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, this.constructor);\r\n    }\r\n  }\r\n}\r\n\r\nclass UnexpectedAssetTypeError extends ModuleError {\r\n  constructor(assetType: string) {\r\n    const code = 'UnexpectedAssetTypeError';\r\n    super(`Unexpected asset type ${assetType ?? 'unknown'}`, {\r\n      expected: true,\r\n      code,\r\n    });\r\n    this.name = code;\r\n  }\r\n}\r\n\r\nclass UnsupportedChainId extends ModuleError {\r\n  constructor(chainId: number) {\r\n    const code = 'UnsupportedChainId';\r\n    super(\r\n      `Unexpected chainId ${chainId}. If you want to use that chain, please provide custom zeroex addresses`,\r\n      {\r\n        expected: true,\r\n        code,\r\n      }\r\n    );\r\n    this.name = code;\r\n  }\r\n}\r\n\r\nexport { ModuleError, UnexpectedAssetTypeError, UnsupportedChainId };\r\n","import { BigNumber } from '@ethersproject/bignumber';\r\n\r\nexport const convertStringToBN = (s: string) => {\r\n  return BigNumber.from(s);\r\n};\r\n\r\nexport const convertCollectionToBN = (arr: string[]) => {\r\n  return arr.map(convertStringToBN);\r\n};\r\n","import { BigNumber, BigNumberish } from '@ethersproject/bignumber';\r\nimport { hexConcat, hexDataLength, hexDataSlice } from '@ethersproject/bytes';\r\nimport { defaultAbiCoder } from '@ethersproject/abi';\r\n\r\nimport {\r\n  AssetProxyId,\r\n  ERC1155AssetDataSerialized,\r\n  ERC20AssetDataSerialized,\r\n  ERC721AssetDataSerialized,\r\n  MultiAssetDataSerializedRecursivelyDecoded,\r\n  SerializedAvailableAssetDataTypes,\r\n  SerializedAvailableAssetDataTypesDecoded,\r\n  SerializedSingleAssetDataTypes,\r\n  SupportedTokenTypes,\r\n  SwappableAsset,\r\n  UserFacingSerializedSingleAssetDataTypes,\r\n} from '../../sdk/v3/types';\r\nimport { InterallySupportedAssetFormat } from '../../sdk/v3/pure';\r\nimport { UnexpectedAssetTypeError } from '../../sdk/error';\r\nimport { convertCollectionToBN } from '../bn/convert';\r\n\r\nexport const encodeErc20AssetData = (tokenAddress: string) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC20,\r\n    defaultAbiCoder.encode(['address'], [tokenAddress]),\r\n  ]);\r\n\r\nexport const decodeErc20AssetData = (\r\n  encodedAssetData: string\r\n): ERC20AssetDataSerialized => {\r\n  const length = hexDataLength(encodedAssetData);\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['address'], rest);\r\n\r\n  const tokenAddress: string = data[0];\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n  };\r\n};\r\n\r\nexport const encodeErc721AssetData = (\r\n  tokenAddress: string,\r\n  tokenId: BigNumberish\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC721,\r\n    defaultAbiCoder.encode(['address', 'uint256'], [tokenAddress, tokenId]),\r\n  ]);\r\n\r\nexport const decodeErc721AssetData = (\r\n  encodedAssetData: string\r\n): ERC721AssetDataSerialized => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['address', 'uint256'], rest);\r\n\r\n  const tokenAddress: string = data[0];\r\n  const tokenId: BigNumber = data[1];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n    tokenId: tokenId.toString(),\r\n  };\r\n};\r\n\r\nexport const encodeErc1155AssetData = (\r\n  tokenAddress: string,\r\n  tokenIds: BigNumberish[],\r\n  values: BigNumberish[],\r\n  callbackData: string\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.ERC1155,\r\n    defaultAbiCoder.encode(\r\n      ['address', 'uint256[]', 'uint256[]', 'bytes'],\r\n      [tokenAddress, tokenIds, values, callbackData]\r\n    ),\r\n  ]);\r\n\r\nexport const decodeErc1155AssetData = (\r\n  encodedAssetData: string\r\n): ERC1155AssetDataSerialized => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(\r\n    ['address', 'uint256[]', 'uint256[]', 'bytes'],\r\n    rest\r\n  );\r\n\r\n  const tokenAddress: string = data[0];\r\n  const tokenIds: BigNumber[] = data[1];\r\n  const values: BigNumber[] = data[2];\r\n  const callbackData: string = data[3];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    tokenAddress: tokenAddress.toLowerCase(),\r\n    tokenIds: tokenIds.map((id) => id.toString()),\r\n    tokenValues: values.map((val) => val.toString()),\r\n    callbackData,\r\n  };\r\n};\r\n\r\nexport const encodeMultiAssetAssetData = (\r\n  values: BigNumberish[],\r\n  nestedAssetData: string[]\r\n) =>\r\n  hexConcat([\r\n    AssetProxyId.MultiAsset,\r\n    defaultAbiCoder.encode(['uint256[]', 'bytes[]'], [values, nestedAssetData]),\r\n  ]);\r\n\r\nexport const decodeMultiAssetData = (encodedAssetData: string) => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  const rest = hexDataSlice(encodedAssetData, 4);\r\n  const data = defaultAbiCoder.decode(['uint256[]', 'bytes[]'], rest);\r\n\r\n  const values: BigNumber[] = data[0];\r\n  const nestedAssetDatas: string[] = data[1];\r\n\r\n  return {\r\n    assetProxyId: assetProxyId.toLowerCase(),\r\n    amounts: values.map((val) => val.toString()),\r\n    nestedAssetData: nestedAssetDatas.map(\r\n      (nestedAssetData) =>\r\n        decodeAssetData(nestedAssetData) as SerializedSingleAssetDataTypes // Cast b/c multiasset can only happen at depth 0, only singe asset datas can be nested\r\n    ),\r\n  };\r\n};\r\n\r\nexport const encodeAssetData = (\r\n  assetData: UserFacingSerializedSingleAssetDataTypes,\r\n  // To express ERC1155 amounts inside a multiasset order, you cannot encode the amount on the indiviual asset data,\r\n  // It needs to be paired with the [asset, amount] tuple inside the Multiasset order format order array (I know, a bit confusing)\r\n  // But if you're encoding erc1155 asset data within the context of a multi-asset order, this boolean should be true\r\n  erc1155EncodingForMultiAssetOrder: boolean = false\r\n): string => {\r\n  switch (assetData.type) {\r\n    case SupportedTokenTypes.ERC20:\r\n      const erc20AssetData = encodeErc20AssetData(assetData.tokenAddress);\r\n      return erc20AssetData;\r\n    case SupportedTokenTypes.ERC721:\r\n      const erc721AssetData = encodeErc721AssetData(\r\n        assetData.tokenAddress,\r\n        BigNumber.from(assetData.tokenId)\r\n      );\r\n      return erc721AssetData;\r\n    case SupportedTokenTypes.ERC1155:\r\n      const tokenIds = assetData.tokens.map((x) => x.tokenId);\r\n      let tokenValues: string[];\r\n      if (erc1155EncodingForMultiAssetOrder) {\r\n        tokenValues = assetData.tokens.map((_) => '1');\r\n      } else {\r\n        tokenValues = assetData.tokens.map((x) => x.tokenValue);\r\n      }\r\n      const erc1155AssetData = encodeErc1155AssetData(\r\n        assetData.tokenAddress,\r\n        convertCollectionToBN(tokenIds),\r\n        convertCollectionToBN(tokenValues),\r\n        '0x' // Needs to be '0x' (null bytes) (not empty string) or else it won't work lol\r\n      );\r\n      return erc1155AssetData;\r\n    default:\r\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\r\n  }\r\n};\r\n\r\nexport const decodeAssetData = (\r\n  encodedAssetData: string\r\n): SerializedAvailableAssetDataTypesDecoded => {\r\n  const assetProxyId: string | undefined = hexDataSlice(encodedAssetData, 0, 4);\r\n\r\n  switch (assetProxyId) {\r\n    case AssetProxyId.ERC20:\r\n      const erc20AssetData = decodeErc20AssetData(encodedAssetData);\r\n      return erc20AssetData;\r\n    case AssetProxyId.ERC721:\r\n      const erc721AssetData = decodeErc721AssetData(encodedAssetData);\r\n      return erc721AssetData;\r\n    case AssetProxyId.ERC1155:\r\n      const erc1155AssetData = decodeErc1155AssetData(encodedAssetData);\r\n      return erc1155AssetData;\r\n    case AssetProxyId.MultiAsset:\r\n      const multiAssetData = decodeMultiAssetData(encodedAssetData);\r\n      return multiAssetData;\r\n    default:\r\n      throw new Error(\r\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\r\n      );\r\n  }\r\n};\r\n\r\nexport const getAmountFromAsset = (\r\n  assetData: UserFacingSerializedSingleAssetDataTypes\r\n): string => {\r\n  switch (assetData.type) {\r\n    case SupportedTokenTypes.ERC20:\r\n      return assetData.amount;\r\n    case SupportedTokenTypes.ERC721:\r\n      return '1';\r\n    case SupportedTokenTypes.ERC1155:\r\n      // Trader.sdk only supports trading 1 ERC1155 per _asset_ at a time,\r\n      // so we can access the 0th index for our token\r\n      // (You can still trade multiple ERC1155s per _order_).\r\n      return assetData.tokens[0]?.tokenValue ?? '1';\r\n    default:\r\n      throw new Error(`Unsupported type ${(assetData as any)?.type}`);\r\n  }\r\n};\r\n\r\nexport const convertAssetToInternalFormat = (\r\n  swappable: SwappableAsset\r\n): InterallySupportedAssetFormat => {\r\n  switch (swappable.type) {\r\n    // No converting needed\r\n    case 'ERC20':\r\n      return swappable;\r\n    // No converting needed\r\n    case 'ERC721':\r\n      return swappable;\r\n    // Convert normalized public ERC1155 interface to 0x internal asset data format\r\n    // We do this to reduce complexity for end user SDK (and keep api same with erc721)\r\n    case 'ERC1155':\r\n      const zeroExErc1155AssetFormat = {\r\n        tokenAddress: swappable.tokenAddress,\r\n        tokens: [\r\n          {\r\n            tokenId: swappable.tokenId,\r\n            tokenValue: swappable.amount || '1',\r\n          },\r\n        ],\r\n        type: SupportedTokenTypes.ERC1155 as const,\r\n      };\r\n      return zeroExErc1155AssetFormat;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((swappable as any)?.type ?? 'Unknown');\r\n  }\r\n};\r\n\r\nexport const convertAssetsToInternalFormat = (\r\n  assets: Array<SwappableAsset>\r\n): Array<InterallySupportedAssetFormat> => {\r\n  return assets.map(convertAssetToInternalFormat);\r\n};\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type {\r\n  ExchangeContract,\r\n  ExchangeContractInterface,\r\n} from '../../../ZeroEx/v3/ExchangeContract';\r\n\r\nconst _abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'chainId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes4',\r\n        name: 'id',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'assetProxy',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'AssetProxyRegistered',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'feeRecipientAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'senderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'Cancel',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'orderSenderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'orderEpoch',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'CancelUpTo',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'makerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'feeRecipientAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'makerFeeAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes',\r\n        name: 'takerFeeAssetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'senderAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFilledAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFilledAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'makerFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'takerFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'protocolFeePaid',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Fill',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'oldProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'updatedProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ProtocolFeeCollectorAddress',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'oldProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'updatedProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ProtocolFeeMultiplier',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'signerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'validatorAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'isApproved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'SignatureValidatorApproval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes32',\r\n        name: 'transactionHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'TransactionExecution',\r\n    type: 'event',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EIP1271_MAGIC_VALUE',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EIP712_EXCHANGE_DOMAIN_HASH',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowedValidators',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelOrders',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction[]',\r\n        name: 'transactions',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchExecuteTransactions',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: '',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrKillOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'takerAssetFillAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchFillOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults[]',\r\n        name: 'fillResults',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'leftOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'rightOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'leftSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'rightSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'left',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'right',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\r\n        name: 'batchMatchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'leftOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'rightOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'leftSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'rightSignatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchOrdersWithMaximalFill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'left',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults[]',\r\n            name: 'right',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.BatchMatchedFillResults',\r\n        name: 'batchMatchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelOrder',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'targetOrderEpoch',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelOrdersUpTo',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'cancelled',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'currentContextAddress',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [],\r\n    name: 'detachProtocolFeeCollector',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\r\n        name: 'transaction',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'executeTransaction',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: '',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'fillOrKillOrder',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'fillOrder',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'filled',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'assetProxyId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'getAssetProxy',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'orderStatus',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'orderTakerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'signerAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidHashSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidOrderSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'gasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'signerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibZeroExTransaction.ZeroExTransaction',\r\n        name: 'transaction',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'signature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'isValidTransactionSignature',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersFillOrKill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersFillOrKill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'takerAssetFillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersNoThrow',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetFilledAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFeePaid',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'protocolFeePaid',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.FillResults',\r\n        name: 'fillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'leftOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'rightOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'leftSignature',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'rightSignature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'matchOrders',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'left',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'right',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.MatchedFillResults',\r\n        name: 'matchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'leftOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order',\r\n        name: 'rightOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'leftSignature',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'rightSignature',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'matchOrdersWithMaximalFill',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'left',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerAssetFilledAmount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'makerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'takerFeePaid',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'protocolFeePaid',\r\n                type: 'uint256',\r\n              },\r\n            ],\r\n            internalType: 'struct LibFillResults.FillResults',\r\n            name: 'right',\r\n            type: 'tuple',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInLeftMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'profitInRightMakerAsset',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibFillResults.MatchedFillResults',\r\n        name: 'matchedFillResults',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'orderEpoch',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'preSign',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'preSigned',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'protocolFeeCollector',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'protocolFeeMultiplier',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'assetProxy',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'registerAssetProxy',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'updatedProtocolFeeCollector',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setProtocolFeeCollectorAddress',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'updatedProtocolFeeMultiplier',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'setProtocolFeeMultiplier',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'validatorAddress',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approval',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setSignatureValidatorApproval',\r\n    outputs: [],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'assetData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'fromAddresses',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'toAddresses',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'amounts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'simulateDispatchTransferFromCalls',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: '',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'transactionsExecuted',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ExchangeContract__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ExchangeContractInterface {\r\n    return new utils.Interface(_abi) as ExchangeContractInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): ExchangeContract {\r\n    return new Contract(address, _abi, signerOrProvider) as ExchangeContract;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type {\r\n  Forwarder,\r\n  ForwarderInterface,\r\n} from '../../../ZeroEx/v3/Forwarder';\r\n\r\nconst _abi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_exchange',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_exchangeV2',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_weth',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'fallback',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'ERC1155_BATCH_RECEIVED',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'ERC1155_RECEIVED',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'EXCHANGE_V2_ORDER_ID',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'assetData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'approveMakerAssetProxy',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketBuyOrdersWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'ethSellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketSellAmountWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct LibOrder.Order[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'signatures',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ethFeeAmounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'address payable[]',\r\n        name: 'feeRecipients',\r\n        type: 'address[]',\r\n      },\r\n    ],\r\n    name: 'marketSellOrdersWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'wethSpentAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'makerAssetAcquiredAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'values',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155BatchReceived',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'assetData',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'withdrawAsset',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class Forwarder__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ForwarderInterface {\r\n    return new utils.Interface(_abi) as ForwarderInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): Forwarder {\r\n    return new Contract(address, _abi, signerOrProvider) as Forwarder;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { IZeroEx, IZeroExInterface } from '../../../ZeroEx/v4/IZeroEx';\r\n\r\nconst _abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20FillAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC1155Token',\r\n        name: 'erc1155Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'erc1155FillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'matcher',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'feeData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Fee[]',\r\n        name: 'fees',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC1155Token',\r\n        name: 'erc1155Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IPropertyValidator',\r\n            name: 'propertyValidator',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'propertyData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Property[]',\r\n        name: 'erc1155TokenProperties',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'erc1155TokenAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'ERC1155OrderPreSigned',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC721Token',\r\n        name: 'erc721Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'matcher',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'enum LibNFTOrder.TradeDirection',\r\n        name: 'direction',\r\n        type: 'uint8',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'expiry',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'nonce',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc20TokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'amount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'feeData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Fee[]',\r\n        name: 'fees',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC721Token',\r\n        name: 'erc721Token',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IPropertyValidator',\r\n            name: 'propertyValidator',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'propertyData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        indexed: false,\r\n        internalType: 'struct LibNFTOrder.Property[]',\r\n        name: 'erc721TokenProperties',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'ERC721OrderPreSigned',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'feeRecipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFeeFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'protocolFeePaid',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'pool',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'LimitOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'contract ILiquidityProvider',\r\n        name: 'provider',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'LiquidityProviderSwap',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'hash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'MetaTransactionExecuted',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'caller',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'migrator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'Migrated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OrderCancelled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'OrderSignerRegistered',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'OtcOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'previousOwner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'OwnershipTransferred',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'PairCancelledLimitOrders',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'PairCancelledRfqOrders',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'oldImpl',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'newImpl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'ProxyFunctionUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'quoteSigner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'QuoteSignerUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bytes32',\r\n        name: 'pool',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'RfqOrderFilled',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'origin',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address[]',\r\n        name: 'addrs',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'RfqOrderOriginsAllowed',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'TransformedERC20',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: false,\r\n        internalType: 'address',\r\n        name: 'transformerDeployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'TransformerDeployerUpdated',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'sender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'useSelfBalance',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillOtcOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'taker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'useSelfBalance',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_fillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: '_sellHeldTokenForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'inputToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'outputToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'inputTokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minOutputTokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'uint32',\r\n                name: 'deploymentNonce',\r\n                type: 'uint32',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'data',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct ITransformERC20Feature.Transformation[]',\r\n            name: 'transformations',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'bool',\r\n            name: 'useSelfBalance',\r\n            type: 'bool',\r\n          },\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'recipient',\r\n            type: 'address',\r\n          },\r\n        ],\r\n        internalType: 'struct ITransformERC20Feature.TransformERC20Args',\r\n        name: 'args',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: '_transformERC20',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'erc1155TokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'callbackData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchBuyERC1155s',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'callbackData',\r\n        type: 'bytes[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchBuyERC721s',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'orderNonces',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelERC1155Orders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'orderNonces',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelERC721Orders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairLimitOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'makerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'takerTokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'minValidSalts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelPairRfqOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchCancelRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData[]',\r\n        name: 'mtxs',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchExecuteMetaTransactions',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes[]',\r\n        name: 'returnResults',\r\n        type: 'bytes[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFillAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchFillLimitOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'makerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFillAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'revertIfIncomplete',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'batchFillRfqOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'takerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'makerTokenFilledAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'makerSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'takerSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'unwrapWeth',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    name: 'batchFillTakerSignedOtcOrders',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchGetLimitOrderRelevantStates',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\r\n        name: 'orderInfos',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'actualFillableTakerTokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'isSignatureValids',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder[]',\r\n        name: 'orders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'signatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchGetRfqOrderRelevantStates',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo[]',\r\n        name: 'orderInfos',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint128[]',\r\n        name: 'actualFillableTakerTokenAmounts',\r\n        type: 'uint128[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'isSignatureValids',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order[]',\r\n        name: 'buyOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'sellOrderSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature[]',\r\n        name: 'buyOrderSignatures',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'batchMatchERC721Orders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: 'profits',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bool[]',\r\n        name: 'successes',\r\n        type: 'bool[]',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'erc1155BuyAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'buyERC1155',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'buyERC721',\r\n    outputs: [],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'orderNonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelERC1155Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'orderNonce',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelERC721Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelLimitOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairLimitOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairLimitOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairRfqOrders',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'makerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'takerToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minValidSalt',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'cancelPairRfqOrdersWithSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'cancelRfqOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'createTransformWallet',\r\n    outputs: [\r\n      {\r\n        internalType: 'contract IFlashWallet',\r\n        name: 'wallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'executeMetaTransaction',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'returnResult',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'impl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'extend',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOrKillLimitOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOrKillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrderForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillOtcOrderWithEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFillAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    name: 'fillRfqOrder',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'takerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'makerTokenFilledAmount',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'takerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillTakerSignedOtcOrder',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'makerSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'takerSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'fillTakerSignedOtcOrderForEth',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC1155OrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC1155OrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNFTOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'orderAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'remainingAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderStatus',\r\n    outputs: [\r\n      {\r\n        internalType: 'enum LibNFTOrder.OrderStatus',\r\n        name: 'status',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint248',\r\n        name: 'nonceRange',\r\n        type: 'uint248',\r\n      },\r\n    ],\r\n    name: 'getERC721OrderStatusBitVector',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'bitVector',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFeeAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipient',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.LimitOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getLimitOrderRelevantState',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'actualFillableTakerTokenAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSignatureValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionExecutedBlock',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'blockNumber',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address payable',\r\n            name: 'signer',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'sender',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'minGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'maxGasPrice',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'callData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'value',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'feeToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'feeAmount',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct IMetaTransactionsFeature.MetaTransactionData',\r\n        name: 'mtx',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'mtxHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'mtxHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'getMetaTransactionHashExecutedBlock',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'blockNumber',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOtcOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiryAndNonce',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getOtcOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OtcOrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getProtocolFeeMultiplier',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint32',\r\n        name: 'multiplier',\r\n        type: 'uint32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getQuoteSigner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderHash',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderInfo',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'makerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'takerToken',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'makerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerAmount',\r\n            type: 'uint128',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'txOrigin',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'pool',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'uint64',\r\n            name: 'expiry',\r\n            type: 'uint64',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.RfqOrder',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'getRfqOrderRelevantState',\r\n    outputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'orderHash',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'enum LibNativeOrder.OrderStatus',\r\n            name: 'status',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'takerTokenFilledAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNativeOrder.OrderInfo',\r\n        name: 'orderInfo',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'actualFillableTakerTokenAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSignatureValid',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'idx',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'getRollbackEntryAtIndex',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'impl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'getRollbackLength',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'rollbackLength',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getTransformWallet',\r\n    outputs: [\r\n      {\r\n        internalType: 'contract IFlashWallet',\r\n        name: 'wallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'getTransformerDeployer',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'deployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'maker',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isValidOrderSigner',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isAllowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'txOrigin',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint64',\r\n        name: 'nonceBucket',\r\n        type: 'uint64',\r\n      },\r\n    ],\r\n    name: 'lastOtcTxOriginNonce',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'lastNonce',\r\n        type: 'uint128',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'sellOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'sellOrderSignature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'buyOrderSignature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'matchERC721Orders',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'profit',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'target',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'migrate',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellEthForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellTokenForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'sellAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.BatchSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexBatchSellTokenForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellEthForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellTokenForEth',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum IMultiplexFeature.MultiplexSubcall',\r\n            name: 'id',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IMultiplexFeature.MultiHopSellSubcall[]',\r\n        name: 'calls',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'multiplexMultiHopSellTokenForToken',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC1155Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'success',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'onERC721Received',\r\n    outputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'success',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    name: 'owner',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'ownerAddress',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'preSignERC1155Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'preSignERC721Order',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'signer',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'registerAllowedOrderSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: 'origins',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'allowed',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'registerAllowedRfqOrigins',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'selector',\r\n        type: 'bytes4',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'targetImpl',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'rollback',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint128',\r\n        name: 'erc1155SellAmount',\r\n        type: 'uint128',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellERC1155',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'buyOrder',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'callbackData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellERC721',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellEthForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract ILiquidityProvider',\r\n        name: 'provider',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'auxiliaryData',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'sellToLiquidityProvider',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'boughtAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'enum IPancakeSwapFeature.ProtocolFork',\r\n        name: 'fork',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    name: 'sellToPancakeSwap',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06[]',\r\n        name: 'tokens',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSushi',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'sellToUniswap',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellTokenForEthToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'encodedPath',\r\n        type: 'bytes',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'sellAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minBuyAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'recipient',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'sellTokenForTokenToUniswapV3',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'buyAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'quoteSigner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setQuoteSigner',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'transformerDeployer',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'setTransformerDeployer',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isSupported',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'newOwner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferOwnership',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes32[]',\r\n        name: 'poolIds',\r\n        type: 'bytes32[]',\r\n      },\r\n    ],\r\n    name: 'transferProtocolFeesForPools',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'erc20',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'amountOut',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'address payable',\r\n        name: 'recipientWallet',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'transferTrappedTokensTo',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'inputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'contract IERC20TokenV06',\r\n        name: 'outputToken',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'inputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'minOutputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'uint32',\r\n            name: 'deploymentNonce',\r\n            type: 'uint32',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'data',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct ITransformERC20Feature.Transformation[]',\r\n        name: 'transformations',\r\n        type: 'tuple[]',\r\n      },\r\n    ],\r\n    name: 'transformERC20',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'outputTokenAmount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'payable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'int256',\r\n        name: 'amount0Delta',\r\n        type: 'int256',\r\n      },\r\n      {\r\n        internalType: 'int256',\r\n        name: 'amount1Delta',\r\n        type: 'int256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: 'data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'uniswapV3SwapCallback',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc1155TokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'validateERC1155OrderProperties',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'validateERC1155OrderSignature',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'erc721TokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'validateERC721OrderProperties',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n    ],\r\n    name: 'validateERC721OrderSignature',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class IZeroEx__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): IZeroExInterface {\r\n    return new utils.Interface(_abi) as IZeroExInterface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): IZeroEx {\r\n    return new Contract(address, _abi, signerOrProvider) as IZeroEx;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC1155, ERC1155Interface } from '../ERC1155';\r\n\r\nconst _abi = [\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: '_approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256[]',\r\n        name: '_amounts',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'TransferBatch',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'uint256',\r\n        name: '_amount',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'TransferSingle',\r\n    type: 'event',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address[]',\r\n        name: '_owners',\r\n        type: 'address[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    name: 'balanceOfBatch',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '',\r\n        type: 'uint256[]',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: 'isOperator',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_ids',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'uint256[]',\r\n        name: '_amounts',\r\n        type: 'uint256[]',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeBatchTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_id',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: '_amount',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '_operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: '_approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: '_interfaceID',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ERC1155__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC1155Interface {\r\n    return new utils.Interface(_abi) as ERC1155Interface;\r\n  }\r\n  static connect(\r\n    address: string,\r\n    signerOrProvider: Signer | Provider\r\n  ): ERC1155 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC1155;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC20, ERC20Interface } from '../ERC20';\r\n\r\nconst _abi = [\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'name',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'totalSupply',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'decimals',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint8',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        name: 'balance',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [],\r\n    name: 'symbol',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'string',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        name: '_to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transfer',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        name: '_owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        name: '_spender',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'allowance',\r\n    outputs: [\r\n      {\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    payable: true,\r\n    stateMutability: 'payable',\r\n    type: 'fallback',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'spender',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        name: 'value',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n];\r\n\r\nexport class ERC20__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC20Interface {\r\n    return new utils.Interface(_abi) as ERC20Interface;\r\n  }\r\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC20 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC20;\r\n  }\r\n}\r\n","/* Autogenerated file. Do not edit manually. */\r\n/* tslint:disable */\r\n/* eslint-disable */\r\n\r\nimport { Contract, Signer, utils } from 'ethers';\r\nimport type { Provider } from '@ethersproject/providers';\r\nimport type { ERC721, ERC721Interface } from '../ERC721';\r\n\r\nconst _abi = [\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'approve',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'mint',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n      {\r\n        internalType: 'bytes',\r\n        name: '_data',\r\n        type: 'bytes',\r\n      },\r\n    ],\r\n    name: 'safeTransferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'setApprovalForAll',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: false,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'transferFrom',\r\n    outputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'function',\r\n  },\r\n  {\r\n    inputs: [],\r\n    payable: false,\r\n    stateMutability: 'nonpayable',\r\n    type: 'constructor',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'from',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'to',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Transfer',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'approved',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'Approval',\r\n    type: 'event',\r\n  },\r\n  {\r\n    anonymous: false,\r\n    inputs: [\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: true,\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n      {\r\n        indexed: false,\r\n        internalType: 'bool',\r\n        name: 'approved',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'ApprovalForAll',\r\n    type: 'event',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'balanceOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: '',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'getApproved',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: 'owner',\r\n        type: 'address',\r\n      },\r\n      {\r\n        internalType: 'address',\r\n        name: 'operator',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    name: 'isApprovedForAll',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'uint256',\r\n        name: 'tokenId',\r\n        type: 'uint256',\r\n      },\r\n    ],\r\n    name: 'ownerOf',\r\n    outputs: [\r\n      {\r\n        internalType: 'address',\r\n        name: '',\r\n        type: 'address',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n  {\r\n    constant: true,\r\n    inputs: [\r\n      {\r\n        internalType: 'bytes4',\r\n        name: 'interfaceId',\r\n        type: 'bytes4',\r\n      },\r\n    ],\r\n    name: 'supportsInterface',\r\n    outputs: [\r\n      {\r\n        internalType: 'bool',\r\n        name: '',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    payable: false,\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport class ERC721__factory {\r\n  static readonly abi = _abi;\r\n  static createInterface(): ERC721Interface {\r\n    return new utils.Interface(_abi) as ERC721Interface;\r\n  }\r\n  static connect(address: string, signerOrProvider: Signer | Provider): ERC721 {\r\n    return new Contract(address, _abi, signerOrProvider) as ERC721;\r\n  }\r\n}\r\n","import {\r\n  TypedDataDomain,\r\n  TypedDataField,\r\n} from '@ethersproject/abstract-signer';\r\nimport { arrayify } from '@ethersproject/bytes';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\n\r\nexport interface TypedData {\r\n  domain: TypedDataDomain;\r\n  types: Record<string, Array<TypedDataField>>;\r\n  message: Record<string, any>;\r\n  primaryType?: string;\r\n}\r\n\r\nexport type { TypedDataDomain, TypedDataField };\r\n\r\nexport const encodeTypedDataHash = (typedData: TypedData): string => {\r\n  const types = { ...typedData.types };\r\n\r\n  // remove EIP712Domain key from types as ethers will auto-gen it in\r\n  // the hash encoder below\r\n  delete types['EIP712Domain'];\r\n\r\n  return _TypedDataEncoder.hash(typedData.domain, types, typedData.message);\r\n};\r\n\r\nexport const encodeTypedDataDigest = (typedData: TypedData): Uint8Array => {\r\n  return arrayify(encodeTypedDataHash(typedData));\r\n};\r\n","export const EIP1271ZeroExDataAbi = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'address',\r\n            name: 'makerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'takerAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'feeRecipientAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'senderAddress',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerAssetAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'makerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'takerFee',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expirationTimeSeconds',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'salt',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'makerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n          {\r\n            internalType: 'bytes',\r\n            name: 'takerFeeAssetData',\r\n            type: 'bytes',\r\n          },\r\n        ],\r\n        internalType: 'struct IEIP1271Data.Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        internalType: 'bytes32',\r\n        name: 'orderHash',\r\n        type: 'bytes32',\r\n      },\r\n    ],\r\n    name: 'OrderWithHash',\r\n    outputs: [],\r\n    stateMutability: 'pure',\r\n    type: 'function',\r\n  },\r\n];\r\n","import flatten from 'lodash/flatten';\r\nimport type { ContractTransaction } from '@ethersproject/contracts';\r\nimport { BaseProvider, Provider } from '@ethersproject/providers';\r\nimport {\r\n  arrayify,\r\n  hexConcat,\r\n  hexDataLength,\r\n  hexDataSlice,\r\n  hexlify,\r\n  joinSignature,\r\n  splitSignature,\r\n} from '@ethersproject/bytes';\r\nimport { verifyTypedData } from '@ethersproject/wallet';\r\nimport { _TypedDataEncoder } from '@ethersproject/hash';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport {\r\n  generateOrderFromAssetDatas,\r\n  generateTimeBasedSalt,\r\n  getEipDomain,\r\n  normalizeOrder,\r\n} from '../../utils/v3/order';\r\nimport { NULL_ADDRESS } from '../../utils/eth';\r\nimport {\r\n  decodeAssetData,\r\n  encodeAssetData,\r\n  encodeMultiAssetAssetData,\r\n  getAmountFromAsset,\r\n} from '../../utils/v3/asset-data';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC20__factory,\r\n  ERC721__factory,\r\n  ExchangeContract,\r\n} from '../../contracts';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport {\r\n  AdditionalOrderConfig,\r\n  AssetProxyId,\r\n  AvailableSignatureTypesV3,\r\n  EIP712_TYPES,\r\n  ERC1155AssetDataSerialized,\r\n  ERC20AssetDataSerialized,\r\n  ERC721AssetDataSerialized,\r\n  MultiAssetDataSerializedRecursivelyDecoded,\r\n  Order,\r\n  OrderInfoV3,\r\n  OrderStatusV3,\r\n  SerializedAvailableAssetDataTypesDecoded,\r\n  SignedOrder,\r\n  SigningOptionsV3,\r\n  SwappableAsset,\r\n  UserFacingERC1155AssetDataSerializedNormalizedSingle,\r\n  UserFacingERC20AssetDataSerialized,\r\n  UserFacingERC721AssetDataSerialized,\r\n  UserFacingSerializedSingleAssetDataTypes,\r\n} from './types';\r\nimport { encodeTypedDataHash, TypedData } from '../../utils/typed-data';\r\nimport { EIP1271ZeroExDataAbi } from '../../utils/v3/eip1271';\r\nimport { convertCollectionToBN } from '../../utils/bn/convert';\r\nimport type {\r\n  ApprovalStatus,\r\n  PayableOverrides,\r\n  TransactionOverrides,\r\n} from '../common/types';\r\n\r\nexport const cancelOrder = (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n) => {\r\n  return exchangeContract.cancelOrder(order);\r\n};\r\n\r\nexport const getOrderInfo = async (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n): Promise<OrderInfoV3> => {\r\n  const orderInfo = await exchangeContract.getOrderInfo(order);\r\n  return orderInfo as OrderInfoV3;\r\n};\r\n\r\nexport const getOrderStatus = async (\r\n  exchangeContract: ExchangeContract,\r\n  order: Order\r\n): Promise<OrderStatusV3> => {\r\n  const orderInfo = await exchangeContract.getOrderInfo(order);\r\n  return orderInfo.orderStatus as OrderStatusV3;\r\n};\r\n\r\nexport const cancelOrders = (\r\n  exchangeContract: ExchangeContract,\r\n  orders: Array<Order>,\r\n  overrides?: PayableOverrides\r\n) => {\r\n  return exchangeContract.batchCancelOrders(orders, overrides);\r\n};\r\n\r\nexport const cancelOrdersUpToNow = (\r\n  exchangeContract: ExchangeContract,\r\n  unixTimestampAsSalt: string = generateTimeBasedSalt()\r\n) => {\r\n  exchangeContract.cancelOrdersUpTo(unixTimestampAsSalt);\r\n};\r\n\r\nexport const hashOrder = (\r\n  order: Order,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n): string => {\r\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\r\n  return _TypedDataEncoder.hash(EIP712_DOMAIN, EIP712_TYPES, order);\r\n};\r\n\r\nexport type InterallySupportedAssetFormat =\r\n  UserFacingSerializedSingleAssetDataTypes;\r\n\r\nexport const signOrderWithEip1271 = async (\r\n  order: Order,\r\n  signer: Signer,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const domain = getEipDomain(chainId, exchangeContractAddress);\r\n  const types = EIP712_TYPES;\r\n  const value = order;\r\n\r\n  const typedData: TypedData = {\r\n    domain,\r\n    types,\r\n    message: value,\r\n  };\r\n\r\n  const orderHash = encodeTypedDataHash(typedData);\r\n\r\n  const msg = new Interface(EIP1271ZeroExDataAbi).encodeFunctionData(\r\n    'OrderWithHash',\r\n    [order, orderHash]\r\n  );\r\n\r\n  const rawSignatureFromContractWallet = await signer.signMessage(\r\n    arrayify(msg)\r\n  );\r\n\r\n  return rawSignatureFromContractWallet;\r\n};\r\n\r\nexport const signOrderWithEoaWallet = async (\r\n  order: Order,\r\n  signer: TypedDataSigner,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const domain = getEipDomain(chainId, exchangeContractAddress);\r\n  const types = EIP712_TYPES;\r\n  const value = order;\r\n\r\n  const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n    domain,\r\n    types,\r\n    value\r\n  );\r\n\r\n  return rawSignatureFromEoaWallet;\r\n};\r\n\r\nexport const checkIfContractWallet = async (\r\n  provider: Provider,\r\n  walletAddress: string\r\n): Promise<boolean> => {\r\n  let isContractWallet: boolean = false;\r\n  if (provider.getCode) {\r\n    let walletCode = await provider.getCode(walletAddress);\r\n    // Wallet Code returns '0x' if no contract address is associated with\r\n    // Note: Lazy loaded contract wallets will show 0x initially, so we fall back to feature detection\r\n    if (walletCode && walletCode != '0x') {\r\n      isContractWallet = true;\r\n    }\r\n  }\r\n  let isSequence = !!(provider as any)._isSequenceProvider;\r\n  if (isSequence) {\r\n    isContractWallet = true;\r\n  }\r\n  // Walletconnect hides the real provider in the provider (yo dawg)\r\n  let providerToUse = (provider as any).provider;\r\n  if (providerToUse?.isWalletConnect) {\r\n    const isSequenceViaWalletConnect = !!(\r\n      (providerToUse as any).connector?._peerMeta?.description === 'Sequence'\r\n    );\r\n    if (isSequenceViaWalletConnect) {\r\n      isContractWallet = true;\r\n    }\r\n  }\r\n\r\n  return isContractWallet;\r\n};\r\n\r\nexport const signOrder = async (\r\n  order: Order,\r\n  signerAddress: string,\r\n  signer: Signer,\r\n  provider: Provider,\r\n  chainId: number,\r\n  exchangeContractAddress: string,\r\n  signingOptions?: Partial<SigningOptionsV3>\r\n): Promise<SignedOrder> => {\r\n  try {\r\n    let method: AvailableSignatureTypesV3 = 'eoa';\r\n    // If we have any specific signature type overrides, prefer those\r\n    if (signingOptions?.signatureType === 'eip1271') {\r\n      method = 'eip1271';\r\n    } else if (signingOptions?.signatureType === 'eoa') {\r\n      method = 'eoa';\r\n    } else {\r\n      // Try to detect...\r\n      if (signingOptions?.autodetectSignatureType === false) {\r\n        method = 'eoa';\r\n      } else {\r\n        // If we made it here, consumer has no preferred signing method,\r\n        // let's try feature detection to automagically pick a signature type\r\n        // By default we fallback to EOA signing if we can't figure it out.\r\n\r\n        // Let's try to determine if the signer is a contract wallet or not.\r\n        // If it is, we'll try EIP-1271, otherwise we'll do a normal sign\r\n        const isContractWallet = await checkIfContractWallet(\r\n          provider,\r\n          signerAddress\r\n        );\r\n        if (isContractWallet) {\r\n          method = 'eip1271';\r\n        } else {\r\n          method = 'eoa';\r\n        }\r\n      }\r\n    }\r\n    let signature: string;\r\n    switch (method) {\r\n      case 'eoa':\r\n        const rawEip712Signature = await signOrderWithEoaWallet(\r\n          order,\r\n          signer as unknown as TypedDataSigner,\r\n          chainId,\r\n          exchangeContractAddress\r\n        );\r\n        signature = prepareOrderSignatureFromEoaWallet(rawEip712Signature);\r\n        break;\r\n      case 'eip1271':\r\n        const rawEip1271Signature = (signature = await signOrderWithEip1271(\r\n          order,\r\n          signer,\r\n          chainId,\r\n          exchangeContractAddress\r\n        ));\r\n        signature =\r\n          prepareOrderSignatureFromContractWallet(rawEip1271Signature);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown signature method chosen: ${method}`);\r\n    }\r\n\r\n    const signedOrder: SignedOrder = {\r\n      ...order,\r\n      signature,\r\n    };\r\n\r\n    return signedOrder;\r\n  } catch (e) {\r\n    console.log('error signing order', e);\r\n    throw e;\r\n  }\r\n};\r\n\r\n// export const prepareOrderSignature = (\r\n//   rawSignature: string,\r\n//   method?: AvailableSignatureTypes\r\n// ) => {\r\n//   let preferredMethod = method ?? 'eoa';\r\n//   try {\r\n//     return prepareOrderSignatureFromEoaWallet(rawSignature);\r\n//   } catch (e) {\r\n//     console.log('prepareOrderSignature:Errror preparing order signature', e);\r\n//     console.log('Attempting to decode contract wallet signature');\r\n//     try {\r\n//       return prepareOrderSignatureFromContractWallet(rawSignature);\r\n//     } catch (e) {\r\n//       throw e;\r\n//     }\r\n//   }\r\n// };\r\n\r\nexport const prepareOrderSignatureFromEoaWallet = (rawSignature: string) => {\r\n  // Append the signature type (eg. \"0x02\" for EIP712 signatures)\r\n  // at the end of the signature since this is what 0x expects\r\n  const signature = splitSignature(rawSignature);\r\n  return hexConcat([hexlify(signature.v), signature.r, signature.s, '0x02']);\r\n};\r\n\r\nexport const prepareOrderSignatureFromContractWallet = (\r\n  rawSignature: string\r\n) => {\r\n  // Append the signature type (eg. \"0x07\" for EIP1271 signatures)\r\n  // at the end of the signature since this is what 0x expects\r\n  // See: https://github.com/0xProject/ZEIPs/issues/33\r\n  return hexConcat([rawSignature, '0x07']);\r\n};\r\n\r\nexport const verifyOrderSignature = (\r\n  order: Order,\r\n  signature: string,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  const EIP712_DOMAIN = getEipDomain(chainId, exchangeContractAddress);\r\n  try {\r\n    const maker = order.makerAddress.toLowerCase();\r\n    const length = hexDataLength(signature);\r\n    // Grab the V (exists at index 0 for 0x orders)\r\n    const slicedSigV = hexDataSlice(signature, 0, 1);\r\n    // Grab the R and S (index 1 through length - 1 b/c the end hex is the signature type so we strip that too)\r\n    const slicedSig = hexDataSlice(signature, 1, length - 1);\r\n\r\n    const derivedSignatureHex = hexConcat([slicedSig, slicedSigV]);\r\n    const derivedSignature = joinSignature(derivedSignatureHex);\r\n\r\n    const signer = verifyTypedData(\r\n      EIP712_DOMAIN,\r\n      EIP712_TYPES,\r\n      order,\r\n      derivedSignature\r\n    );\r\n\r\n    return maker.toLowerCase() === signer.toLowerCase();\r\n  } catch (e) {\r\n    console.log(e);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const buildOrder = (\r\n  makerAssets: Array<InterallySupportedAssetFormat>,\r\n  takerAssets: Array<InterallySupportedAssetFormat>,\r\n  orderConfig: AdditionalOrderConfig\r\n): Order => {\r\n  // Encode maker assets\r\n  let makerAssetAmount: BigNumber;\r\n  let makerAssetData: string;\r\n\r\n  const makerAssetEligibleForSingleAsset = makerAssets.length === 1;\r\n  if (makerAssetEligibleForSingleAsset) {\r\n    const makerAsset = makerAssets[0];\r\n    makerAssetAmount = BigNumber.from(getAmountFromAsset(makerAsset));\r\n    makerAssetData = encodeAssetData(makerAsset, false);\r\n  } else {\r\n    const makerAssetAmounts = makerAssets.map((ma) => getAmountFromAsset(ma));\r\n    const makerAssetDatas = makerAssets.map((ma) => encodeAssetData(ma, true));\r\n    const makerMultiAsset = encodeMultiAssetAssetData(\r\n      makerAssetAmounts,\r\n      makerAssetDatas\r\n    );\r\n    makerAssetData = makerMultiAsset;\r\n    makerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\r\n  }\r\n\r\n  // Encode taker assets\r\n  let takerAssetAmount: BigNumber;\r\n  let takerAssetData: string;\r\n\r\n  const takerAssetEligibleForSingleAsset = takerAssets.length === 1;\r\n  // If we only have one asset to swap\r\n  if (takerAssetEligibleForSingleAsset) {\r\n    const takerAsset = takerAssets[0];\r\n    takerAssetAmount = BigNumber.from(getAmountFromAsset(takerAsset));\r\n    takerAssetData = encodeAssetData(takerAsset, false);\r\n  } else {\r\n    const takerAssetAmounts = takerAssets.map((ta) => getAmountFromAsset(ta));\r\n    const takerAssetDatas = takerAssets.map((ta) => encodeAssetData(ta, true));\r\n    const takerMultiAsset = encodeMultiAssetAssetData(\r\n      convertCollectionToBN(takerAssetAmounts),\r\n      takerAssetDatas\r\n    );\r\n    takerAssetData = takerMultiAsset;\r\n    takerAssetAmount = BigNumber.from(1); // needs to be 1 for multiasset wrapper amount (actual amounts are nested)\r\n  }\r\n\r\n  const order = generateOrderFromAssetDatas({\r\n    makerAssetAmount: makerAssetAmount,\r\n    makerAssetData: makerAssetData,\r\n    takerAddress: orderConfig.takerAddress ?? NULL_ADDRESS,\r\n    takerAssetAmount: takerAssetAmount,\r\n    takerAssetData: takerAssetData,\r\n    exchangeAddress: orderConfig.exchangeAddress ?? '',\r\n    ...orderConfig,\r\n  });\r\n\r\n  return order;\r\n};\r\n\r\nexport const fillSignedOrder = async (\r\n  signedOrder: SignedOrder,\r\n  exchangeContract: ExchangeContract,\r\n  overrides?: PayableOverrides\r\n): Promise<ContractTransaction> => {\r\n  return exchangeContract.fillOrKillOrder(\r\n    normalizeOrder(signedOrder),\r\n    signedOrder.takerAssetAmount,\r\n    signedOrder.signature,\r\n    overrides\r\n  );\r\n};\r\n\r\n/**\r\n *\r\n * @param walletAddress Owner of the asset\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param provider\r\n * @returns\r\n */\r\nexport const getApprovalStatus = async (\r\n  walletAddress: string,\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  provider: BaseProvider\r\n): Promise<ApprovalStatus> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\r\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\r\n        MAX_APPROVAL.toString()\r\n      ).sub('100000000000000000');\r\n      const approvedForMax = erc20AllowanceBigNumber.gte(\r\n        MAX_APPROVAL_WITH_BUFFER\r\n      );\r\n      return {\r\n        contractApproved: approvedForMax,\r\n      };\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\r\n        asset.tokenId\r\n      );\r\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\r\n        await Promise.all([\r\n          erc721ApprovalForAllPromise,\r\n          erc721ApprovedAddressForIdPromise,\r\n        ]);\r\n      const tokenIdApproved =\r\n        erc721ApprovedAddressForId.toLowerCase() ===\r\n        exchangeProxyAddressForAsset.toLowerCase();\r\n      return {\r\n        contractApproved: erc721ApprovalForAll ?? false,\r\n        tokenIdApproved: tokenIdApproved,\r\n      };\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      return {\r\n        contractApproved: erc1155ApprovalForAll ?? false,\r\n      };\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Some arbitrarily high number.\r\n// TODO(johnrjj) - Support custom ERC20 approval amounts\r\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const approveAsset = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  signer: Signer,\r\n  overrides: TransactionOverrides = {},\r\n  approve: boolean = true\r\n): Promise<ContractTransaction> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL.toString() : 0,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...overrides,\r\n        }\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const estimateGasForApproval = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: InterallySupportedAssetFormat,\r\n  signer: Signer,\r\n  overrides: TransactionOverrides = {},\r\n  approve: boolean = true\r\n): Promise<BigNumber> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.estimateGas.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL : 0\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      const erc721ApprovalForAllPromise = erc721.estimateGas.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      const erc1155ApprovalForAll = await erc1155.estimateGas.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\nexport const getSignatureTypeFromSignature = (signature: string): string => {\r\n  const length = hexDataLength(signature);\r\n  const signatureType = hexDataSlice(signature, length - 1);\r\n  return signatureType;\r\n};\r\n\r\nexport const estimateGasForFillOrder = async (\r\n  signedOrder: SignedOrder,\r\n  exchangeContract: ExchangeContract,\r\n  _overrides?: PayableOverrides | undefined\r\n) => {\r\n  const estimatedGasRequiredForFill =\r\n    await exchangeContract.estimateGas.fillOrder(\r\n      normalizeOrder(signedOrder),\r\n      signedOrder.takerAssetAmount,\r\n      signedOrder.signature\r\n    );\r\n  return estimatedGasRequiredForFill;\r\n};\r\n\r\nexport const convertDecodedAssetDataToUserFacingAssets = (\r\n  decodedAssetData: SerializedAvailableAssetDataTypesDecoded,\r\n  assetAmount: string\r\n): Array<SwappableAsset> => {\r\n  const assetProxyId = decodedAssetData.assetProxyId;\r\n\r\n  switch (assetProxyId) {\r\n    case AssetProxyId.ERC20:\r\n      const decodedErc20 = decodedAssetData as ERC20AssetDataSerialized;\r\n      const swappableErc20: UserFacingERC20AssetDataSerialized = {\r\n        type: 'ERC20',\r\n        amount: assetAmount,\r\n        tokenAddress: decodedErc20.tokenAddress,\r\n      };\r\n      return [swappableErc20];\r\n    case AssetProxyId.ERC721:\r\n      const decodedErc721 = decodedAssetData as ERC721AssetDataSerialized;\r\n      const swappableErc721: UserFacingERC721AssetDataSerialized = {\r\n        type: 'ERC721',\r\n        tokenAddress: decodedErc721.tokenAddress,\r\n        tokenId: decodedErc721.tokenId,\r\n      };\r\n      return [swappableErc721];\r\n    case AssetProxyId.ERC1155:\r\n      const decodedErc1155 = decodedAssetData as ERC1155AssetDataSerialized;\r\n      const swappableErc1155: UserFacingERC1155AssetDataSerializedNormalizedSingle =\r\n        {\r\n          type: 'ERC1155',\r\n          tokenAddress: decodedErc1155.tokenAddress,\r\n          tokenId: decodedErc1155.tokenIds[0],\r\n          amount: decodedErc1155.tokenValues[0] ?? '1',\r\n        };\r\n      return [swappableErc1155];\r\n    case AssetProxyId.MultiAsset:\r\n      const multiAssetDecodedData =\r\n        decodedAssetData as MultiAssetDataSerializedRecursivelyDecoded;\r\n      const nestedAssets = flatten(\r\n        multiAssetDecodedData.nestedAssetData.map((asset, idx) =>\r\n          convertDecodedAssetDataToUserFacingAssets(\r\n            asset,\r\n            multiAssetDecodedData.amounts[idx]\r\n          )\r\n        )\r\n      );\r\n      const nestedAssetsWithCorrectAmounts: Array<SwappableAsset> =\r\n        nestedAssets.map((nestedAsset, idx) => {\r\n          const nestedAssetValueFromMultiAsset =\r\n            multiAssetDecodedData.amounts[idx];\r\n          // Overwrite original nested asset amount, b/c when its nested inside a multiasset encoding, the multiasset top level values take over.\r\n          return {\r\n            ...nestedAsset,\r\n            amount: nestedAssetValueFromMultiAsset,\r\n          };\r\n        });\r\n      return nestedAssetsWithCorrectAmounts;\r\n    default:\r\n      throw new Error(\r\n        `Unsupported AssetProxyId ${(assetProxyId as any)?.type}`\r\n      );\r\n  }\r\n};\r\n\r\nexport const getAssetsFromOrder = (\r\n  order: Order\r\n): { makerAssets: SwappableAsset[]; takerAssets: SwappableAsset[] } => {\r\n  const decodedMakerAssetData = decodeAssetData(order.makerAssetData);\r\n  const decodedTakerAssetData = decodeAssetData(order.takerAssetData);\r\n\r\n  const makerAssets = convertDecodedAssetDataToUserFacingAssets(\r\n    decodedMakerAssetData,\r\n    order.makerAssetAmount\r\n  );\r\n  const takerAssets = convertDecodedAssetDataToUserFacingAssets(\r\n    decodedTakerAssetData,\r\n    order.takerAssetAmount\r\n  );\r\n\r\n  return {\r\n    makerAssets,\r\n    takerAssets,\r\n  };\r\n};\r\n\r\n// export const loadApprovalStatusAll = async (assets: Array<InterallySupportedAsset>) => {\r\n//   const assetsGroupedByContractAddress = groupBy(assets, (asset) => asset.tokenAddress)\r\n//   const todoPromises = Object.entries(assetsGroupedByContractAddress).map(\r\n//     ([contractAddress, assetsWithSameTakerAddress]) => {\r\n//       const type = assetsWithSameTakerAddress[0]?.type\r\n//       switch (type) {\r\n//         case SupportedTokenTypes.ERC20:\r\n//           break\r\n//         case SupportedTokenTypes.ERC721:\r\n//           break\r\n//         case SupportedTokenTypes.ERC1155:\r\n//           break\r\n//         default:\r\n//           break\r\n//       }\r\n//     },\r\n//   )\r\n// }\r\n","import { UnsupportedChainId, UnexpectedAssetTypeError } from '../../sdk/error';\r\nimport type {\r\n  AddressesForChainV3,\r\n  ContractAddresses,\r\n  SupportedTokenTypes,\r\n} from '../../sdk/v3/types';\r\nimport defaultAddresses from '../../sdk/v3/addresses.json';\r\n\r\nconst getZeroExAddressesForChain = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n): AddressesForChainV3 | undefined => {\r\n  const chainIdString = chainId.toString(10);\r\n  const maybeAddressesForChain: AddressesForChainV3 | undefined = (\r\n    addresses as { [key: string]: AddressesForChainV3 }\r\n  )[chainIdString];\r\n  return maybeAddressesForChain;\r\n};\r\n\r\nexport const getProxyAddressForErcType = (\r\n  assetType: SupportedTokenTypes,\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n) => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  if (!zeroExAddresses) {\r\n    throw new UnsupportedChainId(chainId);\r\n  }\r\n  switch (assetType) {\r\n    case 'ERC20':\r\n      return zeroExAddresses.erc20Proxy;\r\n    case 'ERC721':\r\n      return zeroExAddresses.erc721Proxy;\r\n    case 'ERC1155':\r\n      return zeroExAddresses.erc1155Proxy;\r\n    default:\r\n      throw new UnexpectedAssetTypeError(assetType);\r\n  }\r\n};\r\n\r\nexport const getForwarderAddress = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n) => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  if (!zeroExAddresses) {\r\n    throw new UnsupportedChainId(chainId);\r\n  }\r\n  return zeroExAddresses.forwarder;\r\n};\r\n\r\nexport const getWrappedNativeToken = (\r\n  chainId: number,\r\n  addresses: ContractAddresses = defaultAddresses\r\n): string | null => {\r\n  const zeroExAddresses = getZeroExAddressesForChain(chainId, addresses);\r\n  return zeroExAddresses?.wrappedNativeToken ?? null;\r\n};\r\n","import { SupportedChainIdsV3 } from '../../sdk/v3/types';\r\n\r\nconst DEFAUTLT_GAS_BUFFER_MULTIPLES: { [chainId: number]: number } = {\r\n  [SupportedChainIdsV3.Polygon]: 1.5,\r\n  [SupportedChainIdsV3.PolygonMumbai]: 1.5,\r\n  [SupportedChainIdsV3.Kovan]: 1.5,\r\n};\r\n\r\nexport { DEFAUTLT_GAS_BUFFER_MULTIPLES };\r\n","export const sleep = (t: number) => {\r\n  return new Promise<void>((resolve) => {\r\n    const timeout = setTimeout(() => {\r\n      clearTimeout(timeout);\r\n      resolve();\r\n    }, t);\r\n  });\r\n};\r\n","import type { BaseProvider } from '@ethersproject/providers';\r\nimport type { Signer } from '@ethersproject/abstract-signer';\r\nimport invariant from 'tiny-invariant';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  buildOrder as _buildOrder,\r\n  signOrder as _signOrder,\r\n  fillSignedOrder as _fillSignedOrder,\r\n  approveAsset as _approveAsset,\r\n  verifyOrderSignature as _verifyOrderSignature,\r\n  getApprovalStatus as _getApprovalStatus,\r\n  cancelOrder as _cancelOrder,\r\n  cancelOrders as _cancelOrders,\r\n  estimateGasForFillOrder as _estimateGasForFillOrder,\r\n  estimateGasForApproval as _estimateGasForApproval,\r\n  cancelOrdersUpToNow as _cancelOrdersUpToNow,\r\n  getOrderInfo as _getOrderInfo,\r\n  getAssetsFromOrder as _getAssetsFromOrder,\r\n  hashOrder as _hashOrder,\r\n} from './pure';\r\nimport {\r\n  getEipDomain,\r\n  normalizeOrder as _normalizeOrder,\r\n} from '../../utils/v3/order';\r\nimport type {\r\n  ApprovalOverrides,\r\n  BuildOrderAdditionalConfig,\r\n  FillOrderOverrides,\r\n  INftSwapV3,\r\n} from './INftSwapV3';\r\nimport {\r\n  SupportedChainIdsV3,\r\n  EIP712_TYPES,\r\n  Order,\r\n  OrderInfoV3,\r\n  OrderStatusV3,\r\n  OrderStatusCodeLookup,\r\n  SignedOrder,\r\n  SupportedTokenTypes,\r\n  SwappableAsset,\r\n  AddressesForChainV3,\r\n  BigNumberish,\r\n  ERC20AssetDataSerialized,\r\n  AssetProxyId,\r\n  SigningOptionsV3,\r\n} from './types';\r\nimport {\r\n  ExchangeContract,\r\n  ExchangeContract__factory,\r\n  Forwarder__factory,\r\n} from '../../contracts';\r\nimport {\r\n  convertAssetsToInternalFormat,\r\n  convertAssetToInternalFormat,\r\n  decodeAssetData,\r\n} from '../../utils/v3/asset-data';\r\nimport {\r\n  getProxyAddressForErcType,\r\n  getForwarderAddress,\r\n  getWrappedNativeToken,\r\n} from '../../utils/v3/default-addresses';\r\nimport { DEFAUTLT_GAS_BUFFER_MULTIPLES } from '../../utils/v3/gas-buffer';\r\nimport { sleep } from '../../utils/sleep';\r\nimport addresses from './addresses.json';\r\nimport { PayableOverrides, TransactionOverrides } from '../common/types';\r\n\r\nexport interface NftSwapConfig {\r\n  exchangeContractAddress?: string;\r\n  erc20ProxyContractAddress?: string;\r\n  erc721ProxyContractAddress?: string;\r\n  erc1155ProxyContractAddress?: string;\r\n  forwarderContractAddress?: string;\r\n  wrappedNativeTokenContractAddress?: string;\r\n  gasBufferMultiples?: { [chainId: number]: number };\r\n}\r\n\r\n/**\r\n * NftSwap Convenience class to swap between ERC20, ERC721, and ERC1155. Primary entrypoint for swapping.\r\n */\r\nclass NftSwapV3 implements INftSwapV3 {\r\n  public provider: BaseProvider;\r\n  public signer: Signer | undefined;\r\n  public chainId: number;\r\n  public exchangeContract: ExchangeContract;\r\n  public exchangeContractAddress: string;\r\n  public erc20ProxyContractAddress: string;\r\n  public erc721ProxyContractAddress: string;\r\n  public erc1155ProxyContractAddress: string;\r\n  public wrappedNativeTokenContractAddress: string | null;\r\n  public forwarderContractAddress: string | null;\r\n  public gasBufferMultiples: { [chainId: number]: number } | null;\r\n\r\n  constructor(\r\n    provider: BaseProvider,\r\n    signer: Signer,\r\n    chainId?: number,\r\n    additionalConfig?: NftSwapConfig\r\n  ) {\r\n    this.provider = provider;\r\n    this.signer = signer;\r\n    this.chainId =\r\n      chainId ?? (this.provider._network.chainId as SupportedChainIdsV3);\r\n\r\n    const chainDefaultContractAddresses: AddressesForChainV3 | undefined =\r\n      addresses[this.chainId as SupportedChainIdsV3];\r\n\r\n    const zeroExExchangeContractAddress =\r\n      additionalConfig?.exchangeContractAddress ??\r\n      chainDefaultContractAddresses?.exchange;\r\n\r\n    warning(\r\n      chainDefaultContractAddresses,\r\n      `Default contract addresses missing for chain ${this.chainId}. Supply ExchangeContract and Asset Proxy contracts manually via additionalConfig argument`\r\n    );\r\n\r\n    this.exchangeContractAddress = zeroExExchangeContractAddress;\r\n\r\n    this.erc20ProxyContractAddress =\r\n      additionalConfig?.erc20ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC20, this.chainId);\r\n    this.erc721ProxyContractAddress =\r\n      additionalConfig?.erc721ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC721, this.chainId);\r\n    this.erc1155ProxyContractAddress =\r\n      additionalConfig?.erc1155ProxyContractAddress ??\r\n      getProxyAddressForErcType(SupportedTokenTypes.ERC1155, this.chainId);\r\n    this.forwarderContractAddress =\r\n      additionalConfig?.forwarderContractAddress ??\r\n      getForwarderAddress(this.chainId) ??\r\n      null;\r\n    this.wrappedNativeTokenContractAddress =\r\n      additionalConfig?.wrappedNativeTokenContractAddress ??\r\n      getWrappedNativeToken(this.chainId) ??\r\n      null;\r\n\r\n    invariant(\r\n      this.exchangeContractAddress,\r\n      '0x V3 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\r\n    );\r\n    warning(\r\n      this.erc20ProxyContractAddress,\r\n      'ERC20Proxy Contract Address not set, ERC20 swaps will not work'\r\n    );\r\n    warning(\r\n      this.erc721ProxyContractAddress,\r\n      'ERC721Proxy Contract Address not set, ERC721 swaps will not work'\r\n    );\r\n    warning(\r\n      this.erc1155ProxyContractAddress,\r\n      'ERC20Proxy Contract Address not set, ERC1155 swaps will not work'\r\n    );\r\n    warning(\r\n      this.forwarderContractAddress,\r\n      'Forwarder Contract Address not set, native token fills will not work'\r\n    );\r\n    warning(\r\n      this.wrappedNativeTokenContractAddress,\r\n      'WETH Contract Address not set, SDK cannot automatically check if order can be filled with native token'\r\n    );\r\n    warning(this.signer, 'No Signer provided; Read-only mode only.');\r\n\r\n    // Initialize Exchange contract so we can interact with it easily.\r\n    this.exchangeContract = ExchangeContract__factory.connect(\r\n      zeroExExchangeContractAddress,\r\n      signer ?? provider\r\n    );\r\n\r\n    this.gasBufferMultiples =\r\n      additionalConfig?.gasBufferMultiples ?? DEFAUTLT_GAS_BUFFER_MULTIPLES;\r\n  }\r\n\r\n  public cancelOrder = async (order: Order) => {\r\n    return _cancelOrder(this.exchangeContract, order);\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param order : 0x Order;\r\n   * @param timeoutInMs : Timeout in millisecond to give up listening for order fill\r\n   * @param throwIfStatusOtherThanFillableOrFilled : Option to throw if status changes from fillable to anything other than 'filled' (e.g 'cancelled')\r\n   * @returns OrderInfo if status change in order, or null if timed out\r\n   */\r\n  public waitUntilOrderFilledOrCancelled = async (\r\n    order: Order,\r\n    timeoutInMs: number = 60 * 1000,\r\n    pollOrderStatusFrequencyInMs: number = 10_000,\r\n    throwIfStatusOtherThanFillableOrFilled: boolean = false\r\n  ): Promise<OrderInfoV3 | null> => {\r\n    let settled = false;\r\n\r\n    const timeoutPromise = sleep(timeoutInMs).then((_) => null);\r\n\r\n    const orderStatusRefreshPromiseFn =\r\n      async (): Promise<OrderInfoV3 | null> => {\r\n        while (!settled) {\r\n          const orderInfo = await this.getOrderInfo(order);\r\n          if (orderInfo.orderStatus === OrderStatusV3.Fillable) {\r\n            await sleep(pollOrderStatusFrequencyInMs);\r\n            continue;\r\n          } else if (orderInfo.orderStatus === OrderStatusV3.FullyFilled) {\r\n            return orderInfo;\r\n          } else {\r\n            // expired, bad order, etc\r\n            if (throwIfStatusOtherThanFillableOrFilled) {\r\n              throw new Error(\r\n                OrderStatusCodeLookup[orderInfo.orderStatus] ??\r\n                  orderInfo.orderStatus ??\r\n                  'Unknown status'\r\n              );\r\n            }\r\n            return orderInfo;\r\n          }\r\n        }\r\n        return null;\r\n      };\r\n    const fillEventListenerFn = async () => {\r\n      // TODO(johnrjj)\r\n      await sleep(timeoutInMs * 2);\r\n      return null;\r\n    };\r\n\r\n    const orderStatusRefreshPromiseLoop: Promise<OrderInfoV3 | null> =\r\n      orderStatusRefreshPromiseFn();\r\n\r\n    const fillEventPromise: Promise<OrderInfoV3 | null> = fillEventListenerFn();\r\n\r\n    const orderInfo = await Promise.any([\r\n      timeoutPromise,\r\n      orderStatusRefreshPromiseLoop,\r\n      fillEventPromise,\r\n    ]);\r\n    settled = true;\r\n\r\n    return orderInfo;\r\n  };\r\n\r\n  public getOrderInfo = async (order: Order): Promise<OrderInfoV3> => {\r\n    return _getOrderInfo(this.exchangeContract, order);\r\n  };\r\n\r\n  public getOrderStatus = async (order: Order): Promise<OrderStatusV3> => {\r\n    const orderInfo = await this.getOrderInfo(order);\r\n    return orderInfo.orderStatus;\r\n  };\r\n\r\n  public awaitTransactionHash = async (txHash: string) => {\r\n    return this.provider.waitForTransaction(txHash);\r\n  };\r\n\r\n  public signOrder = async (\r\n    order: Order,\r\n    addressOfWalletSigningOrder: string,\r\n    signerOverride?: Signer,\r\n    signingOptions?: Partial<SigningOptionsV3>\r\n  ) => {\r\n    const signerToUser = signerOverride ?? this.signer;\r\n    if (!signerToUser) {\r\n      throw new Error('signOrder:Signer undefined');\r\n    }\r\n    return _signOrder(\r\n      order,\r\n      addressOfWalletSigningOrder,\r\n      signerToUser,\r\n      this.provider,\r\n      this.chainId,\r\n      this.exchangeContract.address,\r\n      signingOptions\r\n    );\r\n  };\r\n\r\n  public buildOrder = (\r\n    makerAssets: SwappableAsset[],\r\n    takerAssets: SwappableAsset[],\r\n    makerAddress: string,\r\n    userConfig?: Partial<BuildOrderAdditionalConfig>\r\n  ) => {\r\n    const defaultConfig = { chainId: this.chainId, makerAddress: makerAddress };\r\n    const config = { ...defaultConfig, ...userConfig };\r\n    return _buildOrder(\r\n      convertAssetsToInternalFormat(makerAssets),\r\n      convertAssetsToInternalFormat(takerAssets),\r\n      config\r\n    );\r\n  };\r\n\r\n  public loadApprovalStatus = async (\r\n    asset: SwappableAsset,\r\n    walletAddress: string\r\n  ) => {\r\n    // TODO(johnrjj) - Fix this...\r\n    const exchangeProxyAddressForAsset = getProxyAddressForErcType(\r\n      asset.type as SupportedTokenTypes,\r\n      this.chainId\r\n    );\r\n    const assetInternalFmt = convertAssetToInternalFormat(asset);\r\n    return _getApprovalStatus(\r\n      walletAddress,\r\n      exchangeProxyAddressForAsset,\r\n      assetInternalFmt,\r\n      this.provider\r\n    );\r\n  };\r\n\r\n  /**\r\n   * @param asset Asset in the SDK format\r\n   * @returns\r\n   */\r\n  public async approveTokenOrNftByAsset(\r\n    asset: SwappableAsset,\r\n    _walletAddress: string, // Remove in next release\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    otherOverrides?: Partial<ApprovalOverrides>\r\n  ) {\r\n    // TODO(johnrjj) - Look up via class fields instead...\r\n    const exchangeProxyAddressForAsset =\r\n      otherOverrides?.exchangeProxyContractAddressForAsset ??\r\n      getProxyAddressForErcType(\r\n        asset.type as SupportedTokenTypes,\r\n        this.chainId\r\n      );\r\n    const signerToUse = otherOverrides?.signer ?? this.signer;\r\n    if (!signerToUse) {\r\n      throw new Error('approveTokenOrNftByAsset:Signer null');\r\n    }\r\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\r\n    }\r\n    let gasBufferMultiple: number | undefined = undefined;\r\n    if (otherOverrides?.gasAmountBufferMultiple === null) {\r\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\r\n      gasBufferMultiple = undefined;\r\n    } else {\r\n      gasBufferMultiple =\r\n        otherOverrides?.gasAmountBufferMultiple ??\r\n        this.getGasMultipleForChainId(this.chainId);\r\n    }\r\n    let maybeCustomGasLimit: BigNumberish | undefined;\r\n    if (gasBufferMultiple) {\r\n      const estimatedGasAmount = await _estimateGasForApproval(\r\n        exchangeProxyAddressForAsset,\r\n        convertAssetToInternalFormat(asset),\r\n        signerToUse,\r\n        approvalTransactionOverrides ?? {},\r\n        otherOverrides?.approve ?? true\r\n      );\r\n      maybeCustomGasLimit = Math.floor(\r\n        estimatedGasAmount.toNumber() * gasBufferMultiple\r\n      );\r\n    }\r\n\r\n    return _approveAsset(\r\n      exchangeProxyAddressForAsset,\r\n      convertAssetToInternalFormat(asset),\r\n      signerToUse,\r\n      {\r\n        gasLimit: maybeCustomGasLimit,\r\n        ...approvalTransactionOverrides,\r\n      },\r\n      otherOverrides?.approve ?? true\r\n    );\r\n  }\r\n\r\n  public getOrderHash = (order: Order) => {\r\n    return _hashOrder(order, this.chainId, this.exchangeContract.address);\r\n  };\r\n\r\n  public getTypedData = (\r\n    chainId: number,\r\n    exchangeContractAddress: string,\r\n    order: Order\r\n  ) => {\r\n    const domain = getEipDomain(chainId, exchangeContractAddress);\r\n    const types = EIP712_TYPES;\r\n    const value = order;\r\n    return {\r\n      domain,\r\n      types,\r\n      value,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Decodes readable order data (maker and taker assets) from the Order's encoded asset data\r\n   * @param order : 0x Order (or Signed Order);\r\n   * @returns Maker and taker assets for the order\r\n   */\r\n  public getAssetsFromOrder = (order: Order) => {\r\n    return _getAssetsFromOrder(order);\r\n  };\r\n\r\n  public checkIfOrderCanBeFilledWithNativeToken = (\r\n    order: Order,\r\n    wrappedNativeTokenContractAddress: string | undefined = this\r\n      .wrappedNativeTokenContractAddress ?? undefined\r\n  ): boolean => {\r\n    warning(\r\n      this.wrappedNativeTokenContractAddress,\r\n      'Wrapped native token contract address not set. Cannot determine if order can be filled with native token'\r\n    );\r\n    const decodedAssetData = decodeAssetData(order.takerAssetData);\r\n\r\n    // Can only fill with native token when taker asset is ERC20. (Multiasset is not supported)\r\n    if (\r\n      decodedAssetData.assetProxyId.toLowerCase() !==\r\n      AssetProxyId.ERC20.toLowerCase()\r\n    ) {\r\n      return false;\r\n    }\r\n\r\n    // If we get this far, we have a single asset (non-multiasset) ERC20 for the taker token.\r\n    // Let's check if it is the wrapped native contract address for this chain (e.g. WETH on mainnet or rinkeby, WMATIC on polygon)\r\n    const erc20TokenAddress = (decodedAssetData as ERC20AssetDataSerialized)\r\n      .tokenAddress;\r\n    invariant(\r\n      erc20TokenAddress,\r\n      'ERC20 token address missing from detected ERC20 asset data'\r\n    );\r\n\r\n    return (\r\n      erc20TokenAddress.toLowerCase() ===\r\n      wrappedNativeTokenContractAddress?.toLowerCase()\r\n    );\r\n  };\r\n\r\n  public fillSignedOrder = async (\r\n    signedOrder: SignedOrder,\r\n    fillOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides: Partial<PayableOverrides> = {}\r\n  ) => {\r\n    const exchangeContract =\r\n      fillOverrides?.exchangeContract ?? this.exchangeContract;\r\n    let gasBufferMultiple: number | undefined = undefined;\r\n    if (fillOverrides?.gasAmountBufferMultiple === null) {\r\n      // keep gasBufferMultiple undefined, b/c user specifically specified null.\r\n      gasBufferMultiple = undefined;\r\n    } else {\r\n      gasBufferMultiple =\r\n        fillOverrides?.gasAmountBufferMultiple ??\r\n        this.getGasMultipleForChainId(this.chainId);\r\n    }\r\n    let maybeCustomGasLimit: BigNumberish | undefined;\r\n    if (gasBufferMultiple) {\r\n      const estimatedGasAmount = await _estimateGasForFillOrder(\r\n        signedOrder,\r\n        exchangeContract\r\n      );\r\n      // NOTE(johnrjj) - Underflow issues, so we convert to number. Gas amounts shouldn't overflow.\r\n      maybeCustomGasLimit = Math.floor(\r\n        estimatedGasAmount.toNumber() * gasBufferMultiple\r\n      );\r\n    }\r\n\r\n    const allTxOverrides: Partial<PayableOverrides> = {\r\n      gasLimit: maybeCustomGasLimit,\r\n      ...transactionOverrides,\r\n    };\r\n\r\n    if (fillOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken) {\r\n      const eligibleForNativeTokenFill =\r\n        this.checkIfOrderCanBeFilledWithNativeToken(signedOrder);\r\n      warning(\r\n        eligibleForNativeTokenFill,\r\n        `Order ineligible for native token fill, fill will fail.`\r\n      );\r\n      invariant(\r\n        this.forwarderContractAddress,\r\n        'Forwarder contract address null, cannot fill order in native token'\r\n      );\r\n      const forwarderContract = Forwarder__factory.connect(\r\n        this.forwarderContractAddress,\r\n        this.signer ?? this.provider\r\n      );\r\n      const amountOfEthToFillWith = signedOrder.takerAssetAmount;\r\n      return forwarderContract.marketBuyOrdersWithEth(\r\n        [signedOrder],\r\n        signedOrder.makerAssetAmount,\r\n        [signedOrder.signature],\r\n        [],\r\n        [],\r\n        {\r\n          value: amountOfEthToFillWith,\r\n          ...allTxOverrides,\r\n        }\r\n      );\r\n    }\r\n\r\n    return _fillSignedOrder(signedOrder, exchangeContract, allTxOverrides);\r\n  };\r\n\r\n  private getGasMultipleForChainId = (chainId: number): number | undefined => {\r\n    if (this.gasBufferMultiples) {\r\n      return this.gasBufferMultiples[this.chainId];\r\n    }\r\n    return undefined;\r\n  };\r\n\r\n  public normalizeOrder = (order: Order): Order => {\r\n    const normalizedOrder = _normalizeOrder(order);\r\n    return normalizedOrder as Order;\r\n  };\r\n\r\n  public normalizeSignedOrder = (order: SignedOrder): SignedOrder => {\r\n    const normalizedOrder = _normalizeOrder(order);\r\n    return normalizedOrder as SignedOrder;\r\n  };\r\n\r\n  public verifyOrderSignature = (\r\n    order: Order,\r\n    signature: string,\r\n    chainId: number,\r\n    exchangeContractAddress: string\r\n  ) => {\r\n    return _verifyOrderSignature(\r\n      order,\r\n      signature,\r\n      chainId,\r\n      exchangeContractAddress\r\n    );\r\n  };\r\n}\r\n\r\nexport { NftSwapV3 };\r\n","export const EIP712_DOMAIN_PARAMETERS = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'version', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n];\r\n\r\nexport const ERC721ORDER_STRUCT_NAME = 'ERC721Order';\r\n\r\nexport const ERC721ORDER_STRUCT_ABI = [\r\n  { type: 'uint8', name: 'direction' },\r\n  { type: 'address', name: 'maker' },\r\n  { type: 'address', name: 'taker' },\r\n  { type: 'uint256', name: 'expiry' },\r\n  { type: 'uint256', name: 'nonce' },\r\n  { type: 'address', name: 'erc20Token' },\r\n  { type: 'uint256', name: 'erc20TokenAmount' },\r\n  { type: 'Fee[]', name: 'fees' },\r\n  { type: 'address', name: 'erc721Token' },\r\n  { type: 'uint256', name: 'erc721TokenId' },\r\n  { type: 'Property[]', name: 'erc721TokenProperties' },\r\n];\r\n\r\nexport const EIP1155_DOMAIN_PARAMETERS = [\r\n  { name: 'name', type: 'string' },\r\n  { name: 'version', type: 'string' },\r\n  { name: 'chainId', type: 'uint256' },\r\n  { name: 'verifyingContract', type: 'address' },\r\n];\r\n\r\nexport const ERC1155ORDER_STRUCT_NAME = 'ERC1155Order';\r\nexport const ERC1155ORDER_STRUCT_ABI = [\r\n  { type: 'uint8', name: 'direction' },\r\n  { type: 'address', name: 'maker' },\r\n  { type: 'address', name: 'taker' },\r\n  { type: 'uint256', name: 'expiry' },\r\n  { type: 'uint256', name: 'nonce' },\r\n  { type: 'address', name: 'erc20Token' },\r\n  { type: 'uint256', name: 'erc20TokenAmount' },\r\n  { type: 'Fee[]', name: 'fees' },\r\n  { type: 'address', name: 'erc1155Token' },\r\n  { type: 'uint256', name: 'erc1155TokenId' },\r\n  { type: 'Property[]', name: 'erc1155TokenProperties' },\r\n  { type: 'uint128', name: 'erc1155TokenAmount' },\r\n];\r\n\r\nexport const FEE_ABI = [\r\n  { type: 'address', name: 'recipient' },\r\n  { type: 'uint256', name: 'amount' },\r\n  { type: 'bytes', name: 'feeData' },\r\n];\r\n\r\nexport const PROPERTY_ABI = [\r\n  { type: 'address', name: 'propertyValidator' },\r\n  { type: 'bytes', name: 'propertyData' },\r\n];\r\n\r\nexport const ETH_ADDRESS_AS_ERC20 =\r\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n\r\nexport const NATIVE_TOKEN_ADDRESS_AS_ERC20 =\r\n  '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee';\r\n","import { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport { BigNumber } from '@ethersproject/bignumber';\r\nimport { hexDataLength, hexDataSlice } from '@ethersproject/bytes';\r\nimport type { BaseProvider } from '@ethersproject/providers';\r\nimport type { ContractTransaction } from '@ethersproject/contracts';\r\nimport getUnixTime from 'date-fns/getUnixTime';\r\nimport { v4 } from 'uuid';\r\nimport warning from 'tiny-warning';\r\nimport invariant from 'tiny-invariant';\r\nimport padEnd from 'lodash/padEnd';\r\nimport padStart from 'lodash/padStart';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC20__factory,\r\n  ERC721__factory,\r\n} from '../../contracts';\r\nimport { NULL_ADDRESS } from '../../utils/eth';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport type {\r\n  ECSignature,\r\n  ERC721OrderStruct,\r\n  ERC721OrderStructSerialized,\r\n  ERC1155OrderStruct,\r\n  ERC1155OrderStructSerialized,\r\n  NftOrderV4,\r\n  OrderStructOptionsCommon,\r\n  OrderStructOptionsCommonStrict,\r\n  SignedNftOrderV4,\r\n  SignedNftOrderV4Serialized,\r\n  SwappableAssetV4,\r\n  UserFacingERC20AssetDataSerializedV4,\r\n  UserFacingERC721AssetDataSerializedV4,\r\n  UserFacingERC1155AssetDataSerializedV4,\r\n  ApprovalOverrides,\r\n} from './types';\r\nimport { ApprovalStatus, TransactionOverrides } from '../common/types';\r\nimport {\r\n  ERC721ORDER_STRUCT_NAME,\r\n  ERC721ORDER_STRUCT_ABI,\r\n  ERC1155ORDER_STRUCT_NAME,\r\n  ERC1155ORDER_STRUCT_ABI,\r\n  FEE_ABI,\r\n  PROPERTY_ABI,\r\n  ETH_ADDRESS_AS_ERC20,\r\n} from './constants';\r\n\r\nexport const signOrderWithEoaWallet = async (\r\n  order: NftOrderV4,\r\n  signer: TypedDataSigner,\r\n  chainId: number,\r\n  exchangeContractAddress: string\r\n) => {\r\n  if ((order as ERC1155OrderStruct).erc1155Token) {\r\n    const domain = {\r\n      chainId: chainId,\r\n      verifyingContract: exchangeContractAddress,\r\n      name: 'ZeroEx',\r\n      version: '1.0.0',\r\n    };\r\n    const types = {\r\n      [ERC1155ORDER_STRUCT_NAME]: ERC1155ORDER_STRUCT_ABI,\r\n      Fee: FEE_ABI,\r\n      Property: PROPERTY_ABI,\r\n    };\r\n    const value = order;\r\n\r\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n      domain,\r\n      types,\r\n      value\r\n    );\r\n\r\n    return rawSignatureFromEoaWallet;\r\n  }\r\n\r\n  if ((order as ERC721OrderStruct).erc721Token) {\r\n    const domain = {\r\n      chainId: chainId,\r\n      verifyingContract: exchangeContractAddress,\r\n      name: 'ZeroEx',\r\n      version: '1.0.0',\r\n    };\r\n    const types = {\r\n      [ERC721ORDER_STRUCT_NAME]: ERC721ORDER_STRUCT_ABI,\r\n      Fee: FEE_ABI,\r\n      Property: PROPERTY_ABI,\r\n    };\r\n    const value = order;\r\n\r\n    const rawSignatureFromEoaWallet = await signer._signTypedData(\r\n      domain,\r\n      types,\r\n      value\r\n    );\r\n\r\n    return rawSignatureFromEoaWallet;\r\n  }\r\n\r\n  warning(!order, 'Unknown order type');\r\n  throw new Error(`Unknown order type`);\r\n};\r\n\r\n/**\r\n *\r\n * @param walletAddress Owner of the asset\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param provider\r\n * @returns\r\n */\r\nexport const getApprovalStatus = async (\r\n  walletAddress: string,\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: SwappableAssetV4,\r\n  provider: BaseProvider\r\n): Promise<ApprovalStatus> => {\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      // ETH (ERC20 representation) requires no approvals, we can shortcut here\r\n      if (asset.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\r\n        return {\r\n          contractApproved: true,\r\n        };\r\n      }\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n      const erc20AllowanceBigNumber: BigNumber = await erc20.allowance(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      // Weird issue with BigNumber and approvals...need to look into it, adding buffer.\r\n      const MAX_APPROVAL_WITH_BUFFER = BigNumber.from(\r\n        MAX_APPROVAL.toString()\r\n      ).sub('100000000000000000');\r\n      const approvedForMax = erc20AllowanceBigNumber.gte(\r\n        MAX_APPROVAL_WITH_BUFFER\r\n      );\r\n      return {\r\n        contractApproved: approvedForMax,\r\n      };\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n      const erc721ApprovalForAllPromise = erc721.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      const erc721ApprovedAddressForIdPromise = erc721.getApproved(\r\n        asset.tokenId\r\n      );\r\n      const [erc721ApprovalForAll, erc721ApprovedAddressForId] =\r\n        await Promise.all([\r\n          erc721ApprovalForAllPromise,\r\n          erc721ApprovedAddressForIdPromise,\r\n        ]);\r\n      const tokenIdApproved =\r\n        erc721ApprovedAddressForId.toLowerCase() ===\r\n        exchangeProxyAddressForAsset.toLowerCase();\r\n      return {\r\n        contractApproved: erc721ApprovalForAll ?? false,\r\n        tokenIdApproved: tokenIdApproved,\r\n      };\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n      const erc1155ApprovalForAll = await erc1155.isApprovedForAll(\r\n        walletAddress,\r\n        exchangeProxyAddressForAsset\r\n      );\r\n      return {\r\n        contractApproved: erc1155ApprovalForAll ?? false,\r\n      };\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Some arbitrarily high number.\r\n// TODO(johnrjj) - Support custom ERC20 approval amounts\r\nexport const MAX_APPROVAL = BigNumber.from(2).pow(118);\r\n\r\n/**\r\n * @param exchangeProxyAddressForAsset Exchange Proxy address specific to the ERC type (e.g. use the 0x ERC721 Proxy if you're using a 721 asset). This is the address that will need approval & does the spending/swap.\r\n * @param asset\r\n * @param signer Signer, must be a signer not a provider, as signed transactions are needed to approve\r\n * @param approve Optional, can specify to unapprove asset when set to false\r\n * @returns\r\n */\r\nexport const approveAsset = async (\r\n  exchangeProxyAddressForAsset: string,\r\n  asset: SwappableAssetV4,\r\n  signer: Signer,\r\n  txOverrides: Partial<TransactionOverrides> = {},\r\n  approvalOrderrides?: Partial<ApprovalOverrides>\r\n): Promise<ContractTransaction> => {\r\n  const approve = approvalOrderrides?.approve ?? true;\r\n\r\n  switch (asset.type) {\r\n    case 'ERC20':\r\n      const erc20 = ERC20__factory.connect(asset.tokenAddress, signer);\r\n      const erc20ApprovalTxPromise = erc20.approve(\r\n        exchangeProxyAddressForAsset,\r\n        approve ? MAX_APPROVAL.toString() : 0,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc20ApprovalTxPromise;\r\n    case 'ERC721':\r\n      const erc721 = ERC721__factory.connect(asset.tokenAddress, signer);\r\n      // If consumer prefers only to approve the tokenId, only approve tokenId\r\n      if (approvalOrderrides?.approvalOnlyTokenIdIfErc721) {\r\n        const erc721ApprovalForOnlyTokenId = erc721.approve(\r\n          exchangeProxyAddressForAsset,\r\n          asset.tokenId,\r\n          {\r\n            ...txOverrides,\r\n          }\r\n        );\r\n        return erc721ApprovalForOnlyTokenId;\r\n      }\r\n      // Otherwise default to approving entire contract\r\n      const erc721ApprovalForAllPromise = erc721.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc721ApprovalForAllPromise;\r\n    case 'ERC1155':\r\n      const erc1155 = ERC1155__factory.connect(asset.tokenAddress, signer);\r\n      // ERC1155s can only approval all\r\n      const erc1155ApprovalForAll = await erc1155.setApprovalForAll(\r\n        exchangeProxyAddressForAsset,\r\n        approve,\r\n        {\r\n          ...txOverrides,\r\n        }\r\n      );\r\n      return erc1155ApprovalForAll;\r\n    default:\r\n      throw new UnexpectedAssetTypeError((asset as any).type);\r\n  }\r\n};\r\n\r\n// Parse a hex signature returned by an RPC call into an `ECSignature`.\r\nexport function parseRawSignature(rawSignature: string): ECSignature {\r\n  const hexSize = hexDataLength(rawSignature);\r\n  // if (hexUtils.size(rpcSig) !== 65) {\r\n  //     throw new Error(`Invalid RPC signature length: \"${rpcSig}\"`);\r\n  // }\r\n  if (hexSize !== 65) {\r\n    throw new Error(\r\n      `Invalid signature length, expected 65, got ${hexSize}.\\n\"Raw signature: ${rawSignature}\"`\r\n    );\r\n  }\r\n  // Some providers encode V as 0,1 instead of 27,28.\r\n  const VALID_V_VALUES = [0, 1, 27, 28];\r\n  // Some providers return the signature packed as V,R,S and others R,S,V.\r\n  // Try to guess which encoding it is (with a slight preference for R,S,V).\r\n  // let v = parseInt(rpcSig.slice(-2), 16);\r\n  let v = parseInt(rawSignature.slice(-2), 16);\r\n\r\n  if (VALID_V_VALUES.includes(v)) {\r\n    // Format is R,S,V\r\n    v = v >= 27 ? v : v + 27;\r\n    return {\r\n      // r: hexDataSlice.slice(rpcSig, 0, 32),\r\n      // s: hexUtils.slice(rpcSig, 32, 64),\r\n      r: hexDataSlice(rawSignature, 0, 32),\r\n      s: hexDataSlice(rawSignature, 32, 64),\r\n      v,\r\n    };\r\n  }\r\n  // Format should be V,R,S\r\n  // v = parseInt(rpcSig.slice(2, 4), 16);\r\n  v = parseInt(rawSignature.slice(2, 4), 16);\r\n  if (!VALID_V_VALUES.includes(v)) {\r\n    throw new Error(\r\n      `Cannot determine RPC signature layout from V value: \"${rawSignature}\"`\r\n    );\r\n  }\r\n  v = v >= 27 ? v : v + 27;\r\n  return {\r\n    v,\r\n    r: hexDataSlice(rawSignature, 1, 33),\r\n    s: hexDataSlice(rawSignature, 33, 65),\r\n  };\r\n}\r\n\r\nexport const INFINITE_EXPIRATION_TIMESTAMP_SEC = BigNumber.from(2524604400);\r\n\r\nexport const generateErc721Order = (\r\n  nft: UserFacingERC721AssetDataSerializedV4,\r\n  erc20: UserFacingERC20AssetDataSerializedV4,\r\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\r\n): ERC721OrderStructSerialized => {\r\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\r\n  if (orderData.expiry) {\r\n    // If number is provided, assume given as unix timestamp\r\n    if (typeof orderData.expiry === 'number') {\r\n      expiry = orderData.expiry.toString();\r\n    } else {\r\n      // If date is provided, convert to unix timestamp\r\n      expiry = getUnixTime(orderData.expiry).toString();\r\n    }\r\n  }\r\n  const erc721Order: ERC721OrderStructSerialized = {\r\n    erc721Token: nft.tokenAddress.toLowerCase(),\r\n    erc721TokenId: nft.tokenId,\r\n    direction: parseInt(orderData.direction.toString()), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\r\n    erc20Token: erc20.tokenAddress.toLowerCase(),\r\n    erc20TokenAmount: erc20.amount,\r\n    maker: orderData.maker.toLowerCase(),\r\n    // Defaults not required...\r\n    erc721TokenProperties:\r\n      orderData.tokenProperties?.map((property) => ({\r\n        propertyData: property.propertyData,\r\n        propertyValidator: property.propertyValidator,\r\n      })) ?? [],\r\n    fees:\r\n      orderData.fees?.map((x) => {\r\n        return {\r\n          amount: x.amount.toString(),\r\n          recipient: x.recipient.toLowerCase(),\r\n          feeData: x.feeData?.toString() ?? '0x',\r\n        };\r\n      }) ?? [],\r\n    expiry: expiry,\r\n    nonce:\r\n      orderData.nonce?.toString() ??\r\n      generateRandomV4OrderNonce(orderData.appId),\r\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\r\n  };\r\n\r\n  return erc721Order;\r\n};\r\n\r\nexport const generateErc1155Order = (\r\n  nft: UserFacingERC1155AssetDataSerializedV4,\r\n  erc20: UserFacingERC20AssetDataSerializedV4,\r\n  orderData: Partial<OrderStructOptionsCommon> & OrderStructOptionsCommonStrict\r\n): ERC1155OrderStructSerialized => {\r\n  let expiry = INFINITE_EXPIRATION_TIMESTAMP_SEC.toString();\r\n  if (orderData.expiry) {\r\n    // If number is provided, assume given as unix timestamp\r\n    if (typeof orderData.expiry === 'number') {\r\n      expiry = orderData.expiry.toString();\r\n    } else {\r\n      // If date is provided, convert to unix timestamp\r\n      expiry = getUnixTime(orderData.expiry).toString();\r\n    }\r\n  }\r\n  const erc1155Order: ERC1155OrderStructSerialized = {\r\n    erc1155Token: nft.tokenAddress.toLowerCase(),\r\n    erc1155TokenId: nft.tokenId,\r\n    erc1155TokenAmount: nft.amount ?? '1',\r\n    direction: parseInt(orderData.direction.toString(10)), // KLUDGE(johnrjj) - There's some footgun here when only doing orderData.direction.toString(), need to parseInt it\r\n    erc20Token: erc20.tokenAddress.toLowerCase(),\r\n    erc20TokenAmount: erc20.amount,\r\n    maker: orderData.maker.toLowerCase(),\r\n    // Defaults not required...\r\n    erc1155TokenProperties:\r\n      orderData.tokenProperties?.map((property) => ({\r\n        propertyData: property.propertyData.toString(),\r\n        propertyValidator: property.propertyValidator,\r\n      })) ?? [],\r\n    fees:\r\n      orderData.fees?.map((fee) => {\r\n        return {\r\n          amount: fee.amount.toString(),\r\n          recipient: fee.recipient.toLowerCase(),\r\n          feeData: fee.feeData?.toString() ?? '0x',\r\n        };\r\n      }) ?? [],\r\n    expiry: expiry,\r\n    nonce:\r\n      orderData.nonce?.toString() ??\r\n      generateRandomV4OrderNonce(orderData.appId),\r\n    taker: orderData.taker?.toLowerCase() ?? NULL_ADDRESS,\r\n  };\r\n\r\n  return erc1155Order;\r\n};\r\n\r\n// Number of digits in base 10 128bit nonce\r\n// floor(log_10(2^128 - 1)) + 1\r\nexport const ONE_TWENTY_EIGHT_BIT_LENGTH = 39;\r\n\r\n// Max nonce digit length in base 10\r\n// floor(log_10(2^256 - 1)) + 1\r\nexport const TWO_FIFTY_SIX_BIT_LENGTH = 78;\r\n\r\nconst checkIfStringContainsOnlyNumbers = (val: string) => {\r\n  const onlyNumbers = /^\\d+$/.test(val);\r\n  return onlyNumbers;\r\n};\r\n\r\nexport const RESERVED_APP_ID_PREFIX = '1001';\r\nconst RESERVED_APP_ID_PREFIX_DIGITS = RESERVED_APP_ID_PREFIX.length;\r\n\r\nexport const DEFAULT_APP_ID = '314159';\r\n\r\nexport const verifyAppIdOrThrow = (appId: string) => {\r\n  const isCorrectLength =\r\n    appId.length <= ONE_TWENTY_EIGHT_BIT_LENGTH - RESERVED_APP_ID_PREFIX_DIGITS;\r\n  const hasOnlyNumbers = checkIfStringContainsOnlyNumbers(appId);\r\n  invariant(isCorrectLength, 'appId must be 39 digits or less');\r\n  invariant(\r\n    hasOnlyNumbers,\r\n    'appId must be numeric only (no alpha or special characters, only numbers)'\r\n  );\r\n};\r\n\r\n/**\r\n * Generates a 256bit nonce.\r\n * The format:\r\n *   First 128bits:  ${SDK_PREFIX}${APP_ID}000000 (right padded zeroes to fill)\r\n *   Second 128bits: ${RANDOM_GENERATED_128BIT_ORDER_HASH}\r\n * @returns 128bit nonce as string (0x orders can handle up to 256 bit nonce)\r\n */\r\nexport const generateRandomV4OrderNonce = (\r\n  appId: string = DEFAULT_APP_ID\r\n): string => {\r\n  if (appId) {\r\n    verifyAppIdOrThrow(appId);\r\n  }\r\n  const order128 = padStart(\r\n    generateRandom128BitNumber(),\r\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\r\n    '0'\r\n  );\r\n  const appId128 = padEnd(\r\n    `${RESERVED_APP_ID_PREFIX}${appId}`,\r\n    ONE_TWENTY_EIGHT_BIT_LENGTH,\r\n    '0'\r\n  );\r\n  const final256BitNonce = `${appId128}${order128}`;\r\n  invariant(\r\n    final256BitNonce.length <= TWO_FIFTY_SIX_BIT_LENGTH,\r\n    'Invalid nonce size'\r\n  );\r\n  return final256BitNonce;\r\n};\r\n\r\n// uuids are 128bits\r\nexport const generateRandom128BitNumber = (base = 10): string => {\r\n  const hex = '0x' + v4().replace(/-/g, '');\r\n  const value = BigInt(hex);\r\n  const valueBase10String = value.toString(base); // don't convert this to a number, will lose precision\r\n  return valueBase10String;\r\n};\r\n\r\nexport const serializeNftOrder = (\r\n  signedOrder: SignedNftOrderV4\r\n): SignedNftOrderV4Serialized => {\r\n  if ('erc721Token' in signedOrder) {\r\n    return {\r\n      ...signedOrder,\r\n      direction: parseInt(signedOrder.direction.toString()),\r\n      expiry: signedOrder.expiry.toString(),\r\n      nonce: signedOrder.nonce.toString(),\r\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\r\n      fees: signedOrder.fees.map((fee) => ({\r\n        ...fee,\r\n        amount: fee.amount.toString(),\r\n        feeData: fee.feeData.toString(),\r\n      })),\r\n      erc721TokenId: signedOrder.erc721TokenId.toString(),\r\n    };\r\n  } else if ('erc1155Token' in signedOrder) {\r\n    return {\r\n      ...signedOrder,\r\n      direction: parseInt(signedOrder.direction.toString()),\r\n      expiry: signedOrder.expiry.toString(),\r\n      nonce: signedOrder.nonce.toString(),\r\n      erc20TokenAmount: signedOrder.erc20TokenAmount.toString(),\r\n      fees: signedOrder.fees.map((fee) => ({\r\n        ...fee,\r\n        amount: fee.amount.toString(),\r\n        feeData: fee.feeData.toString(),\r\n      })),\r\n      erc1155TokenAmount: signedOrder.erc1155TokenAmount.toString(),\r\n      erc1155TokenId: signedOrder.erc1155TokenId.toString(),\r\n    };\r\n  } else {\r\n    console.log(\r\n      'unknown order format type (not erc721 and not erc1155',\r\n      signedOrder\r\n    );\r\n    throw new Error('Unknown asset type');\r\n  }\r\n};\r\n","export enum TradeDirection {\r\n  /**\r\n   * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\r\n   */\r\n  SellNFT = 0,\r\n  /**\r\n   * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\r\n   */\r\n  BuyNFT = 1,\r\n}\r\n\r\nexport enum OrderStatusV4 {\r\n  Invalid = 0,\r\n  Fillable = 1,\r\n  Unfillable = 2,\r\n  Expired = 3,\r\n}\r\n\r\nexport type DirectionMap = {\r\n  [key in TradeDirection]: 'buy' | 'sell' | undefined;\r\n};\r\n\r\n/**\r\n * Buy orders are where direction is set to TradeDirection.BUY_NFT, which indicates that a maker wishes to buy an ERC721 token that they do not possess.\r\n * Sell orders are orders where direction is set to TradeDirection.SELL_NFT, which indicates that a maker wishes to sell an ERC721 token that they possess.\r\n */\r\nexport const DIRECTION_MAPPING: DirectionMap = {\r\n  [TradeDirection.BuyNFT]: 'buy',\r\n  [TradeDirection.SellNFT]: 'sell',\r\n};\r\n","export const ERC721_TRANSFER_FROM_DATA = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC721Token',\r\n            name: 'erc721Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc721TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc721TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC721Order',\r\n        name: 'order',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'safeTransferFromErc721Data',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n\r\nexport const ERC1155_TRANSFER_FROM_DATA = [\r\n  {\r\n    inputs: [\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibNFTOrder.TradeDirection',\r\n            name: 'direction',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'maker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'address',\r\n            name: 'taker',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'expiry',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'nonce',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            internalType: 'contract IERC20TokenV06',\r\n            name: 'erc20Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc20TokenAmount',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'address',\r\n                name: 'recipient',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'uint256',\r\n                name: 'amount',\r\n                type: 'uint256',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'feeData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Fee[]',\r\n            name: 'fees',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'contract IERC1155Token',\r\n            name: 'erc1155Token',\r\n            type: 'address',\r\n          },\r\n          {\r\n            internalType: 'uint256',\r\n            name: 'erc1155TokenId',\r\n            type: 'uint256',\r\n          },\r\n          {\r\n            components: [\r\n              {\r\n                internalType: 'contract IPropertyValidator',\r\n                name: 'propertyValidator',\r\n                type: 'address',\r\n              },\r\n              {\r\n                internalType: 'bytes',\r\n                name: 'propertyData',\r\n                type: 'bytes',\r\n              },\r\n            ],\r\n            internalType: 'struct LibNFTOrder.Property[]',\r\n            name: 'erc1155TokenProperties',\r\n            type: 'tuple[]',\r\n          },\r\n          {\r\n            internalType: 'uint128',\r\n            name: 'erc1155TokenAmount',\r\n            type: 'uint128',\r\n          },\r\n        ],\r\n        internalType: 'struct LibNFTOrder.ERC1155Order[]',\r\n        name: 'sellOrders',\r\n        type: 'tuple[]',\r\n      },\r\n      {\r\n        components: [\r\n          {\r\n            internalType: 'enum LibSignature.SignatureType',\r\n            name: 'signatureType',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'uint8',\r\n            name: 'v',\r\n            type: 'uint8',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 'r',\r\n            type: 'bytes32',\r\n          },\r\n          {\r\n            internalType: 'bytes32',\r\n            name: 's',\r\n            type: 'bytes32',\r\n          },\r\n        ],\r\n        internalType: 'struct LibSignature.Signature',\r\n        name: 'signature',\r\n        type: 'tuple',\r\n      },\r\n      {\r\n        name: 'unwrapNativeToken',\r\n        type: 'bool',\r\n      },\r\n    ],\r\n    name: 'safeTransferFromErc1155Data',\r\n    outputs: [],\r\n    stateMutability: 'view',\r\n    type: 'function',\r\n  },\r\n];\r\n","import unfetch from 'isomorphic-unfetch';\r\nimport { stringify } from 'query-string';\r\nimport type { SignedNftOrderV4, SignedNftOrderV4Serialized } from './types';\r\nimport { serializeNftOrder } from './pure';\r\n\r\nexport const ORDERBOOK_API_ROOT_URL_PRODUCTION = 'https://api.trader.xyz';\r\n\r\nexport interface OrderbookRequestOptions {\r\n  rootUrl: string;\r\n}\r\n\r\nexport interface PostOrderRequestPayload {\r\n  order: SignedNftOrderV4Serialized;\r\n  chainId: string;\r\n  metadata?: Record<string, string>;\r\n}\r\n\r\nexport interface PostOrderResponsePayload {\r\n  erc20Token: string;\r\n  erc20TokenAmount: string;\r\n  nftToken: string;\r\n  nftTokenId: string;\r\n  nftTokenAmount: string;\r\n  nftType: string;\r\n  sellOrBuyNft: 'buy' | 'sell';\r\n  chainId: string;\r\n  order: SignedNftOrderV4Serialized;\r\n  metadata: Record<string, string> | null;\r\n}\r\n\r\nexport interface SearchOrdersResponsePayload {\r\n  orders: Array<PostOrderResponsePayload>;\r\n}\r\n\r\nconst postOrderToOrderbook = async (\r\n  signedOrder: SignedNftOrderV4,\r\n  chainId: string | number,\r\n  metadata: Record<string, string> = {},\r\n  requestOptions?: Partial<OrderbookRequestOptions>,\r\n  fetchFn: typeof unfetch = unfetch\r\n): Promise<PostOrderResponsePayload> => {\r\n  const payload: PostOrderRequestPayload = {\r\n    order: serializeNftOrder(signedOrder),\r\n    chainId: chainId.toString(10),\r\n    metadata,\r\n  };\r\n\r\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n  const orderPostResult: PostOrderResponsePayload = await fetchFn(\r\n    `${rootUrl}/orderbook/order`,\r\n    {\r\n      method: 'post',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(payload),\r\n    }\r\n  )\r\n    .then(async (res) => {\r\n      if (!res.ok) {\r\n        throw await res.json();\r\n      }\r\n      if (res.status >= 300) {\r\n        throw await res.json();\r\n      }\r\n      return res.json();\r\n    })\r\n    .catch((err) => {\r\n      // err is not a promise\r\n      throw err;\r\n    });\r\n\r\n  return orderPostResult;\r\n};\r\n\r\n/**\r\n * Available query parameters for searching the orderbook\r\n */\r\nexport interface SearchOrdersParams {\r\n  nftTokenId: string | string[];\r\n  erc20Token: string | string[];\r\n  nftToken: string | string[];\r\n  nftType: 'ERC721' | 'ERC1155';\r\n  chainId: string | number | string[] | number[];\r\n  maker: string;\r\n  taker: string;\r\n  nonce: string | string[];\r\n  offset: string | number;\r\n  limit: string | number;\r\n  sellOrBuyNft: 'sell' | 'buy';\r\n  direction: '0' | '1';\r\n  // Defaults to only 'open' orders\r\n  status: 'open' | 'filled' | 'expired' | 'cancelled' | 'all';\r\n  visibility: 'public' | 'private';\r\n  valid: 'valid' | 'all';\r\n}\r\n\r\n/**\r\n * Search through the public hosted orderbook\r\n * @param filters Optional query param filters\r\n * @param requestOptions Fetch options/overrides\r\n * @param fetchFn Optional fetch function override. Uses unfetch by default.\r\n * @returns\r\n */\r\nconst searchOrderbook = async (\r\n  filters?: Partial<SearchOrdersParams>,\r\n  requestOptions?: Partial<OrderbookRequestOptions>,\r\n  fetchFn: typeof unfetch = unfetch\r\n): Promise<SearchOrdersResponsePayload> => {\r\n  // https://github.com/sindresorhus/query-string#arrayformat\r\n  const stringifiedQueryParams = stringify(filters ?? {}, {\r\n    arrayFormat: 'none',\r\n  });\r\n\r\n  let rootUrl = requestOptions?.rootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n  const findOrdersResult = await fetchFn(\r\n    `${rootUrl}/orderbook/orders?${stringifiedQueryParams}`\r\n  )\r\n    .then(async (res) => {\r\n      if (!res.ok) {\r\n        throw await res.json();\r\n      }\r\n      if (res.status >= 300) {\r\n        throw await res.json();\r\n      }\r\n      return res.json();\r\n    })\r\n    .catch((err) => {\r\n      // err is not a promise\r\n      throw err;\r\n    });\r\n\r\n  return findOrdersResult;\r\n};\r\n\r\nexport { postOrderToOrderbook, searchOrderbook };\r\n","import type { Signer, TypedDataSigner } from '@ethersproject/abstract-signer';\r\nimport type {\r\n  BaseProvider,\r\n  TransactionReceipt,\r\n} from '@ethersproject/providers';\r\nimport { BigNumber, BigNumberish, ContractTransaction } from 'ethers';\r\nimport { Interface } from '@ethersproject/abi';\r\nimport invariant from 'tiny-invariant';\r\nimport warning from 'tiny-warning';\r\nimport {\r\n  ERC1155__factory,\r\n  ERC721__factory,\r\n  ERC20__factory,\r\n  IZeroEx,\r\n  IZeroEx__factory,\r\n} from '../../contracts';\r\nimport type {\r\n  ApprovalStatus,\r\n  BaseNftSwap,\r\n  PayableOverrides,\r\n  TransactionOverrides,\r\n} from '../common/types';\r\nimport { UnexpectedAssetTypeError } from '../error';\r\nimport {\r\n  approveAsset,\r\n  DEFAULT_APP_ID,\r\n  generateErc1155Order,\r\n  generateErc721Order,\r\n  getApprovalStatus,\r\n  parseRawSignature,\r\n  signOrderWithEoaWallet,\r\n  verifyAppIdOrThrow,\r\n} from './pure';\r\nimport type {\r\n  AddressesForChainV4,\r\n  ApprovalOverrides,\r\n  ERC721OrderStruct,\r\n  FillOrderOverrides,\r\n  NftOrderV4,\r\n  NftOrderV4Serialized,\r\n  OrderStructOptionsCommonStrict,\r\n  SignedERC1155OrderStruct,\r\n  SignedERC1155OrderStructSerialized,\r\n  SignedERC721OrderStruct,\r\n  SignedERC721OrderStructSerialized,\r\n  SignedNftOrderV4,\r\n  SigningOptionsV4,\r\n  SwappableAssetV4,\r\n  UserFacingERC1155AssetDataSerializedV4,\r\n  UserFacingERC20AssetDataSerializedV4,\r\n  UserFacingERC721AssetDataSerializedV4,\r\n} from './types';\r\nimport {\r\n  ERC1155_TRANSFER_FROM_DATA,\r\n  ERC721_TRANSFER_FROM_DATA,\r\n} from './nft-safe-transfer-from-data';\r\nimport addresses from './addresses.json';\r\nimport {\r\n  searchOrderbook,\r\n  postOrderToOrderbook,\r\n  PostOrderResponsePayload,\r\n  SearchOrdersParams,\r\n  ORDERBOOK_API_ROOT_URL_PRODUCTION,\r\n  SearchOrdersResponsePayload,\r\n} from './orderbook';\r\nimport { getWrappedNativeToken } from '../../utils/addresses';\r\nimport { DIRECTION_MAPPING, OrderStatusV4, TradeDirection } from './enums';\r\nimport { CONTRACT_ORDER_VALIDATOR } from './properties';\r\nimport { ETH_ADDRESS_AS_ERC20 } from './constants';\r\nimport { ZERO_AMOUNT } from '../../utils/eth';\r\nimport { arrayify } from '@ethersproject/bytes';\r\n\r\nexport enum SupportedChainIdsV4 {\r\n  Mainnet = 1,\r\n  Ropsten = 3,\r\n  Ubiq = 8,\r\n  Ganache = 1337,\r\n  Polygon = 137,\r\n  PolygonMumbai = 80001,\r\n  BSC = 56,\r\n  Optimism = 10,\r\n  Fantom = 250,\r\n  Celo = 42220,\r\n  Avalance = 43114,\r\n  GaussMainnet = 1777,\r\n  GILTestnet = 1452,\r\n}\r\n\r\nexport const SupportedChainsForV4OrderbookStatusMonitoring = [\r\n  SupportedChainIdsV4.Ropsten,\r\n  SupportedChainIdsV4.Polygon,\r\n  SupportedChainIdsV4.PolygonMumbai,\r\n  SupportedChainIdsV4.Mainnet,\r\n  SupportedChainIdsV4.Optimism,\r\n]; // We may want to see if it is possible to add our chain to the orderbook status monitoring.\r\n\r\nexport interface INftSwapV4 extends BaseNftSwap {\r\n  signOrder: (\r\n    order: NftOrderV4,\r\n    signerAddress: string,\r\n    signer: Signer,\r\n    signingOptions?: Partial<SigningOptionsV4>\r\n  ) => Promise<SignedNftOrderV4>;\r\n  buildNftAndErc20Order: (\r\n    nft:\r\n      | UserFacingERC721AssetDataSerializedV4\r\n      | UserFacingERC1155AssetDataSerializedV4,\r\n    erc20: UserFacingERC20AssetDataSerializedV4,\r\n    sellOrBuyNft: 'sell' | 'buy',\r\n    makerAddress: string,\r\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ) => NftOrderV4Serialized;\r\n  loadApprovalStatus: (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalOverrides?: Partial<ApprovalOverrides>\r\n  ) => Promise<ApprovalStatus>;\r\n  approveTokenOrNftByAsset: (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    approvalOverrides?: Partial<ApprovalOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  fillSignedOrder: (\r\n    signedOrder: SignedNftOrderV4,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  awaitTransactionHash: (txHash: string) => Promise<TransactionReceipt>;\r\n  cancelOrder: (\r\n    nonce: BigNumberish,\r\n    orderType: 'ERC721' | 'ERC1155' // Can we make this optional\r\n  ) => Promise<ContractTransaction>;\r\n  matchOrders: (\r\n    sellOrder: SignedNftOrderV4,\r\n    buyOrder: SignedNftOrderV4,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => Promise<ContractTransaction>;\r\n  // waitUntilOrderFilledOrCancelled: (\r\n  //   order: NftOrderV4,\r\n  //   timeoutInMs?: number,\r\n  //   pollOrderStatusFrequencyInMs?: number,\r\n  //   throwIfStatusOtherThanFillableOrFilled?: boolean\r\n  // ) => Promise<OrderStatus | null>;\r\n  getOrderStatus: (order: NftOrderV4) => Promise<OrderStatusV4>;\r\n  // getOrderHash: (order: NftOrderV4) => string;\r\n  // getTypedData: (\r\n  //   chainId: number,\r\n  //   exchangeContractAddress: string,\r\n  //   order: NftOrderV4\r\n  // ) => TypedData;\r\n  // normalizeSignedOrder: (order: SignedNftOrderV4) => SignedNftOrderV4;\r\n  // normalizeOrder: (order: NftOrderV4) => NftOrderV4;\r\n  // verifyOrderSignature: (\r\n  //   order: NftOrderV4,\r\n  //   signature: string,\r\n  //   chainId: number,\r\n  //   exchangeContractAddress: string\r\n  // ) => boolean;\r\n  // checkIfOrderCanBeFilledWithNativeToken: (order: NftOrderV4) => boolean;\r\n  // getAssetsFromOrder: (order: NftOrderV4) => {\r\n  //   makerAssets: SwappableAsset[];\r\n  //   takerAssets: SwappableAsset[];\r\n  // };\r\n}\r\n\r\nexport interface AdditionalSdkConfig {\r\n  // Identify your app fills with distinct integer\r\n  appId: string;\r\n  // Custom zeroex proxy contract address (defaults to the canonical contracts deployed by 0x Labs core team)\r\n  zeroExExchangeProxyContractAddress: string;\r\n  // Custom orderbook url. Defaults to using Trader.xyz's multi-chain open orderbook\r\n  orderbookRootUrl: string;\r\n}\r\n\r\nclass NftSwapV4 implements INftSwapV4 {\r\n  // RPC provider\r\n  public provider: BaseProvider;\r\n  // Wallet signer\r\n  public signer: Signer | undefined;\r\n  // Chain Id for this instance of NftSwapV4.\r\n  // To switch chains, instantiate a new version of NftSWapV4 with the updated chain id.\r\n  public chainId: number;\r\n\r\n  // ZeroEx ExchangeProxy contract address to reference\r\n  public exchangeProxyContractAddress: string;\r\n  // Generated ZeroEx ExchangeProxy contracts\r\n  public exchangeProxy: IZeroEx;\r\n\r\n  // Unique identifier for app. Must be a positive integer between 1 and 2**128\r\n  public appId: string;\r\n\r\n  // Orderbook URL\r\n  public orderbookRootUrl: string;\r\n\r\n  constructor(\r\n    provider: BaseProvider,\r\n    signer: Signer,\r\n    chainId?: number | string,\r\n    additionalConfig?: Partial<AdditionalSdkConfig>\r\n  ) {\r\n    this.provider = provider;\r\n    this.signer = signer;\r\n    this.chainId = chainId\r\n      ? parseInt(chainId.toString(10), 10)\r\n      : (this.provider._network.chainId as SupportedChainIdsV4);\r\n\r\n    const defaultAddressesForChain: AddressesForChainV4 | undefined =\r\n      addresses[this.chainId as SupportedChainIdsV4];\r\n\r\n    const zeroExExchangeContractAddress =\r\n      additionalConfig?.zeroExExchangeProxyContractAddress ??\r\n      defaultAddressesForChain?.exchange;\r\n\r\n    invariant(\r\n      zeroExExchangeContractAddress,\r\n      '0x V4 Exchange Contract Address not set. Exchange Contract is required to load NftSwap'\r\n    );\r\n\r\n    this.exchangeProxyContractAddress = zeroExExchangeContractAddress;\r\n\r\n    this.orderbookRootUrl =\r\n      additionalConfig?.orderbookRootUrl ?? ORDERBOOK_API_ROOT_URL_PRODUCTION;\r\n\r\n    this.appId = additionalConfig?.appId ?? DEFAULT_APP_ID;\r\n    verifyAppIdOrThrow(this.appId);\r\n\r\n    this.exchangeProxy = IZeroEx__factory.connect(\r\n      zeroExExchangeContractAddress,\r\n      signer ?? provider\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Checks if an asset is approved for trading with 0x v4\r\n   * If an asset is not approved, call approveTokenOrNftByAsset to approve.\r\n   * @param asset A tradeable asset (ERC20, ERC721, or ERC1155)\r\n   * @param walletAddress The wallet address that owns the asset\r\n   * @param approvalOverrides Optional config options for approving\r\n   * @returns\r\n   */\r\n  loadApprovalStatus = (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    approvalOverrides?: Partial<ApprovalOverrides> | undefined\r\n  ): Promise<ApprovalStatus> => {\r\n    // TODO(johnrjj) - Fix to pass thru more args...\r\n    return getApprovalStatus(\r\n      walletAddress,\r\n      approvalOverrides?.exchangeContractAddress ?? this.exchangeProxy.address,\r\n      asset,\r\n      this.provider\r\n    );\r\n  };\r\n\r\n  /**\r\n   * Convenience function to await a transaction hash.\r\n   * During a fill order call, you can get the pending transaction hash and await it manually via this method.\r\n   * @param txHash Transaction hash to await\r\n   * @returns\r\n   */\r\n  awaitTransactionHash = async (txHash: string) => {\r\n    return this.provider.waitForTransaction(txHash);\r\n  };\r\n\r\n  /**\r\n   * Cancels an 0x v4 order. Once cancelled, the order no longer fillable.\r\n   * Requires a signer\r\n   * @param nonce\r\n   * @param orderType\r\n   * @returns Transaciton Receipt\r\n   */\r\n  cancelOrder = (\r\n    nonce: BigNumberish,\r\n    orderType: 'ERC721' | 'ERC1155'\r\n  ): Promise<ContractTransaction> => {\r\n    if (orderType === 'ERC721') {\r\n      return this.exchangeProxy.cancelERC721Order(nonce);\r\n    }\r\n    if (orderType === 'ERC1155') {\r\n      return this.exchangeProxy.cancelERC1155Order(nonce);\r\n    }\r\n    console.log('unsupported order', orderType);\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Batch fill NFT sell orders\r\n   * Can be used by taker to fill multiple NFT sell orders atomically.\r\n   * E.g. A taker has a shopping cart full of NFTs to buy, can call this method to fill them all.\r\n   * Requires a valid signer to execute transaction\r\n   * @param signedOrders Signed 0x NFT sell orders\r\n   * @param revertIfIncomplete Revert if we don't fill _all_ orders (defaults to false)\r\n   * @param transactionOverrides Ethers transaciton overrides\r\n   * @returns\r\n   */\r\n  batchBuyNfts = (\r\n    signedOrders: Array<SignedNftOrderV4>,\r\n    revertIfIncomplete: boolean = false,\r\n    transactionOverrides?: PayableOverrides\r\n  ) => {\r\n    const allSellOrders = signedOrders.every((signedOrder) => {\r\n      if (signedOrder.direction === 0) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    invariant(\r\n      allSellOrders,\r\n      `batchBuyNfts: All orders must be of type sell order (order direction == 0)`\r\n    );\r\n\r\n    const allErc721 = signedOrders.every((signedOrder) => {\r\n      if ('erc721Token' in signedOrder) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const allErc1155 = signedOrders.every((signedOrder) => {\r\n      if ('erc1155Token' in signedOrder) {\r\n        return true;\r\n      }\r\n      return false;\r\n    });\r\n\r\n    const eitherAllErc721OrErc1155Orders = allErc721 || allErc1155;\r\n\r\n    invariant(\r\n      eitherAllErc721OrErc1155Orders,\r\n      `Batch buy is only available for tokens of the same ERC type.`\r\n    );\r\n\r\n    if (allErc721) {\r\n      const erc721SignedOrders: SignedERC721OrderStruct[] =\r\n        signedOrders as SignedERC721OrderStruct[];\r\n      return this.exchangeProxy.batchBuyERC721s(\r\n        erc721SignedOrders,\r\n        erc721SignedOrders.map((so) => so.signature),\r\n        erc721SignedOrders.map((_) => '0x'),\r\n        revertIfIncomplete,\r\n        {\r\n          ...transactionOverrides,\r\n        }\r\n      );\r\n    } else if (allErc1155) {\r\n      const erc1155SignedOrders: SignedERC1155OrderStruct[] =\r\n        signedOrders as SignedERC1155OrderStruct[];\r\n      return this.exchangeProxy.batchBuyERC1155s(\r\n        erc1155SignedOrders,\r\n        erc1155SignedOrders.map((so) => so.signature),\r\n        erc1155SignedOrders.map((so) => so.erc1155TokenAmount),\r\n        erc1155SignedOrders.map((_) => '0x'),\r\n        revertIfIncomplete,\r\n        {\r\n          ...transactionOverrides,\r\n        }\r\n      );\r\n    } else {\r\n      throw Error('batchBuyNfts: Incompatible state');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Derives order hash from order (currently requires a provider to derive)\r\n   * @param order A 0x v4 order (signed or unsigned)\r\n   * @returns Order hash\r\n   */\r\n  getOrderHash = (order: NftOrderV4Serialized): Promise<string> => {\r\n    if ('erc721Token' in order) {\r\n      return this.exchangeProxy.getERC721OrderHash(order);\r\n    }\r\n    if ('erc1155Token' in order) {\r\n      return this.exchangeProxy.getERC1155OrderHash(order);\r\n    }\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Looks up the order status for a given 0x v4 order.\r\n   * (Available states for an order are 'filled', 'expired', )\r\n   * @param order An 0x v4 NFT order\r\n   * @returns A number the corresponds to the enum OrderStatusV4\r\n   * Valid order states:\r\n   * Invalid = 0\r\n   * Fillable = 1,\r\n   * Unfillable = 2,\r\n   * Expired = 3,\r\n   */\r\n  getOrderStatus = async (order: NftOrderV4): Promise<number> => {\r\n    if ('erc721Token' in order) {\r\n      const erc721OrderStatus = await this.exchangeProxy.getERC721OrderStatus(\r\n        order\r\n      );\r\n      return erc721OrderStatus;\r\n    }\r\n    if ('erc1155Token' in order) {\r\n      const [\r\n        _erc1155OrderHash,\r\n        erc1155OrderStatus,\r\n        _erc1155OrderAmount,\r\n        _erc1155OrderAmountReminaing,\r\n      ] = await this.exchangeProxy.getERC1155OrderInfo(order);\r\n      return erc1155OrderStatus;\r\n    }\r\n    console.log('unsupported order', order);\r\n    throw new Error('unsupport order');\r\n  };\r\n\r\n  /**\r\n   * Convenience function to approve an asset (ERC20, ERC721, or ERC1155) for trading with 0x v4\r\n   * @param asset\r\n   * @param _walletAddress\r\n   * @param approvalTransactionOverrides\r\n   * @param otherOverrides\r\n   * @returns An ethers contract transaction\r\n   */\r\n  approveTokenOrNftByAsset = (\r\n    asset: SwappableAssetV4,\r\n    _walletAddress: string, // Remove in next release\r\n    approvalTransactionOverrides?: Partial<TransactionOverrides>,\r\n    otherOverrides?: Partial<ApprovalOverrides>\r\n  ): Promise<ContractTransaction> => {\r\n    const signedToUse = otherOverrides?.signer ?? this.signer;\r\n    if (!signedToUse) {\r\n      throw new Error('Signed not defined');\r\n    }\r\n    return approveAsset(\r\n      this.exchangeProxy.address,\r\n      asset,\r\n      signedToUse,\r\n      {\r\n        ...approvalTransactionOverrides,\r\n      },\r\n      otherOverrides\r\n    );\r\n  };\r\n\r\n  // // TyPeSaFeTy: Order types supported:\r\n  // // ERC721<>ERC20\r\n  // // ERC1155<>ERC20\r\n  // // Below ensures type-safe for those specific combinations\r\n  /**\r\n   * Builds a 0x order given two assets (either NFT<>ERC20 or ERC20<>NFT)\r\n   * @param makerAsset An asset (ERC20, ERC721, or ERC1155) the user has\r\n   * @param takerAsset An asset (ERC20, ERC721, or ERC1155) the user wants\r\n   * @param makerAddress The address of the wallet creating the order\r\n   * @param orderConfig Various order configuration options (e.g. expiration, nonce)\r\n   */\r\n  buildOrder(\r\n    makerAsset: UserFacingERC1155AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC1155AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC721AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: UserFacingERC20AssetDataSerializedV4,\r\n    takerAsset: UserFacingERC721AssetDataSerializedV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized;\r\n  buildOrder(\r\n    makerAsset: SwappableAssetV4,\r\n    takerAsset: SwappableAssetV4,\r\n    makerAddress: string,\r\n    orderConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ) {\r\n    // Basic validation checks\r\n    if (\r\n      (takerAsset.type === 'ERC1155' || takerAsset.type === 'ERC721') &&\r\n      (makerAsset.type === 'ERC1155' || makerAsset.type === 'ERC721')\r\n    ) {\r\n      throw new Error(\r\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\r\n      );\r\n    }\r\n    if (makerAsset.type === 'ERC20' && takerAsset.type === 'ERC20') {\r\n      throw new Error(\r\n        '0x v4 only supports ERC721/ERC1155 <> ERC20. Currently 0x v4 does not support NFT<>NFT swaps, please use 0x v3 SDK for that.'\r\n      );\r\n    }\r\n\r\n    // First determine if the maker or taker is trading the erc20 (to orient the direction of the trade)\r\n    let direction: TradeDirection = TradeDirection.SellNFT;\r\n    if (takerAsset.type === 'ERC20') {\r\n      // NFT is on the maker side (so the maker is selling the NFT)\r\n      direction = TradeDirection.SellNFT;\r\n    }\r\n    if (makerAsset.type === 'ERC20') {\r\n      // NFT is on the taker side (so the maker is buying the NFT)\r\n      direction = TradeDirection.BuyNFT;\r\n    }\r\n\r\n    const nft = (\r\n      direction === TradeDirection.BuyNFT ? takerAsset : makerAsset\r\n    ) as SwappableAssetV4;\r\n    const erc20 = (\r\n      direction === TradeDirection.BuyNFT ? makerAsset : takerAsset\r\n    ) as UserFacingERC20AssetDataSerializedV4;\r\n\r\n    return this.buildNftAndErc20Order(\r\n      nft,\r\n      erc20,\r\n      DIRECTION_MAPPING[direction],\r\n      makerAddress,\r\n      orderConfig\r\n    );\r\n  }\r\n\r\n  getWrappedTokenAddress = (chainId: number | string) => {\r\n    return getWrappedNativeToken(chainId);\r\n  };\r\n\r\n  buildCollectionBasedOrder = (\r\n    erc20ToSell: UserFacingERC20AssetDataSerializedV4,\r\n    nftCollectionToBid: {\r\n      tokenAddress: string;\r\n      type: 'ERC721' | 'ERC1155';\r\n    },\r\n    makerAddress: string\r\n  ): NftOrderV4Serialized => {\r\n    return this.buildNftAndErc20Order(\r\n      {\r\n        ...nftCollectionToBid,\r\n        // Override tokenId to zero, tokenId is ignored when using token properties\r\n        tokenId: '0',\r\n      },\r\n      erc20ToSell,\r\n      'buy',\r\n      makerAddress,\r\n      {\r\n        // Add the token property of 'collection', so this order will be valid for any nft in the collection\r\n        tokenProperties: [CONTRACT_ORDER_VALIDATOR],\r\n      }\r\n    );\r\n  };\r\n\r\n  buildNftAndErc20Order = (\r\n    nft: SwappableAssetV4,\r\n    erc20: UserFacingERC20AssetDataSerializedV4,\r\n    sellOrBuyNft: 'sell' | 'buy' = 'sell',\r\n    makerAddress: string,\r\n    userConfig?: Partial<OrderStructOptionsCommonStrict>\r\n  ): NftOrderV4Serialized => {\r\n    const defaultConfig = {\r\n      chainId: this.chainId,\r\n      makerAddress: makerAddress,\r\n      appId: this.appId,\r\n    };\r\n    const config = { ...defaultConfig, ...userConfig };\r\n\r\n    const direction =\r\n      sellOrBuyNft === 'sell' ? TradeDirection.SellNFT : TradeDirection.BuyNFT;\r\n\r\n    // Validate that a bid does not use ETH.\r\n    if (direction === TradeDirection.BuyNFT) {\r\n      if (erc20.tokenAddress.toLowerCase() === ETH_ADDRESS_AS_ERC20) {\r\n        throw new Error(\r\n          'NFT Bids cannot use the native token (e.g. ETH). Please use the wrapped native token (e.g. WETH)'\r\n        );\r\n      }\r\n    }\r\n\r\n    switch (nft.type) {\r\n      // Build ERC721 order\r\n      case 'ERC721':\r\n        const erc721Order = generateErc721Order(nft, erc20, {\r\n          direction,\r\n          maker: makerAddress,\r\n          ...config,\r\n        });\r\n        return erc721Order;\r\n      // Build ERC1155 order\r\n      case 'ERC1155':\r\n        const erc1155Order = generateErc1155Order(nft, erc20, {\r\n          direction,\r\n          maker: makerAddress,\r\n          ...config,\r\n        });\r\n        return erc1155Order;\r\n      default:\r\n        throw new UnexpectedAssetTypeError((nft as any).type ?? 'Unknown');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Signs a 0x order. Requires a signer (e.g. wallet or private key)\r\n   * Once signed, the order becomes fillable (as long as the order is valid)\r\n   * 0x orders require a signature to fill.\r\n   * @param order A 0x v4 order\r\n   * @returns A signed 0x v4 order\r\n   */\r\n  signOrder = async (order: NftOrderV4): Promise<SignedNftOrderV4> => {\r\n    if (!this.signer) {\r\n      throw new Error('Signed not defined');\r\n    }\r\n\r\n    const rawSignature = await signOrderWithEoaWallet(\r\n      order,\r\n      this.signer as unknown as TypedDataSigner,\r\n      this.chainId,\r\n      this.exchangeProxy.address\r\n    );\r\n\r\n    const ecSignature = parseRawSignature(rawSignature);\r\n\r\n    const signedOrder = {\r\n      ...order,\r\n      signature: {\r\n        signatureType: 2,\r\n        r: ecSignature.r,\r\n        s: ecSignature.s,\r\n        v: ecSignature.v,\r\n      },\r\n    };\r\n    return signedOrder;\r\n  };\r\n\r\n  /**\r\n   * Fill a 'Buy NFT' order (e.g. taker would be selling'their NFT to fill this order) without needing an approval\r\n   * Use case: Users can accept offers/bids for their NFTs without needing to approve their NFT! 🤯\r\n   * @param signedOrder Signed Buy Nft order (e.g. direction = 1)\r\n   * @param tokenId NFT token id that taker of trade will sell\r\n   * @param fillOrderOverrides Trade specific (SDK-level) overrides\r\n   * @param transactionOverrides General transaction overrides from ethers (gasPrice, gasLimit, etc)\r\n   * @returns\r\n   */\r\n  fillBuyNftOrderWithoutApproval = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    tokenId: string,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    if (!this.signer) {\r\n      throw new Error(\r\n        'Signer undefined. Signer must be provided to fill order'\r\n      );\r\n    }\r\n    if (signedOrder.direction !== TradeDirection.BuyNFT) {\r\n      throw new Error(\r\n        'Only filling Buy NFT orders (direction=1) is valid for skipping approvals'\r\n      );\r\n    }\r\n\r\n    const signerAddress = await this.signer.getAddress();\r\n    const unwrapWeth =\r\n      fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n      false;\r\n\r\n    // Handle ERC721\r\n    if ('erc721Token' in signedOrder) {\r\n      const erc721Contract = ERC721__factory.connect(\r\n        signedOrder.erc721Token,\r\n        this.signer\r\n      );\r\n\r\n      const encodingIface = new Interface(ERC721_TRANSFER_FROM_DATA);\r\n\r\n      const fragment = encodingIface.getFunction('safeTransferFromErc721Data');\r\n      const data = encodingIface._encodeParams(fragment.inputs, [\r\n        signedOrder,\r\n        signedOrder.signature,\r\n        unwrapWeth,\r\n      ]);\r\n\r\n      const transferFromTx = await erc721Contract[\r\n        'safeTransferFrom(address,address,uint256,bytes)'\r\n      ](\r\n        signerAddress,\r\n        this.exchangeProxy.address,\r\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\r\n        data,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return transferFromTx;\r\n    }\r\n\r\n    // Handle ERC1155\r\n    if ('erc1155Token' in signedOrder) {\r\n      const erc1155Contract = ERC1155__factory.connect(\r\n        signedOrder.erc1155Token,\r\n        this.signer\r\n      );\r\n      const encodingIface = new Interface(ERC1155_TRANSFER_FROM_DATA);\r\n\r\n      const fragment = encodingIface.getFunction('safeTransferFromErc1155Data');\r\n      const data = encodingIface._encodeParams(fragment.inputs, [\r\n        signedOrder,\r\n        signedOrder.signature,\r\n        unwrapWeth,\r\n      ]);\r\n\r\n      const transferFromTx = await erc1155Contract.safeTransferFrom(\r\n        signerAddress,\r\n        this.exchangeProxy.address,\r\n        fillOrderOverrides?.tokenIdToSellForCollectionOrder ?? tokenId,\r\n        signedOrder.erc1155TokenAmount ?? '1',\r\n        data,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return transferFromTx;\r\n    }\r\n\r\n    // Unknown format (NFT neither ERC721 or ERC1155)\r\n    throw new Error('unknown order type');\r\n  };\r\n\r\n  /**\r\n   * Fills a 'collection'-based order (e.g. a bid for any nft belonging to a particular collection)\r\n   * @param signedOrder A 0x signed collection order\r\n   * @param tokenId The token id to fill for the collection order\r\n   * @param fillOrderOverrides Various fill options\r\n   * @param transactionOverrides Ethers transaction overrides\r\n   * @returns\r\n   */\r\n  fillSignedCollectionOrder = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    tokenId: BigNumberish,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    return this.fillSignedOrder(\r\n      signedOrder,\r\n      {\r\n        tokenIdToSellForCollectionOrder: tokenId,\r\n        ...fillOrderOverrides,\r\n      },\r\n      {\r\n        ...transactionOverrides,\r\n      }\r\n    );\r\n  };\r\n\r\n  isErc20NativeToken = (order: NftOrderV4): boolean => {\r\n    return order.erc20Token.toLowerCase() === ETH_ADDRESS_AS_ERC20;\r\n  };\r\n\r\n  /**\r\n   * Fills a signed order\r\n   * @param signedOrder A signed 0x v4 order\r\n   * @param fillOrderOverrides Optional configuration on possible ways to fill the order\r\n   * @param transactionOverrides Ethers transaction overrides (e.g. gas price)\r\n   * @returns\r\n   */\r\n  fillSignedOrder = async (\r\n    signedOrder: SignedNftOrderV4,\r\n    fillOrderOverrides?: Partial<FillOrderOverrides>,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    // Only Sell orders can be filled with ETH\r\n    const canOrderTypeBeFilledWithNativeToken =\r\n      signedOrder.direction === TradeDirection.SellNFT;\r\n    // Is ERC20 being traded the native token\r\n    const isNativeToken = this.isErc20NativeToken(signedOrder);\r\n    const needsEthAttached =\r\n      isNativeToken && canOrderTypeBeFilledWithNativeToken;\r\n    const erc20TotalAmount = this.getErc20TotalIncludingFees(signedOrder);\r\n\r\n    // do fill\r\n    if ('erc1155Token' in signedOrder) {\r\n      // If maker is selling an NFT, taker wants to 'buy' nft\r\n      if (signedOrder.direction === TradeDirection.SellNFT) {\r\n        return this.exchangeProxy.buyERC1155(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          signedOrder.erc1155TokenAmount,\r\n          '0x',\r\n          {\r\n            // If we're filling an order with ETH, be sure to include the value with fees added\r\n            value: needsEthAttached ? erc20TotalAmount : undefined,\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      } else {\r\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\r\n        let unwrapNativeToken: boolean =\r\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n          false;\r\n\r\n        if (signedOrder.erc1155TokenProperties.length > 0) {\r\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\r\n          if (\r\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\r\n          ) {\r\n            throw new Error(\r\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\r\n            );\r\n          }\r\n        }\r\n\r\n        // Otherwise, taker is selling the nft (and buying an ERC20)\r\n        return this.exchangeProxy.sellERC1155(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\r\n            signedOrder.erc1155TokenId,\r\n          signedOrder.erc1155TokenAmount,\r\n          unwrapNativeToken,\r\n          '0x',\r\n          {\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      }\r\n    } else if ('erc721Token' in signedOrder) {\r\n      // If maker is selling an NFT, taker wants to 'buy' nft\r\n      if (signedOrder.direction === TradeDirection.SellNFT) {\r\n        return this.exchangeProxy.buyERC721(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          '0x',\r\n          {\r\n            // If we're filling an order with ETH, be sure to include the value with fees added\r\n            value: needsEthAttached ? erc20TotalAmount : undefined,\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      } else {\r\n        // TODO(detect if erc20 token is wrapped token, then switch true. if true when not wrapped token, tx will fail)\r\n        let unwrapNativeToken: boolean =\r\n          fillOrderOverrides?.fillOrderWithNativeTokenInsteadOfWrappedToken ??\r\n          false;\r\n\r\n        if (signedOrder.erc721TokenProperties.length > 0) {\r\n          // property based order, let's make sure they've specifically provided a tokenIdToSellForCollectionOrder\r\n          if (\r\n            fillOrderOverrides?.tokenIdToSellForCollectionOrder === undefined\r\n          ) {\r\n            throw new Error(\r\n              'Collection order missing NFT tokenId to fill with. Specify in fillOrderOverrides.tokenIdToSellForCollectionOrder'\r\n            );\r\n          }\r\n        }\r\n\r\n        // Otherwise, taker is selling the nft (and buying an ERC20)\r\n        return this.exchangeProxy.sellERC721(\r\n          signedOrder,\r\n          signedOrder.signature,\r\n          fillOrderOverrides?.tokenIdToSellForCollectionOrder ??\r\n            signedOrder.erc721TokenId,\r\n          unwrapNativeToken,\r\n          '0x',\r\n          {\r\n            ...transactionOverrides,\r\n          }\r\n        );\r\n      }\r\n    }\r\n    console.log('unsupported order', signedOrder);\r\n    throw new Error('unsupport signedOrder type');\r\n  };\r\n\r\n  /**\r\n   * Posts a 0x order to the Trader.xyz NFT open orderbook\r\n   * @param signedOrder A valid 0x v4 signed order\r\n   * @param chainId The chain id (e.g. '1' for mainnet, or '137' for polygon mainnet)\r\n   * @param metadata An optional record object (key: string, value: string) that will be stored alongside the order in the orderbook\r\n   * This is helpful for webapp builders, as they can save app-level order metadata\r\n   * (e.g. maybe save a 'bidMessage' alongside the order, or extra image metadata)\r\n   * @returns\r\n   */\r\n  postOrder = (\r\n    signedOrder: SignedNftOrderV4,\r\n    chainId: string | number,\r\n    metadata?: Record<string, string>\r\n  ): Promise<PostOrderResponsePayload> => {\r\n    const parsedChainId = parseInt(chainId.toString(10), 10);\r\n    const supportsMonitoring =\r\n      SupportedChainsForV4OrderbookStatusMonitoring.includes(parsedChainId);\r\n    warning(\r\n      supportsMonitoring,\r\n      `Chain ${chainId} does not support live orderbook status monitoring. Orders can be posted to be persisted, but status wont be monitored (e.g. updating status on a fill, cancel, or expiry.)`\r\n    );\r\n    return postOrderToOrderbook(signedOrder, parsedChainId, metadata, {\r\n      rootUrl: this.orderbookRootUrl,\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Gets orders from the Trader.xyz Open NFT Orderbook\r\n   * By default will find all order, active orders.\r\n   * @param filters Various options to filter an order search\r\n   * @returns An object that includes `orders` key with an array of orders that meet the search critera\r\n   */\r\n  getOrders = async (\r\n    filters?: Partial<SearchOrdersParams>\r\n  ): Promise<SearchOrdersResponsePayload> => {\r\n    const orders = await searchOrderbook(filters, {\r\n      rootUrl: this.orderbookRootUrl,\r\n    });\r\n    return orders;\r\n  };\r\n\r\n  /**\r\n   *\r\n   * @param sellOrder ERC721 Order to sell an NFT\r\n   * @param buyOrder ERC721 Order to buy an NFT\r\n   * @param transactionOverrides Ethers transaction overrides\r\n   * @returns\r\n   */\r\n  matchOrders = async (\r\n    // NOTE(johnrjj)- Should these types be SignedERC721OrderStruct directly since only 712 is supported for matching\r\n    sellOrder: SignedNftOrderV4,\r\n    buyOrder: SignedNftOrderV4,\r\n    transactionOverrides?: Partial<PayableOverrides>\r\n  ) => {\r\n    if ('erc721Token' in sellOrder && 'erc721Token' in buyOrder) {\r\n      // TODO(johnrjj) - More validation here before we match on-chain\r\n      const contractTx = await this.exchangeProxy.matchERC721Orders(\r\n        sellOrder,\r\n        buyOrder,\r\n        sellOrder.signature,\r\n        buyOrder.signature,\r\n        transactionOverrides ?? {}\r\n      );\r\n      return contractTx;\r\n    }\r\n\r\n    throw new Error(\r\n      'Only ERC721 Orders are currently supported for matching. Please ensure both the sellOrder and buyOrder are ERC721 orders'\r\n    );\r\n  };\r\n\r\n  getMakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\r\n    // Buy NFT - So maker asset is an ERC20\r\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\r\n      return {\r\n        tokenAddress: order.erc20Token,\r\n        amount: order.erc20TokenAmount.toString(10),\r\n        type: 'ERC20' as const,\r\n      };\r\n    } else if (\r\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\r\n    ) {\r\n      // Sell NFT - So maker asset is an NFT (either ERC721 or ERC1155)\r\n      if ('erc721Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc721Token,\r\n          tokenId: order.erc721TokenId.toString(10),\r\n          type: 'ERC721' as const,\r\n        };\r\n      } else if ('erc1155Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc1155Token,\r\n          tokenId: order.erc1155TokenId.toString(10),\r\n          amount: order.erc1155TokenAmount.toString(10),\r\n          type: 'ERC1155' as const,\r\n        };\r\n      }\r\n    }\r\n    throw new Error(`Unknown order direction ${order.direction}`);\r\n  };\r\n\r\n  getTakerAsset = (order: NftOrderV4): SwappableAssetV4 => {\r\n    // Buy NFT - So taker asset is an NFT [ERC721 or ERC1155] (because the taker is the NFT owner 'accepting' a buy order)\r\n    if (order.direction.toString(10) === TradeDirection.BuyNFT.toString()) {\r\n      if ('erc721Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc721Token,\r\n          tokenId: order.erc721TokenId.toString(10),\r\n          type: 'ERC721' as const,\r\n        };\r\n      } else if ('erc1155Token' in order) {\r\n        return {\r\n          tokenAddress: order.erc1155Token,\r\n          tokenId: order.erc1155TokenId.toString(10),\r\n          amount: order.erc1155TokenAmount.toString(10),\r\n          type: 'ERC1155' as const,\r\n        };\r\n      }\r\n    } else if (\r\n      order.direction.toString(10) === TradeDirection.SellNFT.toString()\r\n    ) {\r\n      // Sell NFT - So taker asset is an ERC20 -- because the taker here is 'buying' the sell NFT order\r\n      return {\r\n        tokenAddress: order.erc20Token,\r\n        amount: order.erc20TokenAmount.toString(10),\r\n        type: 'ERC20' as const,\r\n      };\r\n    }\r\n    throw new Error(`Unknown order direction ${order.direction}`);\r\n  };\r\n\r\n  /**\r\n   * Validate an order signature given a signed order\r\n   * Throws if invalid\r\n   * @param signedOrder A 0x v4 signed order to validate signature for\r\n   * @returns\r\n   */\r\n  validateSignature = async (\r\n    signedOrder: SignedNftOrderV4\r\n  ): Promise<boolean> => {\r\n    if ('erc721Token' in signedOrder) {\r\n      // Validate functions on-chain return void if successful\r\n      await this.exchangeProxy.validateERC721OrderSignature(\r\n        signedOrder,\r\n        signedOrder.signature\r\n      );\r\n      return true;\r\n    } else if ('erc1155Token' in signedOrder) {\r\n      // Validate functions on-chain return void if successful\r\n      await this.exchangeProxy.validateERC1155OrderSignature(\r\n        signedOrder,\r\n        signedOrder.signature\r\n      );\r\n      return true;\r\n    } else {\r\n      throw new Error('Unknown order type (not ERC721 or ERC1155)');\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Fetches the balance of an asset for a given wallet address\r\n   * @param asset A Tradeable asset -- An ERC20, ERC721, or ERC1155\r\n   * @param walletAddress A wallet address ('0x1234...6789')\r\n   * @param provider Optional, defaults to the class's provider but can be overridden\r\n   * @returns A BigNumber balance (e.g. 1 or 0 for ERC721s. ERC20 and ERC1155s can have balances greater than 1)\r\n   */\r\n  fetchBalanceForAsset = async (\r\n    asset: SwappableAssetV4,\r\n    walletAddress: string,\r\n    provider: BaseProvider = this.provider\r\n  ): Promise<BigNumber> => {\r\n    switch (asset.type) {\r\n      case 'ERC20':\r\n        const erc20 = ERC20__factory.connect(asset.tokenAddress, provider);\r\n        return erc20.balanceOf(walletAddress);\r\n      case 'ERC721':\r\n        const erc721 = ERC721__factory.connect(asset.tokenAddress, provider);\r\n        const owner = await erc721.ownerOf(asset.tokenId);\r\n        if (owner.toLowerCase() === walletAddress.toLowerCase()) {\r\n          return BigNumber.from(1);\r\n        }\r\n        return BigNumber.from(0);\r\n      case 'ERC1155':\r\n        const erc1155 = ERC1155__factory.connect(asset.tokenAddress, provider);\r\n        return erc1155.balanceOf(walletAddress, asset.tokenId);\r\n      default:\r\n        throw new Error(`Asset type unknown ${(asset as any).type}`);\r\n    }\r\n  };\r\n\r\n  // TODO(johnrjj) Consolidate w/ checkOrderCanBeFilledMakerSide\r\n  checkOrderCanBeFilledTakerSide = async (\r\n    order: NftOrderV4,\r\n    takerWalletAddress: string\r\n  ) => {\r\n    const takerAsset = this.getTakerAsset(order);\r\n    const takerApprovalStatus = await this.loadApprovalStatus(\r\n      takerAsset,\r\n      takerWalletAddress\r\n    );\r\n    const takerBalance = await this.fetchBalanceForAsset(\r\n      this.getTakerAsset(order),\r\n      takerWalletAddress\r\n    );\r\n\r\n    const hasBalance: boolean = takerBalance.gte(\r\n      (takerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\r\n    );\r\n\r\n    const isApproved: boolean =\r\n      takerApprovalStatus.contractApproved ||\r\n      takerApprovalStatus.tokenIdApproved ||\r\n      false;\r\n\r\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\r\n\r\n    return {\r\n      approvalStatus: takerApprovalStatus,\r\n      balance: takerBalance.toString(),\r\n      isApproved,\r\n      hasBalance,\r\n      canOrderBeFilled,\r\n    };\r\n  };\r\n\r\n  checkOrderCanBeFilledMakerSide = async (\r\n    order: NftOrderV4\r\n    // override?: Partial<VerifyOrderOptionsOverrides>\r\n  ) => {\r\n    const makerAddress = order.maker;\r\n    const makerAsset = this.getMakerAsset(order);\r\n    const makerApprovalStatus = await this.loadApprovalStatus(\r\n      makerAsset,\r\n      makerAddress\r\n    );\r\n    const makerBalance = await this.fetchBalanceForAsset(\r\n      this.getMakerAsset(order),\r\n      makerAddress\r\n    );\r\n\r\n    const hasBalance: boolean = makerBalance.gte(\r\n      (makerAsset as UserFacingERC20AssetDataSerializedV4).amount ?? 1\r\n    );\r\n    const isApproved: boolean =\r\n      makerApprovalStatus.tokenIdApproved ||\r\n      makerApprovalStatus.contractApproved ||\r\n      false;\r\n    const canOrderBeFilled: boolean = hasBalance && isApproved;\r\n\r\n    return {\r\n      approvalStatus: makerApprovalStatus,\r\n      balance: makerBalance.toString(),\r\n      isApproved,\r\n      hasBalance,\r\n      canOrderBeFilled,\r\n    };\r\n  };\r\n\r\n  /**\r\n   * Convenience function to sum all fees. Total fees denominated in erc20 token amount.\r\n   * @param order A 0x v4 order (signed or un-signed);\r\n   * @returns Total summed fees for a 0x v4 order. Amount is represented in Erc20 token units.\r\n   */\r\n  getTotalFees = (order: NftOrderV4): BigNumber => {\r\n    const fees = order.fees;\r\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\r\n    let feesTotal = ZERO_AMOUNT;\r\n    fees.forEach((fee) => {\r\n      feesTotal = feesTotal.add(BigNumber.from(fee.amount));\r\n    });\r\n    return feesTotal;\r\n  };\r\n\r\n  /**\r\n   * Calculates total order cost.\r\n   * In 0x v4, fees are additive (i.e. they are not deducted from the order amount, but added on top of)\r\n   * @param order A 0x v4 order;\r\n   * @returns Total cost of an order (base amount + fees). Amount is represented in Erc20 token units. Does not include gas costs.\r\n   */\r\n  getErc20TotalIncludingFees = (order: NftOrderV4): BigNumber => {\r\n    const fees = order.fees;\r\n    // In 0x v4, fees are additive (not included in the original erc20 amount)\r\n    let feesTotal = this.getTotalFees(order);\r\n    const orderTotalCost = BigNumber.from(order.erc20TokenAmount).add(\r\n      feesTotal\r\n    );\r\n    return orderTotalCost;\r\n  };\r\n}\r\n\r\nexport { NftSwapV4 };\r\n","import { NULL_ADDRESS } from '../../utils/eth';\r\nimport { PropertyStruct } from './types';\r\n\r\n/**\r\n * Contract-based orders property validator.\r\n * Add this to your order's tokenProperties to make it a collection order\r\n */\r\nexport const CONTRACT_ORDER_VALIDATOR: PropertyStruct = {\r\n  propertyValidator: NULL_ADDRESS,\r\n  propertyData: [],\r\n};\r\n","import { SupportedChainIdsV4 } from '../sdk';\r\nimport defaultAddresses from '../sdk/v4/addresses.json';\r\n\r\nexport const getWrappedNativeToken = (\r\n  chainId: number | string\r\n): string | null => {\r\n  const chainIdString = chainId.toString(10);\r\n  const zeroExAddresses:\r\n    | { exchange: string; wrappedNativeToken: string }\r\n    | undefined =\r\n    defaultAddresses[chainIdString as unknown as SupportedChainIdsV4];\r\n  return zeroExAddresses?.wrappedNativeToken ?? null;\r\n};\r\n"],"names":["AssetProxyId","SupportedChainIdsV3","OrderStatusV3","runtime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","key","value","defineProperty","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","generator","create","Generator","context","Context","_invoke","state","method","arg","Error","undefined","done","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","makeInvokeMethod","fn","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","then","unwrapped","error","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","doneResult","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","thrown","delegateYield","module","regeneratorRuntime","accidentalStrictMode","globalThis","Function","ZERO_AMOUNT","BigNumber","from","NULL_ADDRESS","SupportedTokenTypes","OrderStatusCodeLookup","ORDER_BUILDER_ERROR_CODES","RevertReason","EIP712_TYPES","Order","INFINITE_TIMESTAMP_SEC","getEipDomain","chainId","exchangeContractAddress","version","toString","verifyingContract","normalizeOrder","order","makerAddress","toLowerCase","takerAddress","feeRecipientAddress","senderAddress","makerAssetAmount","takerAssetAmount","makerFee","takerFee","expirationTimeSeconds","salt","makerAssetData","takerAssetData","makerFeeAssetData","takerFeeAssetData","signature","_order$signature","generateTimeBasedSalt","getUnixTime","Date","ModuleError","message","options","code","_this","String","expected","cause","captureStackTrace","UnexpectedAssetTypeError","assetType","UnsupportedChainId","convertStringToBN","s","convertCollectionToBN","arr","map","encodeErc20AssetData","tokenAddress","hexConcat","ERC20","defaultAbiCoder","encode","decodeErc20AssetData","encodedAssetData","hexDataLength","assetProxyId","hexDataSlice","rest","decode","encodeErc721AssetData","tokenId","ERC721","decodeErc721AssetData","data","encodeErc1155AssetData","tokenIds","callbackData","ERC1155","decodeErc1155AssetData","id","tokenValues","val","encodeMultiAssetAssetData","nestedAssetData","MultiAsset","decodeMultiAssetData","nestedAssetDatas","amounts","decodeAssetData","encodeAssetData","assetData","erc1155EncodingForMultiAssetOrder","tokens","x","_","tokenValue","getAmountFromAsset","amount","_assetData$tokens$","convertAssetToInternalFormat","swappable","convertAssetsToInternalFormat","assets","_abi","inputs","internalType","payable","stateMutability","anonymous","indexed","constant","outputs","components","ExchangeContract__factory","createInterface","utils","Interface","connect","address","signerOrProvider","Contract","Forwarder__factory","IZeroEx__factory","ERC1155__factory","ERC20__factory","ERC721__factory","EIP1271ZeroExDataAbi","cancelOrder","exchangeContract","getOrderInfo","getOrderStatus","orderStatus","hashOrder","EIP712_DOMAIN","_TypedDataEncoder","hash","signOrderWithEip1271","signer","types","typedData","domain","orderHash","msg","encodeFunctionData","signMessage","arrayify","signOrderWithEoaWallet","_signTypedData","checkIfContractWallet","provider","walletAddress","isContractWallet","getCode","walletCode","_isSequenceProvider","providerToUse","isWalletConnect","connector","_peerMeta","description","signOrder","signerAddress","signingOptions","signatureType","autodetectSignatureType","prepareOrderSignatureFromEoaWallet","rawEip1271Signature","prepareOrderSignatureFromContractWallet","signedOrder","console","log","rawSignature","splitSignature","hexlify","v","r","verifyOrderSignature","maker","slicedSigV","slicedSig","derivedSignatureHex","derivedSignature","joinSignature","verifyTypedData","e","buildOrder","makerAssets","takerAssets","orderConfig","makerAsset","makerAssetAmounts","ma","makerAssetDatas","takerAsset","takerAssetAmounts","ta","takerAssetDatas","expiration","generateOrderFromAssetDatas","exchangeAddress","fillSignedOrder","overrides","fillOrKillOrder","getApprovalStatus","exchangeProxyAddressForAsset","asset","erc20","allowance","erc20AllowanceBigNumber","MAX_APPROVAL_WITH_BUFFER","MAX_APPROVAL","sub","approvedForMax","gte","contractApproved","erc721","erc721ApprovalForAllPromise","isApprovedForAll","erc721ApprovedAddressForIdPromise","getApproved","all","erc721ApprovalForAll","tokenIdApproved","erc1155","erc1155ApprovalForAll","pow","approveAsset","approve","erc20ApprovalTxPromise","setApprovalForAll","estimateGasForApproval","estimateGas","estimateGasForFillOrder","_overrides","fillOrder","convertDecodedAssetDataToUserFacingAssets","decodedAssetData","assetAmount","multiAssetDecodedData","flatten","idx","nestedAsset","getAssetsFromOrder","decodedMakerAssetData","decodedTakerAssetData","getZeroExAddressesForChain","addresses","defaultAddresses","getProxyAddressForErcType","zeroExAddresses","erc20Proxy","erc721Proxy","erc1155Proxy","DEFAUTLT_GAS_BUFFER_MULTIPLES","Polygon","PolygonMumbai","Kovan","sleep","t","timeout","setTimeout","clearTimeout","NftSwapV3","additionalConfig","_cancelOrder","timeoutInMs","pollOrderStatusFrequencyInMs","throwIfStatusOtherThanFillableOrFilled","settled","timeoutPromise","orderStatusRefreshPromiseFn","orderInfo","Fillable","FullyFilled","fillEventListenerFn","orderStatusRefreshPromiseLoop","fillEventPromise","any","_getOrderInfo","txHash","waitForTransaction","addressOfWalletSigningOrder","signerOverride","signerToUser","_signOrder","userConfig","config","_buildOrder","assetInternalFmt","_getApprovalStatus","_hashOrder","_getAssetsFromOrder","wrappedNativeTokenContractAddress","erc20TokenAddress","invariant","_wrappedNativeTokenCo","fillOverrides","transactionOverrides","gasBufferMultiple","gasAmountBufferMultiple","getGasMultipleForChainId","_estimateGasForFillOrder","maybeCustomGasLimit","Math","floor","toNumber","allTxOverrides","gasLimit","fillOrderWithNativeTokenInsteadOfWrappedToken","checkIfOrderCanBeFilledWithNativeToken","forwarderContractAddress","forwarderContract","marketBuyOrdersWithEth","_fillSignedOrder","gasBufferMultiples","_normalizeOrder","_verifyOrderSignature","_network","chainDefaultContractAddresses","zeroExExchangeContractAddress","exchange","erc20ProxyContractAddress","erc721ProxyContractAddress","erc1155ProxyContractAddress","forwarder","getForwarderAddress","wrappedNativeToken","getWrappedNativeToken","approveTokenOrNftByAsset","_walletAddress","approvalTransactionOverrides","otherOverrides","exchangeProxyContractAddressForAsset","signerToUse","_estimateGasForApproval","_approveAsset","ERC721ORDER_STRUCT_ABI","ERC1155ORDER_STRUCT_ABI","FEE_ABI","PROPERTY_ABI","ETH_ADDRESS_AS_ERC20","erc1155Token","Fee","Property","erc721Token","txOverrides","approvalOrderrides","approvalOnlyTokenIdIfErc721","erc721ApprovalForOnlyTokenId","parseRawSignature","hexSize","VALID_V_VALUES","parseInt","includes","TradeDirection","OrderStatusV4","INFINITE_EXPIRATION_TIMESTAMP_SEC","RESERVED_APP_ID_PREFIX_DIGITS","verifyAppIdOrThrow","appId","isCorrectLength","hasOnlyNumbers","test","generateRandomV4OrderNonce","order128","padStart","generateRandom128BitNumber","final256BitNonce","padEnd","base","hex","v4","replace","BigInt","serializeNftOrder","direction","expiry","nonce","erc20TokenAmount","fees","fee","feeData","erc721TokenId","erc1155TokenAmount","erc1155TokenId","ERC721_TRANSFER_FROM_DATA","ERC1155_TRANSFER_FROM_DATA","postOrderToOrderbook","metadata","requestOptions","fetchFn","unfetch","payload","rootUrl","headers","body","JSON","stringify","res","ok","json","status","searchOrderbook","filters","stringifiedQueryParams","arrayFormat","SupportedChainIdsV4","DIRECTION_MAPPING","BuyNFT","SellNFT","CONTRACT_ORDER_VALIDATOR","propertyValidator","propertyData","SupportedChainsForV4OrderbookStatusMonitoring","Ropsten","Mainnet","Optimism","NftSwapV4","approvalOverrides","exchangeProxy","orderType","cancelERC721Order","cancelERC1155Order","signedOrders","revertIfIncomplete","every","allErc721","allErc1155","erc721SignedOrders","batchBuyERC721s","so","erc1155SignedOrders","batchBuyERC1155s","getERC721OrderHash","getERC1155OrderHash","getERC721OrderStatus","getERC1155OrderInfo","signedToUse","chainIdString","erc20ToSell","nftCollectionToBid","buildNftAndErc20Order","tokenProperties","nft","sellOrBuyNft","orderData","erc20Token","erc721TokenProperties","_orderData$tokenPrope2","property","_orderData$fees","recipient","_x$feeData","_orderData$nonce","taker","_orderData$taker","generateErc721Order","erc1155TokenProperties","_orderData$tokenPrope4","_orderData$fees2","_fee$feeData","_orderData$nonce2","_orderData$taker2","generateErc1155Order","ecSignature","fillOrderOverrides","getAddress","unwrapWeth","erc721Contract","encodingIface","fragment","getFunction","_encodeParams","tokenIdToSellForCollectionOrder","erc1155Contract","safeTransferFrom","canOrderTypeBeFilledWithNativeToken","isNativeToken","isErc20NativeToken","needsEthAttached","erc20TotalAmount","getErc20TotalIncludingFees","buyERC1155","unwrapNativeToken","sellERC1155","buyERC721","sellERC721","parsedChainId","orderbookRootUrl","sellOrder","buyOrder","matchERC721Orders","validateERC721OrderSignature","validateERC1155OrderSignature","balanceOf","ownerOf","takerWalletAddress","getTakerAsset","loadApprovalStatus","takerApprovalStatus","fetchBalanceForAsset","hasBalance","takerBalance","isApproved","canOrderBeFilled","approvalStatus","balance","getMakerAsset","makerApprovalStatus","makerBalance","feesTotal","add","getTotalFees","defaultAddressesForChain","zeroExExchangeProxyContractAddress","exchangeProxyContractAddress","orders","batchCancelOrders","unixTimestampAsSalt","cancelOrdersUpTo"],"mappings":"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ACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,YACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,aACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,gBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,UAGVuD,KAAM,cACNmJ,QAAS,CACP,CACEC,WAAY,CACV,CACEA,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,kBACNvD,KAAM,YAGVoM,aAAc,oCACd7I,KAAM,OACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,kBACNvD,KAAM,YAGVoM,aAAc,oCACd7I,KAAM,QACNvD,KAAM,SAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,0BACNvD,KAAM,YAGVoM,aAAc,2CACd7I,KAAM,qBACNvD,KAAM,UAGVqM,SAAS,EACTC,gBAAiB,UACjBtM,KAAM,YAER,CACEyM,UAAU,EACVN,OAAQ,CACN,CACEQ,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,YACNvD,KAAM,SAER,CACE2M,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,sBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,gBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,mBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,WACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,wBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,OACNvD,KAAM,WAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,oBACNvD,KAAM,UAGVoM,aAAc,wBACd7I,KAAM,aACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,gBACNvD,KAAM,SAER,CACEoM,aAAc,QACd7I,KAAM,iBACNvD,KAAM,UAGVuD,KAAM,6BACNmJ,QAAS,CACP,CACEC,WAAY,CACV,CACEA,WAAY,CACV,CACEP,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,yBACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7I,KAAM,eACNvD,KAAM,WAER,CACEoM,aAAc,UACd7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"}